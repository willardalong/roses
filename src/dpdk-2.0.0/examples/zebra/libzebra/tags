!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-include	Makefile	/^SYMLINK-$(CONFIG_RTE_LIBRTE_CMDLINE)-include := $(INCS)$/;"	m	language:Make
AAA_NODE	command.h	/^  AAA_NODE,			\/* AAA node. *\/$/;"	e	language:C++	enum:node_type
ACCESS_IPV6_NODE	command.h	/^  ACCESS_IPV6_NODE,		\/* Access list node. *\/$/;"	e	language:C++	enum:node_type
ACCESS_NODE	command.h	/^  ACCESS_NODE,			\/* Access list node. *\/$/;"	e	language:C++	enum:node_type
ACCESS_TYPE_NUMBER	filter.h	/^  ACCESS_TYPE_NUMBER$/;"	e	language:C++	enum:access_type
ACCESS_TYPE_STRING	filter.h	/^  ACCESS_TYPE_STRING,$/;"	e	language:C++	enum:access_type
AFI_IP	zebra.h	485;"	d	language:C++
AFI_IP6	zebra.h	486;"	d	language:C++
AFI_MAX	zebra.h	487;"	d	language:C++
AFI_ORF_PREFIX	plist.h	26;"	d	language:C++
AF_INET_UNION	sockunion.h	59;"	d	language:C++
AF_INET_UNION	sockunion.h	61;"	d	language:C++
ALIAS	command.h	417;"	d	language:C++
ALIAS_ATTR	command.h	420;"	d	language:C++
ALIAS_DEPRECATED	command.h	426;"	d	language:C++
ALIAS_HIDDEN	command.h	423;"	d	language:C++
ALIAS_SH	command.h	429;"	d	language:C++
ALIAS_SH_DEPRECATED	command.h	435;"	d	language:C++
ALIAS_SH_HIDDEN	command.h	432;"	d	language:C++
ALL_LIST_ELEMENTS	linklist.h	91;"	d	language:C++
ALL_LIST_ELEMENTS_RO	linklist.h	103;"	d	language:C++
AREA_TAG_STR	command.h	485;"	d	language:C++
AS_LIST_NODE	command.h	/^  AS_LIST_NODE,			\/* AS list node. *\/$/;"	e	language:C++	enum:node_type
AS_STR	command.h	465;"	d	language:C++
AT_STRINGS_BEG	regex.c	3735;"	d	language:C	file:
AT_STRINGS_END	regex.c	3736;"	d	language:C	file:
AUTH_ENABLE_NODE	command.h	/^  AUTH_ENABLE_NODE,		\/* Authentication mode for change enable. *\/$/;"	e	language:C++	enum:node_type
AUTH_NODE	command.h	/^  AUTH_NODE,			\/* Authentication mode of vty interface. *\/$/;"	e	language:C++	enum:node_type
BABEL_NODE	command.h	/^  BABEL_NODE,			\/* Babel protocol mode node. *\/$/;"	e	language:C++	enum:node_type
BABEL_VTYSH_PATH	config.h	8;"	d	language:C++
BGP_IPV4M_NODE	command.h	/^  BGP_IPV4M_NODE,		\/* BGP IPv4 multicast address family.  *\/$/;"	e	language:C++	enum:node_type
BGP_IPV4_NODE	command.h	/^  BGP_IPV4_NODE,		\/* BGP IPv4 unicast address family.  *\/$/;"	e	language:C++	enum:node_type
BGP_IPV6M_NODE	command.h	/^  BGP_IPV6M_NODE,		\/* BGP IPv6 multicast address family. *\/$/;"	e	language:C++	enum:node_type
BGP_IPV6_NODE	command.h	/^  BGP_IPV6_NODE,		\/* BGP IPv6 address family *\/$/;"	e	language:C++	enum:node_type
BGP_NODE	command.h	/^  BGP_NODE,			\/* BGP protocol mode which includes BGP4+ *\/$/;"	e	language:C++	enum:node_type
BGP_STR	command.h	459;"	d	language:C++
BGP_VPNV4_NODE	command.h	/^  BGP_VPNV4_NODE,		\/* BGP MPLS-VPN PE exchange. *\/$/;"	e	language:C++	enum:node_type
BGP_VTYSH_PATH	config.h	11;"	d	language:C++
BIG_ENDIAN	zebra.h	361;"	d	language:C++
BUFFER_DATA_FREE	buffer.c	66;"	d	language:C	file:
BUFFER_EMPTY	buffer.h	/^    BUFFER_EMPTY = 0,$/;"	e	language:C++	enum:__anon13
BUFFER_ERROR	buffer.h	/^    BUFFER_ERROR = -1,$/;"	e	language:C++	enum:__anon13
BUFFER_PENDING	buffer.h	/^    BUFFER_PENDING = 1$/;"	e	language:C++	enum:__anon13
BUFFER_SIZE_DEFAULT	buffer.c	63;"	d	language:C	file:
BUF_PUSH	regex.c	1625;"	d	language:C	file:
BUF_PUSH_2	regex.c	1633;"	d	language:C	file:
BUF_PUSH_3	regex.c	1642;"	d	language:C	file:
BYTEWIDTH	regex.c	372;"	d	language:C	file:
BYTE_ORDER	zebra.h	366;"	d	language:C++
BYTE_ORDER	zebra.h	368;"	d	language:C++
CHAR_CLASS_MAX_LENGTH	regex.c	1789;"	d	language:C	file:
CHAR_CLASS_MAX_LENGTH	regex.c	1793;"	d	language:C	file:
CHAR_CLASS_MAX_LENGTH	regex.c	1802;"	d	language:C	file:
CHAR_SET_SIZE	regex.c	172;"	d	language:C	file:
CHECK_FLAG	zebra.h	514;"	d	language:C++
CHECK_SIZE	stream.c	77;"	d	language:C	file:
CLEAR_STR	command.h	457;"	d	language:C++
CMD_ARGC_MAX	command.h	184;"	d	language:C++
CMD_ATTR_DEPRECATED	command.h	/^  CMD_ATTR_DEPRECATED = 1,$/;"	e	language:C++	enum:__anon29
CMD_ATTR_HIDDEN	command.h	/^  CMD_ATTR_HIDDEN,$/;"	e	language:C++	enum:__anon29
CMD_COMPLETE_FULL_MATCH	command.h	178;"	d	language:C++
CMD_COMPLETE_LIST_MATCH	command.h	180;"	d	language:C++
CMD_COMPLETE_MATCH	command.h	179;"	d	language:C++
CMD_ERR_AMBIGUOUS	command.h	174;"	d	language:C++
CMD_ERR_EXEED_ARGC_MAX	command.h	176;"	d	language:C++
CMD_ERR_INCOMPLETE	command.h	175;"	d	language:C++
CMD_ERR_NOTHING_TODO	command.h	177;"	d	language:C++
CMD_ERR_NO_MATCH	command.h	173;"	d	language:C++
CMD_IPV4	command.h	446;"	d	language:C++
CMD_IPV4_PREFIX	command.h	447;"	d	language:C++
CMD_IPV6	command.h	448;"	d	language:C++
CMD_IPV6_PREFIX	command.h	449;"	d	language:C++
CMD_OPTION	command.h	441;"	d	language:C++
CMD_RANGE	command.h	444;"	d	language:C++
CMD_SUCCESS	command.h	171;"	d	language:C++
CMD_SUCCESS_DAEMON	command.h	181;"	d	language:C++
CMD_VARARG	command.h	443;"	d	language:C++
CMD_VARIABLE	command.h	442;"	d	language:C++
CMD_WARNING	command.h	172;"	d	language:C++
CMSG_LEN	zebra.h	303;"	d	language:C++
CMSG_SPACE	zebra.h	296;"	d	language:C++
COMMUNITY_LIST_NODE	command.h	/^  COMMUNITY_LIST_NODE,		\/* Community list node. *\/$/;"	e	language:C++	enum:node_type
COMPILE_STACK_EMPTY	regex.c	1755;"	d	language:C	file:
COMPILE_STACK_FULL	regex.c	1756;"	d	language:C	file:
COMPILE_STACK_TOP	regex.c	1759;"	d	language:C	file:
CONFIGFILE_MASK	config.h	14;"	d	language:C++
CONFIG_NODE	command.h	/^  CONFIG_NODE,			\/* Config node. Default mode of config file. *\/$/;"	e	language:C++	enum:node_type
CONF_BACKUP_EXT	command.h	487;"	d	language:C++
CONNECTED_ID	if.h	197;"	d	language:C++
CONNECTED_PEER	if.h	189;"	d	language:C++
CONNECTED_PREFIX	if.h	192;"	d	language:C++
CONSUMED_TIME_CHECK	config.h	17;"	d	language:C++
CONTROL	vty.c	1301;"	d	language:C	file:
CRASHLOG_PREFIX	log.c	329;"	d	language:C	file:
CRASHLOG_PREFIX	log.c	355;"	d	language:C	file:
CRASHLOG_SUFFIX	log.c	330;"	d	language:C	file:
CRASHLOG_SUFFIX	log.c	354;"	d	language:C	file:
C_ALLOCA	regex.c	1120;"	d	language:C	file:
DAEMON_VTY_DIR	config.h	20;"	d	language:C++
DATA_SIZE	pqueue.c	39;"	d	language:C	file:
DEBUG_NODE	command.h	/^  DEBUG_NODE,			\/* Debug node. *\/$/;"	e	language:C++	enum:node_type
DEBUG_POP	regex.c	1292;"	d	language:C	file:
DEBUG_POP	regex.c	1295;"	d	language:C	file:
DEBUG_PRINT1	regex.c	625;"	d	language:C	file:
DEBUG_PRINT1	regex.c	972;"	d	language:C	file:
DEBUG_PRINT2	regex.c	626;"	d	language:C	file:
DEBUG_PRINT2	regex.c	973;"	d	language:C	file:
DEBUG_PRINT3	regex.c	627;"	d	language:C	file:
DEBUG_PRINT3	regex.c	974;"	d	language:C	file:
DEBUG_PRINT4	regex.c	628;"	d	language:C	file:
DEBUG_PRINT4	regex.c	975;"	d	language:C	file:
DEBUG_PRINT_COMPILED_PATTERN	regex.c	629;"	d	language:C	file:
DEBUG_PRINT_COMPILED_PATTERN	regex.c	976;"	d	language:C	file:
DEBUG_PRINT_DOUBLE_STRING	regex.c	631;"	d	language:C	file:
DEBUG_PRINT_DOUBLE_STRING	regex.c	977;"	d	language:C	file:
DEBUG_PUSH	regex.c	1291;"	d	language:C	file:
DEBUG_PUSH	regex.c	1294;"	d	language:C	file:
DEBUG_STATEMENT	regex.c	624;"	d	language:C	file:
DEBUG_STATEMENT	regex.c	971;"	d	language:C	file:
DEBUG_STR	command.h	462;"	d	language:C++
DECIMAL_STRLEN_MAX	command.c	1110;"	d	language:C	file:
DEFSH	command.h	395;"	d	language:C++
DEFUN	command.h	374;"	d	language:C++
DEFUNSH	command.h	399;"	d	language:C++
DEFUNSH_ATTR	command.h	405;"	d	language:C++
DEFUNSH_DEPRECATED	command.h	413;"	d	language:C++
DEFUNSH_HIDDEN	command.h	410;"	d	language:C++
DEFUN_ATTR	command.h	379;"	d	language:C++
DEFUN_CMD_ELEMENT	command.h	190;"	d	language:C++
DEFUN_CMD_FUNC_DECL	command.h	200;"	d	language:C++
DEFUN_CMD_FUNC_TEXT	command.h	203;"	d	language:C++
DEFUN_DEPRECATED	command.h	387;"	d	language:C++
DEFUN_HIDDEN	command.h	384;"	d	language:C++
DEFUN_NOSH	command.h	391;"	d	language:C++
DESC_ENTRY	log.c	869;"	d	language:C	file:
DESC_ENTRY	log.c	895;"	d	language:C	file:
DESC_ENTRY	route_types.h	255;"	d	language:C++
DESC_ENTRY	route_types.h	272;"	d	language:C++
DIRECTORY_SEP	vty.h	138;"	d	language:C++
DISABLE_BGP_ANNOUNCE	config.h	23;"	d	language:C++
DISTRIBUTE_IN	distribute.h	/^  DISTRIBUTE_IN,$/;"	e	language:C++	enum:distribute_type
DISTRIBUTE_MAX	distribute.h	/^  DISTRIBUTE_MAX$/;"	e	language:C++	enum:distribute_type
DISTRIBUTE_OUT	distribute.h	/^  DISTRIBUTE_OUT,$/;"	e	language:C++	enum:distribute_type
DOUBLE_FAIL_STACK	regex.c	1241;"	d	language:C	file:
DUMP	log.c	403;"	d	language:C	file:
DUMP	log.c	420;"	d	language:C	file:
DUMP	log.c	444;"	d	language:C	file:
DUMP	log.c	461;"	d	language:C	file:
DUMP	log.c	485;"	d	language:C	file:
DUMP	log.c	549;"	d	language:C	file:
DUMP_NODE	command.h	/^  DUMP_NODE,			\/* Packet dump node. *\/$/;"	e	language:C++	enum:node_type
ELIDE_CODE	getopt.c	61;"	d	language:C	file:
ELIDE_CODE	getopt1.c	52;"	d	language:C	file:
ENABLE_NODE	command.h	/^  ENABLE_NODE,			\/* Enable node. *\/$/;"	e	language:C++	enum:node_type
ENDP_VALID	stream.c	36;"	d	language:C	file:
ERRNO_IO_RETRY	network.h	37;"	d	language:C++
EVER_MATCHED_SOMETHING	regex.c	1531;"	d	language:C	file:
EXPORT_MAP	Makefile	/^EXPORT_MAP := rte_zebra_version.map$/;"	m	language:Make
EXTEND_BUFFER	regex.c	1692;"	d	language:C	file:
EXTRACT_NUMBER	regex.c	554;"	d	language:C	file:
EXTRACT_NUMBER	regex.c	573;"	d	language:C	file:
EXTRACT_NUMBER	regex.c	574;"	d	language:C	file:
EXTRACT_NUMBER_AND_INCR	regex.c	582;"	d	language:C	file:
EXTRACT_NUMBER_AND_INCR	regex.c	601;"	d	language:C	file:
EXTRACT_NUMBER_AND_INCR	regex.c	602;"	d	language:C	file:
F	md5.c	47;"	d	language:C	file:
FAIL_STACK_EMPTY	regex.c	1202;"	d	language:C	file:
FAIL_STACK_FULL	regex.c	1204;"	d	language:C	file:
FAIL_STACK_PTR_EMPTY	regex.c	1203;"	d	language:C	file:
FIFO_ADD	zebra.h	539;"	d	language:C++
FIFO_DEL	zebra.h	548;"	d	language:C++
FIFO_EMPTY	zebra.h	559;"	d	language:C++
FIFO_HEAD	zebra.h	555;"	d	language:C++
FIFO_INIT	zebra.h	533;"	d	language:C++
FIFO_TOP	zebra.h	562;"	d	language:C++
FILTER_DENY	filter.h	/^  FILTER_DENY,$/;"	e	language:C++	enum:filter_type
FILTER_DYNAMIC	filter.h	/^  FILTER_DYNAMIC$/;"	e	language:C++	enum:filter_type
FILTER_IN	zebra.h	497;"	d	language:C++
FILTER_MAX	zebra.h	499;"	d	language:C++
FILTER_OUT	zebra.h	498;"	d	language:C++
FILTER_PERMIT	filter.h	/^  FILTER_PERMIT,$/;"	e	language:C++	enum:filter_type
FILTER_RELAXED	command.c	/^  FILTER_RELAXED,$/;"	e	language:C	enum:filter_type	file:
FILTER_STRICT	command.c	/^  FILTER_STRICT$/;"	e	language:C	enum:filter_type	file:
FIRST_STRING_P	regex.c	362;"	d	language:C	file:
FLETCHER_CHECKSUM_VALIDATE	checksum.h	2;"	d	language:C++
FORWARDING_NODE	command.h	/^  FORWARDING_NODE,		\/* IP forwarding node. *\/$/;"	e	language:C++	enum:node_type
FREE_STACK_RETURN	regex.c	1884;"	d	language:C	file:
FREE_VAR	regex.c	3759;"	d	language:C	file:
FREE_VARIABLES	regex.c	3760;"	d	language:C	file:
G	md5.c	48;"	d	language:C	file:
GETOPT_INTERFACE_VERSION	getopt.c	57;"	d	language:C	file:
GETOPT_INTERFACE_VERSION	getopt1.c	48;"	d	language:C	file:
GETP_VALID	stream.c	33;"	d	language:C	file:
GETRUSAGE	thread.h	36;"	d	language:C++
GET_BUFFER_SPACE	regex.c	1620;"	d	language:C	file:
GET_LONG_RANGE	keychain.c	384;"	d	language:C	file:
GET_LONG_RANGE	keychain.c	452;"	d	language:C	file:
GET_UNSIGNED_NUMBER	regex.c	1769;"	d	language:C	file:
GIT_INFO	version.h	35;"	d	language:C++
GIT_SUFFIX	version.h	32;"	d	language:C++
GNU_LINUX	config.h	29;"	d	language:C++
H	md5.c	49;"	d	language:C	file:
HASH_INITIAL_SIZE	hash.h	25;"	d	language:C++
HASH_THRESHOLD	hash.h	26;"	d	language:C++
HAVE_ALARM	config.h	32;"	d	language:C++
HAVE_ARPA_INET_H	config.h	35;"	d	language:C++
HAVE_ASM_TYPES_H	config.h	38;"	d	language:C++
HAVE_CHILD	pqueue.c	43;"	d	language:C	file:
HAVE_CHOWN	config.h	56;"	d	language:C++
HAVE_CLOCK_MONOTONIC	config.h	59;"	d	language:C++
HAVE_DAEMON	config.h	62;"	d	language:C++
HAVE_DECL_TCP_MD5SIG	config.h	66;"	d	language:C++
HAVE_DLFCN_H	config.h	69;"	d	language:C++
HAVE_DUP2	config.h	75;"	d	language:C++
HAVE_FCNTL	config.h	78;"	d	language:C++
HAVE_FCNTL_H	config.h	81;"	d	language:C++
HAVE_FNMATCH	config.h	84;"	d	language:C++
HAVE_FORK	config.h	87;"	d	language:C++
HAVE_FTRUNCATE	config.h	93;"	d	language:C++
HAVE_GETADDRINFO	config.h	96;"	d	language:C++
HAVE_GETCWD	config.h	99;"	d	language:C++
HAVE_GETHOSTBYNAME	config.h	102;"	d	language:C++
HAVE_GETIFADDRS	config.h	105;"	d	language:C++
HAVE_GETPAGESIZE	config.h	108;"	d	language:C++
HAVE_GETTIMEOFDAY	config.h	111;"	d	language:C++
HAVE_GLIBC_BACKTRACE	config.h	114;"	d	language:C++
HAVE_GNU_REGEX	config.h	117;"	d	language:C++
HAVE_IF_INDEXTONAME	config.h	120;"	d	language:C++
HAVE_IF_NAMETOINDEX	config.h	123;"	d	language:C++
HAVE_INET_ATON	config.h	126;"	d	language:C++
HAVE_INET_NTOA	config.h	132;"	d	language:C++
HAVE_INET_NTOP	config.h	135;"	d	language:C++
HAVE_INET_PTON	config.h	138;"	d	language:C++
HAVE_INTTYPES_H	config.h	141;"	d	language:C++
HAVE_IPV6	config.h	144;"	d	language:C++
HAVE_IP_HDRINCL_BSD_ORDER	zebra.h	353;"	d	language:C++
HAVE_IP_PKTINFO	config.h	147;"	d	language:C++
HAVE_IRDP	config.h	156;"	d	language:C++
HAVE_LIBCRYPT	config.h	165;"	d	language:C++
HAVE_LIBM	config.h	168;"	d	language:C++
HAVE_LIMITS_H	config.h	189;"	d	language:C++
HAVE_LINUX_VERSION_H	config.h	192;"	d	language:C++
HAVE_MALLINFO	config.h	195;"	d	language:C++
HAVE_MEMCHR	config.h	198;"	d	language:C++
HAVE_MEMMOVE	config.h	201;"	d	language:C++
HAVE_MEMORY_H	config.h	204;"	d	language:C++
HAVE_MEMSET	config.h	207;"	d	language:C++
HAVE_NETDB_H	config.h	210;"	d	language:C++
HAVE_NETINET_ICMP6_H	config.h	222;"	d	language:C++
HAVE_NETINET_IN_H	config.h	228;"	d	language:C++
HAVE_NETINET_IN_SYSTM_H	config.h	231;"	d	language:C++
HAVE_NETINET_IP_ICMP_H	config.h	237;"	d	language:C++
HAVE_NETLINK	config.h	240;"	d	language:C++
HAVE_NET_IF_H	config.h	246;"	d	language:C++
HAVE_NET_ROUTE_H	config.h	255;"	d	language:C++
HAVE_OPAQUE_LSA	config.h	261;"	d	language:C++
HAVE_OSPF_TE	config.h	267;"	d	language:C++
HAVE_POW	config.h	273;"	d	language:C++
HAVE_PR_SET_KEEPCAPS	config.h	282;"	d	language:C++
HAVE_RFC3678	config.h	285;"	d	language:C++
HAVE_RTADV	config.h	288;"	d	language:C++
HAVE_RUSAGE	config.h	291;"	d	language:C++
HAVE_SELECT	config.h	294;"	d	language:C++
HAVE_SIGNAL_H	config.h	300;"	d	language:C++
HAVE_SNPRINTF	config.h	306;"	d	language:C++
HAVE_SOCKET	config.h	309;"	d	language:C++
HAVE_SOCKLEN_T	config.h	312;"	d	language:C++
HAVE_STACK_TRACE	config.h	318;"	d	language:C++
HAVE_STDDEF_H	config.h	325;"	d	language:C++
HAVE_STDINT_H	config.h	328;"	d	language:C++
HAVE_STDLIB_H	config.h	331;"	d	language:C++
HAVE_STRCASECMP	config.h	334;"	d	language:C++
HAVE_STRCHR	config.h	337;"	d	language:C++
HAVE_STRCSPN	config.h	340;"	d	language:C++
HAVE_STRDUP	config.h	343;"	d	language:C++
HAVE_STRERROR	config.h	346;"	d	language:C++
HAVE_STRFTIME	config.h	349;"	d	language:C++
HAVE_STRINGS_H	config.h	352;"	d	language:C++
HAVE_STRING_H	config.h	355;"	d	language:C++
HAVE_STRNCASECMP	config.h	364;"	d	language:C++
HAVE_STRNDUP	config.h	367;"	d	language:C++
HAVE_STRNLEN	config.h	370;"	d	language:C++
HAVE_STROPTS_H	config.h	373;"	d	language:C++
HAVE_STRRCHR	config.h	376;"	d	language:C++
HAVE_STRSPN	config.h	379;"	d	language:C++
HAVE_STRSTR	config.h	382;"	d	language:C++
HAVE_STRTOL	config.h	385;"	d	language:C++
HAVE_STRTOUL	config.h	388;"	d	language:C++
HAVE_STRUCT_ICMPHDR	config.h	391;"	d	language:C++
HAVE_STRUCT_IN_PKTINFO	config.h	415;"	d	language:C++
HAVE_STRUCT_IP_MREQN_IMR_IFINDEX	config.h	418;"	d	language:C++
HAVE_STRUCT_ND_OPT_ADV_INTERVAL	config.h	424;"	d	language:C++
HAVE_STRUCT_SOCKADDR	config.h	443;"	d	language:C++
HAVE_STRUCT_SOCKADDR_IN	config.h	452;"	d	language:C++
HAVE_STRUCT_SOCKADDR_IN6	config.h	455;"	d	language:C++
HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID	config.h	458;"	d	language:C++
HAVE_STRUCT_SOCKADDR_UN	config.h	467;"	d	language:C++
HAVE_SYSLOG_H	config.h	476;"	d	language:C++
HAVE_SYS_CDEFS_H	config.h	482;"	d	language:C++
HAVE_SYS_IOCTL_H	config.h	488;"	d	language:C++
HAVE_SYS_PARAM_H	config.h	494;"	d	language:C++
HAVE_SYS_SELECT_H	config.h	497;"	d	language:C++
HAVE_SYS_SOCKET_H	config.h	500;"	d	language:C++
HAVE_SYS_STAT_H	config.h	506;"	d	language:C++
HAVE_SYS_SYSCTL_H	config.h	509;"	d	language:C++
HAVE_SYS_TIMES_H	config.h	512;"	d	language:C++
HAVE_SYS_TIME_H	config.h	515;"	d	language:C++
HAVE_SYS_TYPES_H	config.h	518;"	d	language:C++
HAVE_SYS_UN_H	config.h	521;"	d	language:C++
HAVE_SYS_WAIT_H	config.h	524;"	d	language:C++
HAVE_SYS_WEAK_ALIAS	config.h	527;"	d	language:C++
HAVE_SYS_WEAK_ALIAS_ATTRIBUTE	config.h	530;"	d	language:C++
HAVE_SYS_WEAK_ALIAS_CROSSFILE	config.h	536;"	d	language:C++
HAVE_SYS_WEAK_ALIAS_PRAGMA	config.h	543;"	d	language:C++
HAVE_TIME_H	config.h	552;"	d	language:C++
HAVE_UCONTEXT_H	config.h	555;"	d	language:C++
HAVE_UCONTEXT_T_UC_MCONTEXT_GREGS	config.h	558;"	d	language:C++
HAVE_UNAME	config.h	570;"	d	language:C++
HAVE_UNISTD_H	config.h	573;"	d	language:C++
HAVE_VFORK	config.h	576;"	d	language:C++
HAVE_VPRINTF	config.h	585;"	d	language:C++
HAVE_VSNPRINTF	config.h	588;"	d	language:C++
HAVE_WCHAR_H	config.h	591;"	d	language:C++
HAVE_WCTYPE_H	config.h	594;"	d	language:C++
HAVE_WORKING_FORK	config.h	597;"	d	language:C++
HAVE_WORKING_VFORK	config.h	600;"	d	language:C++
I	md5.c	50;"	d	language:C	file:
IFF_IPV4	if.h	233;"	d	language:C++
IFF_IPV6	if.h	236;"	d	language:C++
IFF_LINK0	if.h	218;"	d	language:C++
IFF_LINK1	if.h	221;"	d	language:C++
IFF_LINK2	if.h	224;"	d	language:C++
IFF_NORTEXCH	if.h	230;"	d	language:C++
IFF_NOTRAILERS	if.h	209;"	d	language:C++
IFF_NOXMIT	if.h	227;"	d	language:C++
IFF_OACTIVE	if.h	212;"	d	language:C++
IFF_OUT_LOG	if.c	410;"	d	language:C	file:
IFF_OUT_LOG	if.c	446;"	d	language:C	file:
IFF_SIMPLEX	if.h	215;"	d	language:C++
IFF_VIRTUAL	if.h	239;"	d	language:C++
IFINDEX_INTERNAL	if.h	86;"	d	language:C++
IFNAME_STR	command.h	474;"	d	language:C++
IF_DELETE_HOOK	if.h	203;"	d	language:C++
IF_NEW_HOOK	if.h	202;"	d	language:C++
IF_RMAP_IN	if_rmap.h	/^  IF_RMAP_IN,$/;"	e	language:C++	enum:if_rmap_type
IF_RMAP_MAX	if_rmap.h	/^  IF_RMAP_MAX$/;"	e	language:C++	enum:if_rmap_type
IF_RMAP_OUT	if_rmap.h	/^  IF_RMAP_OUT,$/;"	e	language:C++	enum:if_rmap_type
IN6_ARE_ADDR_EQUAL	zebra.h	385;"	d	language:C++
IN6_LINKLOCAL_IFINDEX	sockunion.h	70;"	d	language:C++
IN6_LINKLOCAL_IFINDEX	sockunion.h	77;"	d	language:C++
INADDR_LOOPBACK	zebra.h	481;"	d	language:C++
INCS	Makefile	/^INCS := $(wildcard $(LIB_ZEBRA_SRC)\/*.h)$/;"	m	language:Make
INET6_ADDRSTRLEN	prefix.h	125;"	d	language:C++
INET6_BUFSIZ	prefix.h	129;"	d	language:C++
INET_ADDRSTRLEN	prefix.h	121;"	d	language:C++
INHIBIT_STRING_HEADER	regex.c	128;"	d	language:C	file:
INIT_BUF_SIZE	regex.c	1617;"	d	language:C	file:
INIT_COMPILE_STACK_SIZE	regex.c	1753;"	d	language:C	file:
INIT_FAILURE_ALLOC	regex.c	1142;"	d	language:C	file:
INIT_FAIL_STACK	regex.c	1211;"	d	language:C	file:
INIT_FAIL_STACK	regex.c	1225;"	d	language:C	file:
INIT_MATCHVEC_SIZE	command.c	2096;"	d	language:C	file:
INIT_MATCHVEC_SIZE	command.c	2338;"	d	language:C	file:
INSERT_JUMP	regex.c	1661;"	d	language:C	file:
INSERT_JUMP2	regex.c	1665;"	d	language:C	file:
INT16_MAX	zebra.h	229;"	d	language:C++
INT32_MAX	zebra.h	232;"	d	language:C++
INT8_MAX	zebra.h	226;"	d	language:C++
INTEGRATE_DEFAULT_CONFIG	vty.h	125;"	d	language:C++
INTERFACE_HWADDR_MAX	if.h	37;"	d	language:C++
INTERFACE_NAMSIZ	if.h	36;"	d	language:C++
INTERFACE_NODE	command.h	/^  INTERFACE_NODE,		\/* Interface mode node. *\/$/;"	e	language:C++	enum:node_type
INTERFACE_STR	command.h	473;"	d	language:C++
IN_ADDR_SIZE	smux.h	40;"	d	language:C++
IN_STR	command.h	470;"	d	language:C++
IP6_STR	command.h	475;"	d	language:C++
IPPROTO_OSPFIGP	libospf.h	33;"	d	language:C++
IPTOS_PREC_INTERNETCONTROL	libospf.h	28;"	d	language:C++
IPV4_ADDR_CMP	prefix.h	136;"	d	language:C++
IPV4_ADDR_COPY	prefix.h	138;"	d	language:C++
IPV4_ADDR_SAME	prefix.h	137;"	d	language:C++
IPV4_CLASS_DE	prefix.h	143;"	d	language:C++
IPV4_LINKLOCAL	prefix.h	142;"	d	language:C++
IPV4_MAX_BITLEN	prefix.h	134;"	d	language:C++
IPV4_MAX_BYTELEN	prefix.h	133;"	d	language:C++
IPV4_MAX_PREFIXLEN	prefix.h	135;"	d	language:C++
IPV4_NET0	prefix.h	140;"	d	language:C++
IPV4_NET127	prefix.h	141;"	d	language:C++
IPV6_ADDR_CMP	prefix.h	149;"	d	language:C++
IPV6_ADDR_COPY	prefix.h	151;"	d	language:C++
IPV6_ADDR_SAME	prefix.h	150;"	d	language:C++
IPV6_ADDR_STR	command.c	936;"	d	language:C	file:
IPV6_MAX_BITLEN	prefix.h	147;"	d	language:C++
IPV6_MAX_BYTELEN	prefix.h	146;"	d	language:C++
IPV6_MAX_PREFIXLEN	prefix.h	148;"	d	language:C++
IPV6_PREFIX_STR	command.c	937;"	d	language:C	file:
IPV6_STR	command.h	454;"	d	language:C++
IP_NODE	command.h	/^  IP_NODE,			\/* Static ip route node. *\/$/;"	e	language:C++	enum:node_type
IP_STR	command.h	453;"	d	language:C++
IRDP_NODE	command.h	/^  IRDP_NODE,			\/* ICMP Router Discovery Protocol mode. *\/ $/;"	e	language:C++	enum:node_type
ISALNUM	regex.c	252;"	d	language:C	file:
ISALPHA	regex.c	253;"	d	language:C	file:
ISASCII	regex.c	231;"	d	language:C	file:
ISASCII	regex.c	233;"	d	language:C	file:
ISASCII	regex.c	235;"	d	language:C	file:
ISBLANK	regex.c	239;"	d	language:C	file:
ISBLANK	regex.c	241;"	d	language:C	file:
ISCNTRL	regex.c	254;"	d	language:C	file:
ISDIGIT	regex.c	251;"	d	language:C	file:
ISGRAPH	regex.c	244;"	d	language:C	file:
ISGRAPH	regex.c	246;"	d	language:C	file:
ISIS_METHOD	config.h	603;"	d	language:C++
ISIS_METHOD_BPF	config.h	606;"	d	language:C++
ISIS_METHOD_DLPI	config.h	609;"	d	language:C++
ISIS_METHOD_PFPACKET	config.h	612;"	d	language:C++
ISIS_NODE	command.h	/^  ISIS_NODE,			\/* ISIS protocol mode *\/$/;"	e	language:C++	enum:node_type
ISIS_STR	command.h	484;"	d	language:C++
ISIS_VTYSH_PATH	config.h	615;"	d	language:C++
ISLOWER	regex.c	255;"	d	language:C	file:
ISPRINT	regex.c	249;"	d	language:C	file:
ISPRINT	regex.c	250;"	d	language:C	file:
ISPUNCT	regex.c	256;"	d	language:C	file:
ISSPACE	regex.c	257;"	d	language:C	file:
ISUPPER	regex.c	258;"	d	language:C	file:
ISXDIGIT	regex.c	259;"	d	language:C	file:
IS_ACTIVE	regex.c	1529;"	d	language:C	file:
IS_CHAR_CLASS	regex.c	1797;"	d	language:C	file:
IS_CHAR_CLASS	regex.c	1799;"	d	language:C	file:
IS_CHAR_CLASS	regex.c	1804;"	d	language:C	file:
IS_DIRECTORY_SEP	vty.h	142;"	d	language:C++
JHASH_GOLDEN_RATIO	jhash.c	24;"	d	language:C	file:
KEYCHAIN_KEY_NODE	command.h	/^  KEYCHAIN_KEY_NODE,		\/* Key-chain key node. *\/$/;"	e	language:C++	enum:node_type
KEYCHAIN_NODE	command.h	/^  KEYCHAIN_NODE,		\/* Key-chain node. *\/$/;"	e	language:C++	enum:node_type
LEFT_OF	pqueue.c	41;"	d	language:C	file:
LIB	Makefile	/^LIB = librte_zebra.a$/;"	m	language:Make
LIBABIVER	Makefile	/^LIBABIVER := 1$/;"	m	language:Make
LIB_ZEBRA_SRC	Makefile	/^LIB_ZEBRA_SRC = $(RTE_SDK)\/..\/cmdline\/libzebra$/;"	m	language:Make
LINUX_IPV6	config.h	621;"	d	language:C++
LISTNODE_ADD	linklist.h	142;"	d	language:C++
LISTNODE_ATTACH	linklist.h	113;"	d	language:C++
LISTNODE_DELETE	linklist.h	143;"	d	language:C++
LISTNODE_DETACH	linklist.h	126;"	d	language:C++
LIST_EMPTY	queue.h	381;"	d	language:C++
LIST_ENTRY	queue.h	346;"	d	language:C++
LIST_FIRST	queue.h	383;"	d	language:C++
LIST_FOREACH	queue.h	385;"	d	language:C++
LIST_FOREACH_SAFE	queue.h	390;"	d	language:C++
LIST_HEAD	queue.h	338;"	d	language:C++
LIST_HEAD_INITIALIZER	queue.h	343;"	d	language:C++
LIST_INIT	queue.h	395;"	d	language:C++
LIST_INSERT_AFTER	queue.h	399;"	d	language:C++
LIST_INSERT_BEFORE	queue.h	408;"	d	language:C++
LIST_INSERT_HEAD	queue.h	416;"	d	language:C++
LIST_LOOP	linklist.h	146;"	d	language:C++
LIST_NEXT	queue.h	424;"	d	language:C++
LIST_REMOVE	queue.h	426;"	d	language:C++
LIST_SWAP	queue.h	439;"	d	language:C++
LITTLE_ENDIAN	zebra.h	362;"	d	language:C++
LOC	log.c	307;"	d	language:C	file:
LOC	log.c	323;"	d	language:C	file:
LOC	log.c	342;"	d	language:C	file:
LOC	log.c	347;"	d	language:C	file:
LOC	log.c	370;"	d	language:C	file:
LOC	log.c	464;"	d	language:C	file:
LOC	log.c	478;"	d	language:C	file:
LOC	log.c	550;"	d	language:C	file:
LOGFILE_MASK	config.h	624;"	d	language:C++
LOG_FACILITIES	log.h	214;"	d	language:C++
LOG_FACILITY_DESC	log.h	216;"	d	language:C++
LOG_LEVELS	log.h	202;"	d	language:C++
LOG_LEVEL_DESC	log.h	204;"	d	language:C++
LOOKUP	log.h	154;"	d	language:C++
LOOKUP_DEF	log.h	153;"	d	language:C++
LSTAT_FOLLOWS_SLASHED_SYMLINK	config.h	628;"	d	language:C++
LT_OBJDIR	config.h	632;"	d	language:C++
MASC_NODE	command.h	/^  MASC_NODE,			\/* MASC for multicast.  *\/$/;"	e	language:C++	enum:node_type
MASKBIT	prefix.c	173;"	d	language:C	file:
MATCHED_SOMETHING	regex.c	1530;"	d	language:C	file:
MATCHER_AMBIGUOUS	command.c	/^  MATCHER_AMBIGUOUS,$/;"	e	language:C	enum:matcher_rv	file:
MATCHER_COMPLETE	command.c	/^  MATCHER_COMPLETE,$/;"	e	language:C	enum:matcher_rv	file:
MATCHER_ERROR	command.c	59;"	d	language:C	file:
MATCHER_EXCEED_ARGC_MAX	command.c	/^  MATCHER_EXCEED_ARGC_MAX$/;"	e	language:C	enum:matcher_rv	file:
MATCHER_INCOMPLETE	command.c	/^  MATCHER_INCOMPLETE,$/;"	e	language:C	enum:matcher_rv	file:
MATCHER_NO_MATCH	command.c	/^  MATCHER_NO_MATCH,$/;"	e	language:C	enum:matcher_rv	file:
MATCHER_OK	command.c	/^  MATCHER_OK,$/;"	e	language:C	enum:matcher_rv	file:
MATCHING_IN_FIRST_STRING	regex.c	3717;"	d	language:C	file:
MATCH_FAILED	smux.h	29;"	d	language:C++
MATCH_MAY_ALLOCATE	regex.c	1115;"	d	language:C	file:
MATCH_MAY_ALLOCATE	regex.c	1129;"	d	language:C	file:
MATCH_NULL_UNSET_VALUE	regex.c	1520;"	d	language:C	file:
MATCH_STR	command.h	467;"	d	language:C++
MATCH_SUCCEEDED	smux.h	30;"	d	language:C++
MAX	regex.c	376;"	d	language:C	file:
MAX	regex.c	378;"	d	language:C	file:
MAX	zebra.h	375;"	d	language:C++
MAX_BUF_SIZE	regex.c	1681;"	d	language:C	file:
MAX_BUF_SIZE	regex.c	1684;"	d	language:C	file:
MAX_CHUNKS	buffer.c	400;"	d	language:C	file:
MAX_CHUNKS	buffer.c	458;"	d	language:C	file:
MAX_FAILURE_ITEMS	regex.c	1402;"	d	language:C	file:
MAX_FLUSH	buffer.c	404;"	d	language:C	file:
MAX_FLUSH	buffer.c	459;"	d	language:C	file:
MAX_REGNUM	regex.c	1721;"	d	language:C	file:
MBGP_STR	command.h	466;"	d	language:C++
MD5Final	md5.h	79;"	d	language:C++
MD5Init	md5.h	77;"	d	language:C++
MD5Update	md5.h	78;"	d	language:C++
MD5_A0	md5.c	96;"	d	language:C	file:
MD5_B0	md5.c	97;"	d	language:C	file:
MD5_BUFLEN	md5.h	45;"	d	language:C++
MD5_C0	md5.c	98;"	d	language:C	file:
MD5_CTX	md5.h	76;"	d	language:C++
MD5_D0	md5.c	99;"	d	language:C	file:
MIN	regex.c	377;"	d	language:C	file:
MIN	regex.c	379;"	d	language:C	file:
MIN	zebra.h	378;"	d	language:C++
MODX	checksum.c	50;"	d	language:C	file:
MTYPE_ACCESS_FILTER	memtypes.h	/^  MTYPE_ACCESS_FILTER,$/;"	e	language:C++	enum:__anon40
MTYPE_ACCESS_LIST	memtypes.h	/^  MTYPE_ACCESS_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_ACCESS_LIST_STR	memtypes.h	/^  MTYPE_ACCESS_LIST_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_FILTER	memtypes.h	/^  MTYPE_AS_FILTER,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_FILTER_STR	memtypes.h	/^  MTYPE_AS_FILTER_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_LIST	memtypes.h	/^  MTYPE_AS_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_PATH	memtypes.h	/^  MTYPE_AS_PATH,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_SEG	memtypes.h	/^  MTYPE_AS_SEG,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_SEG_DATA	memtypes.h	/^  MTYPE_AS_SEG_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_AS_STR	memtypes.h	/^  MTYPE_AS_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_ATTR	memtypes.h	/^  MTYPE_ATTR,$/;"	e	language:C++	enum:__anon40
MTYPE_ATTR_EXTRA	memtypes.h	/^  MTYPE_ATTR_EXTRA,$/;"	e	language:C++	enum:__anon40
MTYPE_BABEL	memtypes.h	/^  MTYPE_BABEL,$/;"	e	language:C++	enum:__anon40
MTYPE_BABEL_IF	memtypes.h	/^  MTYPE_BABEL_IF,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP	memtypes.h	/^  MTYPE_BGP,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ADDR	memtypes.h	/^  MTYPE_BGP_ADDR,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ADJ_IN	memtypes.h	/^  MTYPE_BGP_ADJ_IN,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ADJ_OUT	memtypes.h	/^  MTYPE_BGP_ADJ_OUT,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ADVERTISE	memtypes.h	/^  MTYPE_BGP_ADVERTISE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ADVERTISE_ATTR	memtypes.h	/^  MTYPE_BGP_ADVERTISE_ATTR,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_AGGREGATE	memtypes.h	/^  MTYPE_BGP_AGGREGATE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_CLEAR_NODE_QUEUE	memtypes.h	/^  MTYPE_BGP_CLEAR_NODE_QUEUE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_CONFED_LIST	memtypes.h	/^  MTYPE_BGP_CONFED_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_CONN	memtypes.h	/^  MTYPE_BGP_CONN,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_DAMP_ARRAY	memtypes.h	/^  MTYPE_BGP_DAMP_ARRAY,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_DAMP_INFO	memtypes.h	/^  MTYPE_BGP_DAMP_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_DISTANCE	memtypes.h	/^  MTYPE_BGP_DISTANCE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_LISTENER	memtypes.h	/^  MTYPE_BGP_LISTENER,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_MPATH_INFO	memtypes.h	/^  MTYPE_BGP_MPATH_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_NEXTHOP_CACHE	memtypes.h	/^  MTYPE_BGP_NEXTHOP_CACHE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_NODE	memtypes.h	/^  MTYPE_BGP_NODE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_PEER	memtypes.h	/^  MTYPE_BGP_PEER,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_PEER_HOST	memtypes.h	/^  MTYPE_BGP_PEER_HOST,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_PROCESS_QUEUE	memtypes.h	/^  MTYPE_BGP_PROCESS_QUEUE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_REGEXP	memtypes.h	/^  MTYPE_BGP_REGEXP,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ROUTE	memtypes.h	/^  MTYPE_BGP_ROUTE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_ROUTE_EXTRA	memtypes.h	/^  MTYPE_BGP_ROUTE_EXTRA,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_STATIC	memtypes.h	/^  MTYPE_BGP_STATIC,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_SYNCHRONISE	memtypes.h	/^  MTYPE_BGP_SYNCHRONISE,$/;"	e	language:C++	enum:__anon40
MTYPE_BGP_TABLE	memtypes.h	/^  MTYPE_BGP_TABLE,$/;"	e	language:C++	enum:__anon40
MTYPE_BUFFER	memtypes.h	/^  MTYPE_BUFFER,$/;"	e	language:C++	enum:__anon40
MTYPE_BUFFER_DATA	memtypes.h	/^  MTYPE_BUFFER_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_CLUSTER	memtypes.h	/^  MTYPE_CLUSTER,$/;"	e	language:C++	enum:__anon40
MTYPE_CLUSTER_VAL	memtypes.h	/^  MTYPE_CLUSTER_VAL,$/;"	e	language:C++	enum:__anon40
MTYPE_CMD_TOKENS	memtypes.h	/^  MTYPE_CMD_TOKENS,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY	memtypes.h	/^  MTYPE_COMMUNITY,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_LIST	memtypes.h	/^  MTYPE_COMMUNITY_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_LIST_CONFIG	memtypes.h	/^  MTYPE_COMMUNITY_LIST_CONFIG,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_LIST_ENTRY	memtypes.h	/^  MTYPE_COMMUNITY_LIST_ENTRY,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_LIST_HANDLER	memtypes.h	/^  MTYPE_COMMUNITY_LIST_HANDLER,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_LIST_NAME	memtypes.h	/^  MTYPE_COMMUNITY_LIST_NAME,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_STR	memtypes.h	/^  MTYPE_COMMUNITY_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_COMMUNITY_VAL	memtypes.h	/^  MTYPE_COMMUNITY_VAL,$/;"	e	language:C++	enum:__anon40
MTYPE_CONNECTED	memtypes.h	/^  MTYPE_CONNECTED,$/;"	e	language:C++	enum:__anon40
MTYPE_CONNECTED_LABEL	memtypes.h	/^  MTYPE_CONNECTED_LABEL,$/;"	e	language:C++	enum:__anon40
MTYPE_DISTRIBUTE	memtypes.h	/^  MTYPE_DISTRIBUTE,$/;"	e	language:C++	enum:__anon40
MTYPE_DISTRIBUTE_IFNAME	memtypes.h	/^  MTYPE_DISTRIBUTE_IFNAME,$/;"	e	language:C++	enum:__anon40
MTYPE_ECOMMUNITY	memtypes.h	/^  MTYPE_ECOMMUNITY,$/;"	e	language:C++	enum:__anon40
MTYPE_ECOMMUNITY_STR	memtypes.h	/^  MTYPE_ECOMMUNITY_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_ECOMMUNITY_VAL	memtypes.h	/^  MTYPE_ECOMMUNITY_VAL,$/;"	e	language:C++	enum:__anon40
MTYPE_HASH	memtypes.h	/^  MTYPE_HASH,$/;"	e	language:C++	enum:__anon40
MTYPE_HASH_BACKET	memtypes.h	/^  MTYPE_HASH_BACKET,$/;"	e	language:C++	enum:__anon40
MTYPE_HASH_INDEX	memtypes.h	/^  MTYPE_HASH_INDEX,$/;"	e	language:C++	enum:__anon40
MTYPE_HOST	memtypes.h	/^  MTYPE_HOST,$/;"	e	language:C++	enum:__anon40
MTYPE_IF	memtypes.h	/^  MTYPE_IF,$/;"	e	language:C++	enum:__anon40
MTYPE_IF_RMAP	memtypes.h	/^  MTYPE_IF_RMAP,$/;"	e	language:C++	enum:__anon40
MTYPE_IF_RMAP_NAME	memtypes.h	/^  MTYPE_IF_RMAP_NAME,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS	memtypes.h	/^  MTYPE_ISIS,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_ADJACENCY	memtypes.h	/^  MTYPE_ISIS_ADJACENCY,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_AREA	memtypes.h	/^  MTYPE_ISIS_AREA,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_AREA_ADDR	memtypes.h	/^  MTYPE_ISIS_AREA_ADDR,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_CIRCUIT	memtypes.h	/^  MTYPE_ISIS_CIRCUIT,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_DICT	memtypes.h	/^  MTYPE_ISIS_DICT,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_DICT_NODE	memtypes.h	/^  MTYPE_ISIS_DICT_NODE,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_DYNHN	memtypes.h	/^  MTYPE_ISIS_DYNHN,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_LSP	memtypes.h	/^  MTYPE_ISIS_LSP,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_NEXTHOP	memtypes.h	/^  MTYPE_ISIS_NEXTHOP,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_NEXTHOP6	memtypes.h	/^  MTYPE_ISIS_NEXTHOP6,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_ROUTE_INFO	memtypes.h	/^  MTYPE_ISIS_ROUTE_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_SPFTREE	memtypes.h	/^  MTYPE_ISIS_SPFTREE,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_TLV	memtypes.h	/^  MTYPE_ISIS_TLV,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_TMP	memtypes.h	/^  MTYPE_ISIS_TMP,$/;"	e	language:C++	enum:__anon40
MTYPE_ISIS_VERTEX	memtypes.h	/^  MTYPE_ISIS_VERTEX,$/;"	e	language:C++	enum:__anon40
MTYPE_KEY	memtypes.h	/^  MTYPE_KEY,$/;"	e	language:C++	enum:__anon40
MTYPE_KEYCHAIN	memtypes.h	/^  MTYPE_KEYCHAIN,$/;"	e	language:C++	enum:__anon40
MTYPE_LINK_LIST	memtypes.h	/^  MTYPE_LINK_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_LINK_NODE	memtypes.h	/^  MTYPE_LINK_NODE,$/;"	e	language:C++	enum:__anon40
MTYPE_MAX	memtypes.h	/^  MTYPE_MAX,$/;"	e	language:C++	enum:__anon40
MTYPE_MEMSTR_LEN	memory.h	94;"	d	language:C++
MTYPE_NEXTHOP	memtypes.h	/^  MTYPE_NEXTHOP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_AREA	memtypes.h	/^  MTYPE_OSPF6_AREA,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_EXTERNAL_INFO	memtypes.h	/^  MTYPE_OSPF6_EXTERNAL_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_IF	memtypes.h	/^  MTYPE_OSPF6_IF,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_LSA	memtypes.h	/^  MTYPE_OSPF6_LSA,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_LSA_SUMMARY	memtypes.h	/^  MTYPE_OSPF6_LSA_SUMMARY,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_LSDB	memtypes.h	/^  MTYPE_OSPF6_LSDB,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_MESSAGE	memtypes.h	/^  MTYPE_OSPF6_MESSAGE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_NEIGHBOR	memtypes.h	/^  MTYPE_OSPF6_NEIGHBOR,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_NEXTHOP	memtypes.h	/^  MTYPE_OSPF6_NEXTHOP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_OTHER	memtypes.h	/^  MTYPE_OSPF6_OTHER,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_PREFIX	memtypes.h	/^  MTYPE_OSPF6_PREFIX,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_ROUTE	memtypes.h	/^  MTYPE_OSPF6_ROUTE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_SPFTREE	memtypes.h	/^  MTYPE_OSPF6_SPFTREE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_TOP	memtypes.h	/^  MTYPE_OSPF6_TOP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF6_VERTEX	memtypes.h	/^  MTYPE_OSPF6_VERTEX,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_AREA	memtypes.h	/^  MTYPE_OSPF_AREA,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_AREA_RANGE	memtypes.h	/^  MTYPE_OSPF_AREA_RANGE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_CRYPT_KEY	memtypes.h	/^  MTYPE_OSPF_CRYPT_KEY,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_DISTANCE	memtypes.h	/^  MTYPE_OSPF_DISTANCE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_EXTERNAL_INFO	memtypes.h	/^  MTYPE_OSPF_EXTERNAL_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_FIFO	memtypes.h	/^  MTYPE_OSPF_FIFO,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_IF	memtypes.h	/^  MTYPE_OSPF_IF,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_IF_INFO	memtypes.h	/^  MTYPE_OSPF_IF_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_IF_PARAMS	memtypes.h	/^  MTYPE_OSPF_IF_PARAMS,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_LSA	memtypes.h	/^  MTYPE_OSPF_LSA,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_LSA_DATA	memtypes.h	/^  MTYPE_OSPF_LSA_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_LSDB	memtypes.h	/^  MTYPE_OSPF_LSDB,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_MESSAGE	memtypes.h	/^  MTYPE_OSPF_MESSAGE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_NEIGHBOR	memtypes.h	/^  MTYPE_OSPF_NEIGHBOR,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_NEIGHBOR_STATIC	memtypes.h	/^  MTYPE_OSPF_NEIGHBOR_STATIC,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_NETWORK	memtypes.h	/^  MTYPE_OSPF_NETWORK,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_NEXTHOP	memtypes.h	/^  MTYPE_OSPF_NEXTHOP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_PACKET	memtypes.h	/^  MTYPE_OSPF_PACKET,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_PATH	memtypes.h	/^  MTYPE_OSPF_PATH,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_ROUTE	memtypes.h	/^  MTYPE_OSPF_ROUTE,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_TMP	memtypes.h	/^  MTYPE_OSPF_TMP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_TOP	memtypes.h	/^  MTYPE_OSPF_TOP,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_VERTEX	memtypes.h	/^  MTYPE_OSPF_VERTEX,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_VERTEX_PARENT	memtypes.h	/^  MTYPE_OSPF_VERTEX_PARENT,$/;"	e	language:C++	enum:__anon40
MTYPE_OSPF_VL_DATA	memtypes.h	/^  MTYPE_OSPF_VL_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_PEER_DESC	memtypes.h	/^  MTYPE_PEER_DESC,$/;"	e	language:C++	enum:__anon40
MTYPE_PEER_GROUP	memtypes.h	/^  MTYPE_PEER_GROUP,$/;"	e	language:C++	enum:__anon40
MTYPE_PEER_PASSWORD	memtypes.h	/^  MTYPE_PEER_PASSWORD,$/;"	e	language:C++	enum:__anon40
MTYPE_PEER_UPDATE_SOURCE	memtypes.h	/^  MTYPE_PEER_UPDATE_SOURCE,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_CHANNEL_OIL	memtypes.h	/^  MTYPE_PIM_CHANNEL_OIL,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_IFCHANNEL	memtypes.h	/^  MTYPE_PIM_IFCHANNEL,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_IGMP_GROUP	memtypes.h	/^  MTYPE_PIM_IGMP_GROUP,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_IGMP_GROUP_SOURCE	memtypes.h	/^  MTYPE_PIM_IGMP_GROUP_SOURCE,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_IGMP_JOIN	memtypes.h	/^  MTYPE_PIM_IGMP_JOIN,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_IGMP_SOCKET	memtypes.h	/^  MTYPE_PIM_IGMP_SOCKET,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_INTERFACE	memtypes.h	/^  MTYPE_PIM_INTERFACE,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_NEIGHBOR	memtypes.h	/^  MTYPE_PIM_NEIGHBOR,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_SSMPINGD	memtypes.h	/^  MTYPE_PIM_SSMPINGD,$/;"	e	language:C++	enum:__anon40
MTYPE_PIM_UPSTREAM	memtypes.h	/^  MTYPE_PIM_UPSTREAM,$/;"	e	language:C++	enum:__anon40
MTYPE_PQUEUE	memtypes.h	/^  MTYPE_PQUEUE,$/;"	e	language:C++	enum:__anon40
MTYPE_PQUEUE_DATA	memtypes.h	/^  MTYPE_PQUEUE_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX	memtypes.h	/^  MTYPE_PREFIX,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX_IPV4	memtypes.h	/^  MTYPE_PREFIX_IPV4,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX_IPV6	memtypes.h	/^  MTYPE_PREFIX_IPV6,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX_LIST	memtypes.h	/^  MTYPE_PREFIX_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX_LIST_ENTRY	memtypes.h	/^  MTYPE_PREFIX_LIST_ENTRY,$/;"	e	language:C++	enum:__anon40
MTYPE_PREFIX_LIST_STR	memtypes.h	/^  MTYPE_PREFIX_LIST_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_PRIVS	memtypes.h	/^  MTYPE_PRIVS,$/;"	e	language:C++	enum:__anon40
MTYPE_RIB	memtypes.h	/^  MTYPE_RIB,$/;"	e	language:C++	enum:__anon40
MTYPE_RIB_DEST	memtypes.h	/^  MTYPE_RIB_DEST,$/;"	e	language:C++	enum:__anon40
MTYPE_RIB_QUEUE	memtypes.h	/^  MTYPE_RIB_QUEUE,$/;"	e	language:C++	enum:__anon40
MTYPE_RIB_TABLE_INFO	memtypes.h	/^  MTYPE_RIB_TABLE_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP	memtypes.h	/^  MTYPE_RIP,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG	memtypes.h	/^  MTYPE_RIPNG,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG_AGGREGATE	memtypes.h	/^  MTYPE_RIPNG_AGGREGATE,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG_OFFSET_LIST	memtypes.h	/^  MTYPE_RIPNG_OFFSET_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG_PEER	memtypes.h	/^  MTYPE_RIPNG_PEER,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG_ROUTE	memtypes.h	/^  MTYPE_RIPNG_ROUTE,$/;"	e	language:C++	enum:__anon40
MTYPE_RIPNG_RTE_DATA	memtypes.h	/^  MTYPE_RIPNG_RTE_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP_DISTANCE	memtypes.h	/^  MTYPE_RIP_DISTANCE,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP_INFO	memtypes.h	/^  MTYPE_RIP_INFO,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP_INTERFACE	memtypes.h	/^  MTYPE_RIP_INTERFACE,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP_OFFSET_LIST	memtypes.h	/^  MTYPE_RIP_OFFSET_LIST,$/;"	e	language:C++	enum:__anon40
MTYPE_RIP_PEER	memtypes.h	/^  MTYPE_RIP_PEER,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP	memtypes.h	/^  MTYPE_ROUTE_MAP,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP_COMPILED	memtypes.h	/^  MTYPE_ROUTE_MAP_COMPILED,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP_INDEX	memtypes.h	/^  MTYPE_ROUTE_MAP_INDEX,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP_NAME	memtypes.h	/^  MTYPE_ROUTE_MAP_NAME,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP_RULE	memtypes.h	/^  MTYPE_ROUTE_MAP_RULE,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_MAP_RULE_STR	memtypes.h	/^  MTYPE_ROUTE_MAP_RULE_STR,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_NODE	memtypes.h	/^  MTYPE_ROUTE_NODE,$/;"	e	language:C++	enum:__anon40
MTYPE_ROUTE_TABLE	memtypes.h	/^  MTYPE_ROUTE_TABLE,$/;"	e	language:C++	enum:__anon40
MTYPE_RTADV_PREFIX	memtypes.h	/^  MTYPE_RTADV_PREFIX,$/;"	e	language:C++	enum:__anon40
MTYPE_SOCKUNION	memtypes.h	/^  MTYPE_SOCKUNION,$/;"	e	language:C++	enum:__anon40
MTYPE_STATIC_IPV4	memtypes.h	/^  MTYPE_STATIC_IPV4,$/;"	e	language:C++	enum:__anon40
MTYPE_STATIC_IPV6	memtypes.h	/^  MTYPE_STATIC_IPV6,$/;"	e	language:C++	enum:__anon40
MTYPE_STREAM	memtypes.h	/^  MTYPE_STREAM,$/;"	e	language:C++	enum:__anon40
MTYPE_STREAM_DATA	memtypes.h	/^  MTYPE_STREAM_DATA,$/;"	e	language:C++	enum:__anon40
MTYPE_STREAM_FIFO	memtypes.h	/^  MTYPE_STREAM_FIFO,$/;"	e	language:C++	enum:__anon40
MTYPE_STRVEC	memtypes.h	/^  MTYPE_STRVEC,$/;"	e	language:C++	enum:__anon40
MTYPE_THREAD	memtypes.h	/^  MTYPE_THREAD,$/;"	e	language:C++	enum:__anon40
MTYPE_THREAD_MASTER	memtypes.h	/^  MTYPE_THREAD_MASTER,$/;"	e	language:C++	enum:__anon40
MTYPE_THREAD_STATS	memtypes.h	/^  MTYPE_THREAD_STATS,$/;"	e	language:C++	enum:__anon40
MTYPE_TMP	memtypes.h	/^  MTYPE_TMP = 1,$/;"	e	language:C++	enum:__anon40
MTYPE_TRANSIT	memtypes.h	/^  MTYPE_TRANSIT,$/;"	e	language:C++	enum:__anon40
MTYPE_TRANSIT_VAL	memtypes.h	/^  MTYPE_TRANSIT_VAL,$/;"	e	language:C++	enum:__anon40
MTYPE_VECTOR	memtypes.h	/^  MTYPE_VECTOR,$/;"	e	language:C++	enum:__anon40
MTYPE_VECTOR_INDEX	memtypes.h	/^  MTYPE_VECTOR_INDEX,$/;"	e	language:C++	enum:__anon40
MTYPE_VRF	memtypes.h	/^  MTYPE_VRF,$/;"	e	language:C++	enum:__anon40
MTYPE_VRF_NAME	memtypes.h	/^  MTYPE_VRF_NAME,$/;"	e	language:C++	enum:__anon40
MTYPE_VTY	memtypes.h	/^  MTYPE_VTY,$/;"	e	language:C++	enum:__anon40
MTYPE_VTYSH_CONFIG	memtypes.h	/^  MTYPE_VTYSH_CONFIG,$/;"	e	language:C++	enum:__anon40
MTYPE_VTYSH_CONFIG_LINE	memtypes.h	/^  MTYPE_VTYSH_CONFIG_LINE,$/;"	e	language:C++	enum:__anon40
MTYPE_VTY_HIST	memtypes.h	/^  MTYPE_VTY_HIST,$/;"	e	language:C++	enum:__anon40
MTYPE_VTY_OUT_BUF	memtypes.h	/^  MTYPE_VTY_OUT_BUF,$/;"	e	language:C++	enum:__anon40
MTYPE_WORK_QUEUE	memtypes.h	/^  MTYPE_WORK_QUEUE,$/;"	e	language:C++	enum:__anon40
MTYPE_WORK_QUEUE_ITEM	memtypes.h	/^  MTYPE_WORK_QUEUE_ITEM,$/;"	e	language:C++	enum:__anon40
MTYPE_WORK_QUEUE_NAME	memtypes.h	/^  MTYPE_WORK_QUEUE_NAME,$/;"	e	language:C++	enum:__anon40
MTYPE_ZCLIENT	memtypes.h	/^  MTYPE_ZCLIENT,$/;"	e	language:C++	enum:__anon40
MTYPE_ZLOG	memtypes.h	/^  MTYPE_ZLOG,$/;"	e	language:C++	enum:__anon40
NEIGHBOR_ADDR_STR	command.h	494;"	d	language:C++
NEIGHBOR_ADDR_STR	command.h	501;"	d	language:C++
NEIGHBOR_ADDR_STR2	command.h	497;"	d	language:C++
NEIGHBOR_ADDR_STR2	command.h	504;"	d	language:C++
NEIGHBOR_CMD	command.h	492;"	d	language:C++
NEIGHBOR_CMD	command.h	499;"	d	language:C++
NEIGHBOR_CMD2	command.h	495;"	d	language:C++
NEIGHBOR_CMD2	command.h	502;"	d	language:C++
NEIGHBOR_STR	command.h	461;"	d	language:C++
NONOPTION_P	getopt.c	540;"	d	language:C	file:
NO_HIGHEST_ACTIVE_REG	regex.c	3784;"	d	language:C	file:
NO_LOWEST_ACTIVE_REG	regex.c	3785;"	d	language:C	file:
NO_NEIGHBOR_CMD	command.h	493;"	d	language:C++
NO_NEIGHBOR_CMD	command.h	500;"	d	language:C++
NO_NEIGHBOR_CMD2	command.h	496;"	d	language:C++
NO_NEIGHBOR_CMD2	command.h	503;"	d	language:C++
NO_STR	command.h	455;"	d	language:C++
NULL	getopt1.c	66;"	d	language:C	file:
NULL	regex.c	268;"	d	language:C	file:
NUM_FAILURE_ITEMS	regex.c	1405;"	d	language:C	file:
NUM_NONREG_ITEMS	regex.c	1393;"	d	language:C	file:
NUM_NONREG_ITEMS	regex.c	1395;"	d	language:C	file:
NUM_REG_ITEMS	regex.c	1389;"	d	language:C	file:
OSPF6_DUMP_TYPE_LIST	command.h	482;"	d	language:C++
OSPF6_INSTANCE_STR	command.h	478;"	d	language:C++
OSPF6_NODE	command.h	/^  OSPF6_NODE,			\/* OSPF protocol for IPv6 mode *\/$/;"	e	language:C++	enum:node_type
OSPF6_NUMBER_STR	command.h	472;"	d	language:C++
OSPF6_ROUTER_STR	command.h	477;"	d	language:C++
OSPF6_STR	command.h	476;"	d	language:C++
OSPF6_VTYSH_PATH	config.h	641;"	d	language:C++
OSPF_AREA_BACKBONE	libospf.h	82;"	d	language:C++
OSPF_CHECK_AGE	libospf.h	46;"	d	language:C++
OSPF_DEFAULT_BANDWIDTH	libospf.h	72;"	d	language:C++
OSPF_DEFAULT_DESTINATION	libospf.h	49;"	d	language:C++
OSPF_DEFAULT_REF_BANDWIDTH	libospf.h	74;"	d	language:C++
OSPF_FAST_HELLO_DEFAULT	libospf.h	80;"	d	language:C++
OSPF_HELLO_INTERVAL_DEFAULT	libospf.h	68;"	d	language:C++
OSPF_IFTYPE_BROADCAST	libospf.h	56;"	d	language:C++
OSPF_IFTYPE_LOOPBACK	libospf.h	60;"	d	language:C++
OSPF_IFTYPE_MAX	libospf.h	61;"	d	language:C++
OSPF_IFTYPE_NBMA	libospf.h	57;"	d	language:C++
OSPF_IFTYPE_NONE	libospf.h	54;"	d	language:C++
OSPF_IFTYPE_POINTOMULTIPOINT	libospf.h	58;"	d	language:C++
OSPF_IFTYPE_POINTOPOINT	libospf.h	55;"	d	language:C++
OSPF_IFTYPE_VIRTUALLINK	libospf.h	59;"	d	language:C++
OSPF_INITIAL_SEQUENCE_NUMBER	libospf.h	50;"	d	language:C++
OSPF_LSA_INITIAL_AGE	libospf.h	44;"	d	language:C++
OSPF_LSA_MAXAGE	libospf.h	45;"	d	language:C++
OSPF_LSA_MAXAGE_CHECK_INTERVAL	libospf.h	89;"	d	language:C++
OSPF_LSA_MAXAGE_DIFF	libospf.h	47;"	d	language:C++
OSPF_LSA_MAXAGE_REMOVE_DELAY_DEFAULT	libospf.h	90;"	d	language:C++
OSPF_LS_INFINITY	libospf.h	48;"	d	language:C++
OSPF_LS_REFRESH_TIME	libospf.h	38;"	d	language:C++
OSPF_LS_REFRESH_TIME	libospf.h	40;"	d	language:C++
OSPF_MAX_SEQUENCE_NUMBER	libospf.h	51;"	d	language:C++
OSPF_MIN_LS_ARRIVAL	libospf.h	43;"	d	language:C++
OSPF_MIN_LS_INTERVAL	libospf.h	42;"	d	language:C++
OSPF_MTU_IGNORE_DEFAULT	libospf.h	79;"	d	language:C++
OSPF_NEIGHBOR_PRIORITY_DEFAULT	libospf.h	77;"	d	language:C++
OSPF_NODE	command.h	/^  OSPF_NODE,			\/* OSPF protocol mode *\/$/;"	e	language:C++	enum:node_type
OSPF_OUTPUT_COST_DEFAULT	libospf.h	64;"	d	language:C++
OSPF_OUTPUT_COST_INFINITE	libospf.h	65;"	d	language:C++
OSPF_POLL_INTERVAL_DEFAULT	libospf.h	76;"	d	language:C++
OSPF_RETRANSMIT_INTERVAL_DEFAULT	libospf.h	70;"	d	language:C++
OSPF_ROUTER_DEAD_INTERVAL_DEFAULT	libospf.h	66;"	d	language:C++
OSPF_ROUTER_DEAD_INTERVAL_MINIMAL	libospf.h	67;"	d	language:C++
OSPF_ROUTER_PRIORITY_DEFAULT	libospf.h	69;"	d	language:C++
OSPF_SPF_DELAY_DEFAULT	libospf.h	85;"	d	language:C++
OSPF_SPF_HOLDTIME_DEFAULT	libospf.h	86;"	d	language:C++
OSPF_SPF_MAX_HOLDTIME_DEFAULT	libospf.h	87;"	d	language:C++
OSPF_STR	command.h	460;"	d	language:C++
OSPF_TRANSMIT_DELAY_DEFAULT	libospf.h	71;"	d	language:C++
OSPF_VTYSH_PATH	config.h	644;"	d	language:C++
OUT_STR	command.h	469;"	d	language:C++
PACKAGE	config.h	647;"	d	language:C++
PACKAGE_BUGREPORT	config.h	650;"	d	language:C++
PACKAGE_NAME	config.h	653;"	d	language:C++
PACKAGE_STRING	config.h	656;"	d	language:C++
PACKAGE_TARNAME	config.h	659;"	d	language:C++
PACKAGE_URL	config.h	662;"	d	language:C++
PACKAGE_VERSION	config.h	665;"	d	language:C++
PARAMS	regex.c	40;"	d	language:C	file:
PARAMS	regex.c	42;"	d	language:C	file:
PARENT_OF	pqueue.c	40;"	d	language:C	file:
PATFETCH	regex.c	1586;"	d	language:C	file:
PATFETCH_RAW	regex.c	1595;"	d	language:C	file:
PATH_BABELD_PID	config.h	671;"	d	language:C++
PATH_BGPD_PID	config.h	674;"	d	language:C++
PATH_ISISD_PID	config.h	677;"	d	language:C++
PATH_OSPF6D_PID	config.h	680;"	d	language:C++
PATH_OSPFD_PID	config.h	683;"	d	language:C++
PATH_PIMD_PID	config.h	686;"	d	language:C++
PATH_RIPD_PID	config.h	689;"	d	language:C++
PATH_RIPNGD_PID	config.h	692;"	d	language:C++
PATH_WATCHQUAGGA_PID	config.h	695;"	d	language:C++
PATH_ZEBRA_PID	config.h	698;"	d	language:C++
PATUNFETCH	regex.c	1601;"	d	language:C	file:
PDP_ENDIAN	zebra.h	363;"	d	language:C++
PERMUTE	getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	language:C	enum:__anon6	file:
PIDFILE_MASK	pid_output.c	28;"	d	language:C	file:
PIM_NODE	command.h	/^  PIM_NODE,			\/* PIM protocol mode *\/$/;"	e	language:C++	enum:node_type
PIM_VTYSH_PATH	config.h	701;"	d	language:C++
PLOG_FUNC	log.c	620;"	d	language:C	file:
PLOG_FUNC	log.c	640;"	d	language:C	file:
PNBBY	prefix.c	170;"	d	language:C	file:
POINTER_TO_OFFSET	regex.c	3710;"	d	language:C	file:
POP_FAILURE_ELT	regex.c	1287;"	d	language:C	file:
POP_FAILURE_INT	regex.c	1286;"	d	language:C	file:
POP_FAILURE_POINT	regex.c	1427;"	d	language:C	file:
POP_FAILURE_POINTER	regex.c	1285;"	d	language:C	file:
PQUEUE_INIT_ARRAYSIZE	pqueue.h	34;"	d	language:C++
PREFETCH	regex.c	3721;"	d	language:C	file:
PREFIX_COPY_IPV4	prefix.h	190;"	d	language:C++
PREFIX_COPY_IPV6	prefix.h	214;"	d	language:C++
PREFIX_DENY	plist.h	/^  PREFIX_DENY,$/;"	e	language:C++	enum:prefix_list_type
PREFIX_FAMILY	prefix.h	157;"	d	language:C++
PREFIX_IPV6_NODE	command.h	/^  PREFIX_IPV6_NODE,		\/* Prefix list node. *\/$/;"	e	language:C++	enum:node_type
PREFIX_LIST_STR	command.h	481;"	d	language:C++
PREFIX_NODE	command.h	/^  PREFIX_NODE,			\/* Prefix list node. *\/$/;"	e	language:C++	enum:node_type
PREFIX_PERMIT	plist.h	/^  PREFIX_PERMIT,$/;"	e	language:C++	enum:prefix_list_type
PREFIX_TYPE_NUMBER	plist.h	/^  PREFIX_TYPE_NUMBER$/;"	e	language:C++	enum:prefix_name_type
PREFIX_TYPE_STRING	plist.h	/^  PREFIX_TYPE_STRING,$/;"	e	language:C++	enum:prefix_name_type
PRI	log.c	401;"	d	language:C	file:
PRI	log.c	463;"	d	language:C	file:
PRINTF_ATTRIBUTE	log.h	108;"	d	language:C++
PRINTF_ATTRIBUTE	log.h	110;"	d	language:C++
PRINTF_ATTRIBUTE	vty.h	147;"	d	language:C++
PRINTF_ATTRIBUTE	vty.h	149;"	d	language:C++
PROTOCOL_NODE	command.h	/^  PROTOCOL_NODE,                \/* protocol filtering node *\/$/;"	e	language:C++	enum:node_type
PSIZE	prefix.h	154;"	d	language:C++
PUSH_FAILURE_ELT	regex.c	1280;"	d	language:C	file:
PUSH_FAILURE_INT	regex.c	1274;"	d	language:C	file:
PUSH_FAILURE_POINT	regex.c	1308;"	d	language:C	file:
PUSH_FAILURE_POINTER	regex.c	1268;"	d	language:C	file:
PUSH_PATTERN_OP	regex.c	1258;"	d	language:C	file:
PUT_AT_VALID	stream.c	35;"	d	language:C	file:
QMD_LIST_CHECK_HEAD	queue.h	357;"	d	language:C++
QMD_LIST_CHECK_HEAD	queue.h	376;"	d	language:C++
QMD_LIST_CHECK_NEXT	queue.h	364;"	d	language:C++
QMD_LIST_CHECK_NEXT	queue.h	377;"	d	language:C++
QMD_LIST_CHECK_PREV	queue.h	371;"	d	language:C++
QMD_LIST_CHECK_PREV	queue.h	378;"	d	language:C++
QMD_SAVELINK	queue.h	114;"	d	language:C++
QMD_SAVELINK	queue.h	133;"	d	language:C++
QMD_TAILQ_CHECK_HEAD	queue.h	473;"	d	language:C++
QMD_TAILQ_CHECK_HEAD	queue.h	497;"	d	language:C++
QMD_TAILQ_CHECK_NEXT	queue.h	485;"	d	language:C++
QMD_TAILQ_CHECK_NEXT	queue.h	499;"	d	language:C++
QMD_TAILQ_CHECK_PREV	queue.h	492;"	d	language:C++
QMD_TAILQ_CHECK_PREV	queue.h	500;"	d	language:C++
QMD_TAILQ_CHECK_TAIL	queue.h	480;"	d	language:C++
QMD_TAILQ_CHECK_TAIL	queue.h	498;"	d	language:C++
QMD_TRACE_ELEM	queue.h	123;"	d	language:C++
QMD_TRACE_ELEM	queue.h	131;"	d	language:C++
QMD_TRACE_HEAD	queue.h	116;"	d	language:C++
QMD_TRACE_HEAD	queue.h	132;"	d	language:C++
QUAGGA_CLK_MONOTONIC	thread.h	/^  QUAGGA_CLK_MONOTONIC,		\/* monotonic, against an indeterminate base *\/$/;"	e	language:C++	enum:quagga_clkid
QUAGGA_CLK_REALTIME	thread.h	/^  QUAGGA_CLK_REALTIME = 0,	\/* ala gettimeofday() *\/$/;"	e	language:C++	enum:quagga_clkid
QUAGGA_CLK_REALTIME_STABILISED	thread.h	/^  QUAGGA_CLK_REALTIME_STABILISED, \/* like realtime, but non-decrementing *\/$/;"	e	language:C++	enum:quagga_clkid
QUAGGA_CONFIG_ARGS	version.h	48;"	d	language:C++
QUAGGA_COPYRIGHT	version.h	46;"	d	language:C++
QUAGGA_DEFINE_DESC_TABLE	log.c	23;"	d	language:C	file:
QUAGGA_GROUP	config.h	704;"	d	language:C++
QUAGGA_IP6_REDIST_HELP_STR_BABELD	route_types.h	62;"	d	language:C++
QUAGGA_IP6_REDIST_HELP_STR_BGPD	route_types.h	98;"	d	language:C++
QUAGGA_IP6_REDIST_HELP_STR_ISISD	route_types.h	134;"	d	language:C++
QUAGGA_IP6_REDIST_HELP_STR_ZEBRA	route_types.h	235;"	d	language:C++
QUAGGA_IP6_REDIST_STR_BABELD	route_types.h	60;"	d	language:C++
QUAGGA_IP6_REDIST_STR_BGPD	route_types.h	96;"	d	language:C++
QUAGGA_IP6_REDIST_STR_ISISD	route_types.h	132;"	d	language:C++
QUAGGA_IP6_REDIST_STR_ZEBRA	route_types.h	233;"	d	language:C++
QUAGGA_IP_REDIST_HELP_STR_BABELD	route_types.h	51;"	d	language:C++
QUAGGA_IP_REDIST_HELP_STR_BGPD	route_types.h	87;"	d	language:C++
QUAGGA_IP_REDIST_HELP_STR_ISISD	route_types.h	123;"	d	language:C++
QUAGGA_IP_REDIST_HELP_STR_ZEBRA	route_types.h	223;"	d	language:C++
QUAGGA_IP_REDIST_STR_BABELD	route_types.h	49;"	d	language:C++
QUAGGA_IP_REDIST_STR_BGPD	route_types.h	85;"	d	language:C++
QUAGGA_IP_REDIST_STR_ISISD	route_types.h	121;"	d	language:C++
QUAGGA_IP_REDIST_STR_ZEBRA	route_types.h	221;"	d	language:C++
QUAGGA_NO_DEPRECATED_INTERFACES	config.h	707;"	d	language:C++
QUAGGA_PROGNAME	version.h	38;"	d	language:C++
QUAGGA_REDIST_HELP_STR_BABELD	route_types.h	38;"	d	language:C++
QUAGGA_REDIST_HELP_STR_BGPD	route_types.h	74;"	d	language:C++
QUAGGA_REDIST_HELP_STR_ISISD	route_types.h	110;"	d	language:C++
QUAGGA_REDIST_HELP_STR_OSPF6D	route_types.h	146;"	d	language:C++
QUAGGA_REDIST_HELP_STR_OSPFD	route_types.h	158;"	d	language:C++
QUAGGA_REDIST_HELP_STR_PIMD	route_types.h	171;"	d	language:C++
QUAGGA_REDIST_HELP_STR_RIPD	route_types.h	184;"	d	language:C++
QUAGGA_REDIST_HELP_STR_RIPNGD	route_types.h	197;"	d	language:C++
QUAGGA_REDIST_HELP_STR_ZEBRA	route_types.h	209;"	d	language:C++
QUAGGA_REDIST_STR_BABELD	route_types.h	36;"	d	language:C++
QUAGGA_REDIST_STR_BGPD	route_types.h	72;"	d	language:C++
QUAGGA_REDIST_STR_ISISD	route_types.h	108;"	d	language:C++
QUAGGA_REDIST_STR_OSPF6D	route_types.h	144;"	d	language:C++
QUAGGA_REDIST_STR_OSPFD	route_types.h	156;"	d	language:C++
QUAGGA_REDIST_STR_PIMD	route_types.h	169;"	d	language:C++
QUAGGA_REDIST_STR_RIPD	route_types.h	182;"	d	language:C++
QUAGGA_REDIST_STR_RIPNGD	route_types.h	195;"	d	language:C++
QUAGGA_REDIST_STR_ZEBRA	route_types.h	207;"	d	language:C++
QUAGGA_SIGNAL_TIMER_INTERVAL	sigevent.h	29;"	d	language:C++
QUAGGA_URL	version.h	44;"	d	language:C++
QUAGGA_USER	config.h	710;"	d	language:C++
QUAGGA_VERSION	version.h	40;"	d	language:C++
REALLOC	regex.c	1682;"	d	language:C	file:
REALLOC	regex.c	1685;"	d	language:C	file:
REDIST_STR	command.h	456;"	d	language:C++
REGEX_ALLOCATE	regex.c	295;"	d	language:C	file:
REGEX_ALLOCATE	regex.c	315;"	d	language:C	file:
REGEX_ALLOCATE_STACK	regex.c	331;"	d	language:C	file:
REGEX_ALLOCATE_STACK	regex.c	342;"	d	language:C	file:
REGEX_ALLOCATE_STACK	regex.c	348;"	d	language:C	file:
REGEX_FREE	regex.c	297;"	d	language:C	file:
REGEX_FREE	regex.c	323;"	d	language:C	file:
REGEX_FREE_STACK	regex.c	335;"	d	language:C	file:
REGEX_FREE_STACK	regex.c	344;"	d	language:C	file:
REGEX_FREE_STACK	regex.c	353;"	d	language:C	file:
REGEX_REALLOCATE	regex.c	296;"	d	language:C	file:
REGEX_REALLOCATE	regex.c	318;"	d	language:C	file:
REGEX_REALLOCATE_STACK	regex.c	333;"	d	language:C	file:
REGEX_REALLOCATE_STACK	regex.c	343;"	d	language:C	file:
REGEX_REALLOCATE_STACK	regex.c	350;"	d	language:C	file:
REGEX_TALLOC	regex.c	370;"	d	language:C	file:
REGISTER_MIB	smux.h	42;"	d	language:C++
REGISTER_MIB	smux.h	43;"	d	language:C++
REGS	sigevent.c	192;"	d	language:C	file:
REGS_FIXED	regex-gnu.h	367;"	d	language:C++
REGS_REALLOCATE	regex-gnu.h	366;"	d	language:C++
REGS_UNALLOCATED	regex-gnu.h	365;"	d	language:C++
REG_BADBR	regex-gnu.h	/^  REG_BADBR,		\/* Invalid contents of \\{\\}.  *\/$/;"	e	language:C++	enum:__anon36
REG_BADBR_IDX	regex.c	1052;"	d	language:C	file:
REG_BADPAT	regex-gnu.h	/^  REG_BADPAT,		\/* Invalid pattern.  *\/$/;"	e	language:C++	enum:__anon36
REG_BADPAT_IDX	regex.c	1028;"	d	language:C	file:
REG_BADRPT	regex-gnu.h	/^  REG_BADRPT,		\/* No preceding re for repetition op.  *\/$/;"	e	language:C++	enum:__anon36
REG_BADRPT_IDX	regex.c	1061;"	d	language:C	file:
REG_EBRACE	regex-gnu.h	/^  REG_EBRACE,		\/* Unmatched \\{.  *\/$/;"	e	language:C++	enum:__anon36
REG_EBRACE_IDX	regex.c	1049;"	d	language:C	file:
REG_EBRACK	regex-gnu.h	/^  REG_EBRACK,		\/* Unmatched left bracket.  *\/$/;"	e	language:C++	enum:__anon36
REG_EBRACK_IDX	regex.c	1043;"	d	language:C	file:
REG_ECOLLATE	regex-gnu.h	/^  REG_ECOLLATE,		\/* Not implemented.  *\/$/;"	e	language:C++	enum:__anon36
REG_ECOLLATE_IDX	regex.c	1031;"	d	language:C	file:
REG_ECTYPE	regex-gnu.h	/^  REG_ECTYPE,		\/* Invalid character class name.  *\/$/;"	e	language:C++	enum:__anon36
REG_ECTYPE_IDX	regex.c	1034;"	d	language:C	file:
REG_EEND	regex-gnu.h	/^  REG_EEND,		\/* Premature end.  *\/$/;"	e	language:C++	enum:__anon36
REG_EEND_IDX	regex.c	1064;"	d	language:C	file:
REG_EESCAPE	regex-gnu.h	/^  REG_EESCAPE,		\/* Trailing backslash.  *\/$/;"	e	language:C++	enum:__anon36
REG_EESCAPE_IDX	regex.c	1037;"	d	language:C	file:
REG_ENOSYS	regex-gnu.h	/^  REG_ENOSYS = -1,	\/* This will never happen for this implementation.  *\/$/;"	e	language:C++	enum:__anon36
REG_EPAREN	regex-gnu.h	/^  REG_EPAREN,		\/* Parenthesis imbalance.  *\/$/;"	e	language:C++	enum:__anon36
REG_EPAREN_IDX	regex.c	1046;"	d	language:C	file:
REG_ERANGE	regex-gnu.h	/^  REG_ERANGE,		\/* Invalid range end.  *\/$/;"	e	language:C++	enum:__anon36
REG_ERANGE_IDX	regex.c	1055;"	d	language:C	file:
REG_ERPAREN	regex-gnu.h	/^  REG_ERPAREN		\/* Unmatched ) or \\); not returned from regcomp.  *\/$/;"	e	language:C++	enum:__anon36
REG_ERPAREN_IDX	regex.c	1070;"	d	language:C	file:
REG_ESIZE	regex-gnu.h	/^  REG_ESIZE,		\/* Compiled pattern bigger than 2^16 bytes.  *\/$/;"	e	language:C++	enum:__anon36
REG_ESIZE_IDX	regex.c	1067;"	d	language:C	file:
REG_ESPACE	regex-gnu.h	/^  REG_ESPACE,		\/* Ran out of memory.  *\/$/;"	e	language:C++	enum:__anon36
REG_ESPACE_IDX	regex.c	1058;"	d	language:C	file:
REG_ESUBREG	regex-gnu.h	/^  REG_ESUBREG,		\/* Invalid back reference.  *\/$/;"	e	language:C++	enum:__anon36
REG_ESUBREG_IDX	regex.c	1040;"	d	language:C	file:
REG_EXTENDED	regex-gnu.h	252;"	d	language:C++
REG_ICASE	regex-gnu.h	256;"	d	language:C++
REG_INDEX	sigevent.c	180;"	d	language:C	file:
REG_MATCH_NULL_STRING_P	regex.c	1528;"	d	language:C	file:
REG_NEWLINE	regex-gnu.h	261;"	d	language:C++
REG_NOERROR	regex-gnu.h	/^  REG_NOERROR = 0,	\/* Success.  *\/$/;"	e	language:C++	enum:__anon36
REG_NOERROR_IDX	regex.c	1022;"	d	language:C	file:
REG_NOMATCH	regex-gnu.h	/^  REG_NOMATCH,		\/* Didn't find a match (for regexec).  *\/$/;"	e	language:C++	enum:__anon36
REG_NOMATCH_IDX	regex.c	1025;"	d	language:C	file:
REG_NOSUB	regex-gnu.h	265;"	d	language:C++
REG_NOTBOL	regex-gnu.h	275;"	d	language:C++
REG_NOTEOL	regex-gnu.h	278;"	d	language:C++
REG_UNSET	regex.c	1557;"	d	language:C	file:
REG_UNSET_VALUE	regex.c	1556;"	d	language:C	file:
REL_ALLOC	regex.c	114;"	d	language:C	file:
REMAINING_AVAIL_SLOTS	regex.c	1412;"	d	language:C	file:
REQUIRE_ORDER	getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	language:C	enum:__anon6	file:
RESET_FAIL_STACK	regex.c	1223;"	d	language:C	file:
RESET_FAIL_STACK	regex.c	1230;"	d	language:C	file:
RESTRICTED_NODE	command.h	/^  RESTRICTED_NODE,		\/* Restricted view mode *\/ $/;"	e	language:C++	enum:node_type
RETALLOC	regex.c	367;"	d	language:C	file:
RETALLOC_IF	regex.c	368;"	d	language:C	file:
RETSIGTYPE	config.h	713;"	d	language:C++
RETURN_IN_ORDER	getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	language:C	enum:__anon6	file:
RE_BACKSLASH_ESCAPE_IN_LISTS	regex-gnu.h	56;"	d	language:C++
RE_BK_PLUS_QM	regex-gnu.h	61;"	d	language:C++
RE_CHAR_CLASSES	regex-gnu.h	67;"	d	language:C++
RE_CONTEXT_INDEP_ANCHORS	regex-gnu.h	81;"	d	language:C++
RE_CONTEXT_INDEP_OPS	regex-gnu.h	89;"	d	language:C++
RE_CONTEXT_INVALID_OPS	regex-gnu.h	93;"	d	language:C++
RE_DEBUG	regex-gnu.h	161;"	d	language:C++
RE_DOT_NEWLINE	regex-gnu.h	97;"	d	language:C++
RE_DOT_NOT_NULL	regex-gnu.h	101;"	d	language:C++
RE_DUP_MAX	regex-gnu.h	242;"	d	language:C++
RE_DUP_MAX	regex-gnu.h	245;"	d	language:C++
RE_HAT_LISTS_NOT_NEWLINE	regex-gnu.h	105;"	d	language:C++
RE_INTERVALS	regex-gnu.h	110;"	d	language:C++
RE_LIMITED_OPS	regex-gnu.h	114;"	d	language:C++
RE_NEWLINE_ALT	regex-gnu.h	118;"	d	language:C++
RE_NO_BK_BRACES	regex-gnu.h	123;"	d	language:C++
RE_NO_BK_PARENS	regex-gnu.h	127;"	d	language:C++
RE_NO_BK_REFS	regex-gnu.h	131;"	d	language:C++
RE_NO_BK_VBAR	regex-gnu.h	135;"	d	language:C++
RE_NO_EMPTY_RANGES	regex-gnu.h	141;"	d	language:C++
RE_NO_GNU_OPS	regex-gnu.h	153;"	d	language:C++
RE_NO_POSIX_BACKTRACKING	regex-gnu.h	149;"	d	language:C++
RE_NREGS	regex-gnu.h	411;"	d	language:C++
RE_SYNTAX_AWK	regex-gnu.h	175;"	d	language:C++
RE_SYNTAX_ED	regex-gnu.h	205;"	d	language:C++
RE_SYNTAX_EGREP	regex-gnu.h	195;"	d	language:C++
RE_SYNTAX_EMACS	regex-gnu.h	173;"	d	language:C++
RE_SYNTAX_GNU_AWK	regex-gnu.h	182;"	d	language:C++
RE_SYNTAX_GREP	regex-gnu.h	190;"	d	language:C++
RE_SYNTAX_POSIX_AWK	regex-gnu.h	186;"	d	language:C++
RE_SYNTAX_POSIX_BASIC	regex-gnu.h	214;"	d	language:C++
RE_SYNTAX_POSIX_EGREP	regex-gnu.h	201;"	d	language:C++
RE_SYNTAX_POSIX_EXTENDED	regex-gnu.h	223;"	d	language:C++
RE_SYNTAX_POSIX_MINIMAL_BASIC	regex-gnu.h	220;"	d	language:C++
RE_SYNTAX_POSIX_MINIMAL_EXTENDED	regex-gnu.h	231;"	d	language:C++
RE_SYNTAX_SED	regex-gnu.h	207;"	d	language:C++
RE_TRANSLATE_TYPE	regex-gnu.h	320;"	d	language:C++
RE_UNMATCHED_RIGHT_PAREN_ORD	regex-gnu.h	145;"	d	language:C++
RIGHT_OF	pqueue.c	42;"	d	language:C	file:
RIPNG_NODE	command.h	/^  RIPNG_NODE,			\/* RIPng protocol mode node. *\/$/;"	e	language:C++	enum:node_type
RIPNG_VTYSH_PATH	config.h	716;"	d	language:C++
RIP_NODE	command.h	/^  RIP_NODE,			\/* RIP protocol mode node. *\/ $/;"	e	language:C++	enum:node_type
RIP_STR	command.h	458;"	d	language:C++
RIP_VTYSH_PATH	config.h	719;"	d	language:C++
RMAP_ANY	routemap.h	/^  RMAP_ANY$/;"	e	language:C++	enum:route_map_type
RMAP_BABEL	routemap.h	/^  RMAP_BABEL,$/;"	e	language:C++	enum:__anon2
RMAP_BGP	routemap.h	/^  RMAP_BGP,$/;"	e	language:C++	enum:__anon2
RMAP_COMPILE_ERROR	routemap.h	/^  RMAP_COMPILE_ERROR$/;"	e	language:C++	enum:__anon5
RMAP_DENY	routemap.h	/^  RMAP_DENY,$/;"	e	language:C++	enum:route_map_type
RMAP_DENYMATCH	routemap.h	/^  RMAP_DENYMATCH,$/;"	e	language:C++	enum:__anon1
RMAP_ERROR	routemap.h	/^  RMAP_ERROR,$/;"	e	language:C++	enum:__anon1
RMAP_EVENT_INDEX_ADDED	routemap.h	/^  RMAP_EVENT_INDEX_ADDED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_INDEX_DELETED	routemap.h	/^  RMAP_EVENT_INDEX_DELETED$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_MATCH_ADDED	routemap.h	/^  RMAP_EVENT_MATCH_ADDED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_MATCH_DELETED	routemap.h	/^  RMAP_EVENT_MATCH_DELETED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_MATCH_REPLACED	routemap.h	/^  RMAP_EVENT_MATCH_REPLACED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_SET_ADDED	routemap.h	/^  RMAP_EVENT_SET_ADDED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_SET_DELETED	routemap.h	/^  RMAP_EVENT_SET_DELETED,$/;"	e	language:C++	enum:__anon4
RMAP_EVENT_SET_REPLACED	routemap.h	/^  RMAP_EVENT_SET_REPLACED,$/;"	e	language:C++	enum:__anon4
RMAP_EXIT	routemap.h	/^  RMAP_EXIT,$/;"	e	language:C++	enum:__anon3
RMAP_GOTO	routemap.h	/^  RMAP_GOTO,$/;"	e	language:C++	enum:__anon3
RMAP_MATCH	routemap.h	/^  RMAP_MATCH,$/;"	e	language:C++	enum:__anon1
RMAP_NEXT	routemap.h	/^  RMAP_NEXT$/;"	e	language:C++	enum:__anon3
RMAP_NODE	command.h	/^  RMAP_NODE,			\/* Route map node. *\/$/;"	e	language:C++	enum:node_type
RMAP_NOMATCH	routemap.h	/^  RMAP_NOMATCH,$/;"	e	language:C++	enum:__anon1
RMAP_OKAY	routemap.h	/^  RMAP_OKAY$/;"	e	language:C++	enum:__anon1
RMAP_OSPF	routemap.h	/^  RMAP_OSPF,$/;"	e	language:C++	enum:__anon2
RMAP_OSPF6	routemap.h	/^  RMAP_OSPF6,$/;"	e	language:C++	enum:__anon2
RMAP_PERMIT	routemap.h	/^  RMAP_PERMIT,$/;"	e	language:C++	enum:route_map_type
RMAP_RECURSION_LIMIT	routemap.h	73;"	d	language:C++
RMAP_RIP	routemap.h	/^  RMAP_RIP,$/;"	e	language:C++	enum:__anon2
RMAP_RIPNG	routemap.h	/^  RMAP_RIPNG,$/;"	e	language:C++	enum:__anon2
RMAP_RULE_MISSING	routemap.h	/^  RMAP_RULE_MISSING = 1,$/;"	e	language:C++	enum:__anon5
RMAP_ZEBRA	routemap.h	/^  RMAP_ZEBRA$/;"	e	language:C++	enum:__anon2
ROUND1	md5.c	52;"	d	language:C	file:
ROUND2	md5.c	58;"	d	language:C	file:
ROUND3	md5.c	64;"	d	language:C	file:
ROUND4	md5.c	70;"	d	language:C	file:
ROUTER_STR	command.h	464;"	d	language:C++
ROUTE_NODE_FIELDS	table.h	/^  ROUTE_NODE_FIELDS;$/;"	m	language:C++	struct:route_node
ROUTE_NODE_FIELDS	table.h	73;"	d	language:C++
ROUTE_STR	command.h	480;"	d	language:C++
RT_ITER_STATE_DONE	table.h	/^  RT_ITER_STATE_DONE$/;"	e	language:C++	enum:__anon17
RT_ITER_STATE_INIT	table.h	/^  RT_ITER_STATE_INIT,$/;"	e	language:C++	enum:__anon17
RT_ITER_STATE_ITERATING	table.h	/^  RT_ITER_STATE_ITERATING,$/;"	e	language:C++	enum:__anon17
RT_ITER_STATE_PAUSED	table.h	/^  RT_ITER_STATE_PAUSED,$/;"	e	language:C++	enum:__anon17
RT_TABLE_MAIN	zebra.h	180;"	d	language:C++
RUSAGE_T	thread.h	34;"	d	language:C++
SAFI_MAX	zebra.h	494;"	d	language:C++
SAFI_MPLS_VPN	zebra.h	493;"	d	language:C++
SAFI_MULTICAST	zebra.h	491;"	d	language:C++
SAFI_RESERVED_3	zebra.h	492;"	d	language:C++
SAFI_UNICAST	zebra.h	490;"	d	language:C++
SECONDS_STR	command.h	479;"	d	language:C++
SELECT_TYPE_ARG1	config.h	722;"	d	language:C++
SELECT_TYPE_ARG234	config.h	725;"	d	language:C++
SELECT_TYPE_ARG5	config.h	728;"	d	language:C++
SERVICE_NODE	command.h	/^  SERVICE_NODE, 		\/* Service node. *\/$/;"	e	language:C++	enum:node_type
SET_FLAG	zebra.h	515;"	d	language:C++
SET_IN6_LINKLOCAL_IFINDEX	sockunion.h	71;"	d	language:C++
SET_IN6_LINKLOCAL_IFINDEX	sockunion.h	78;"	d	language:C++
SET_LIST_BIT	regex.c	1763;"	d	language:C	file:
SET_REGS_MATCHED	regex.c	1537;"	d	language:C	file:
SET_STR	command.h	468;"	d	language:C++
SHIFT	md5.c	45;"	d	language:C	file:
SHOW_ROUTE_V4_HEADER	route_types.h	24;"	d	language:C++
SHOW_ROUTE_V6_HEADER	route_types.h	29;"	d	language:C++
SHOW_STR	command.h	452;"	d	language:C++
SIGN_EXTEND_CHAR	regex.c	275;"	d	language:C	file:
SIGN_EXTEND_CHAR	regex.c	277;"	d	language:C	file:
SIGN_EXTEND_CHAR	regex.c	280;"	d	language:C	file:
SLIST_EMPTY	queue.h	157;"	d	language:C++
SLIST_ENTRY	queue.h	149;"	d	language:C++
SLIST_FIRST	queue.h	159;"	d	language:C++
SLIST_FOREACH	queue.h	161;"	d	language:C++
SLIST_FOREACH_PREVPTR	queue.h	171;"	d	language:C++
SLIST_FOREACH_SAFE	queue.h	166;"	d	language:C++
SLIST_HEAD	queue.h	141;"	d	language:C++
SLIST_HEAD_INITIALIZER	queue.h	146;"	d	language:C++
SLIST_INIT	queue.h	176;"	d	language:C++
SLIST_INSERT_AFTER	queue.h	180;"	d	language:C++
SLIST_INSERT_HEAD	queue.h	185;"	d	language:C++
SLIST_NEXT	queue.h	190;"	d	language:C++
SLIST_REMOVE	queue.h	192;"	d	language:C++
SLIST_REMOVE_AFTER	queue.h	206;"	d	language:C++
SLIST_REMOVE_HEAD	queue.h	211;"	d	language:C++
SLIST_SWAP	queue.h	215;"	d	language:C++
SMUXMAXPKTSIZE	smux.c	39;"	d	language:C	file:
SMUXMAXSTRLEN	smux.c	40;"	d	language:C	file:
SMUX_CLOSE	smux.c	43;"	d	language:C	file:
SMUX_CONNECT	smux.c	/^enum smux_event {SMUX_SCHEDULE, SMUX_CONNECT, SMUX_READ};$/;"	e	language:C	enum:smux_event	file:
SMUX_GET	smux.c	48;"	d	language:C	file:
SMUX_GETNEXT	smux.c	49;"	d	language:C	file:
SMUX_GETRSP	smux.c	50;"	d	language:C	file:
SMUX_MAX_FAILURE	smux.c	54;"	d	language:C	file:
SMUX_NODE	command.h	/^  SMUX_NODE,			\/* SNMP configuration node. *\/$/;"	e	language:C++	enum:node_type
SMUX_OPEN	smux.c	42;"	d	language:C	file:
SMUX_PORT_DEFAULT	smux.c	37;"	d	language:C	file:
SMUX_READ	smux.c	/^enum smux_event {SMUX_SCHEDULE, SMUX_CONNECT, SMUX_READ};$/;"	e	language:C	enum:smux_event	file:
SMUX_RREQ	smux.c	44;"	d	language:C	file:
SMUX_RRSP	smux.c	45;"	d	language:C	file:
SMUX_SCHEDULE	smux.c	/^enum smux_event {SMUX_SCHEDULE, SMUX_CONNECT, SMUX_READ};$/;"	e	language:C	enum:smux_event	file:
SMUX_SET	smux.c	51;"	d	language:C	file:
SMUX_SOUT	smux.c	46;"	d	language:C	file:
SMUX_TRAP	smux.c	52;"	d	language:C	file:
SNMP_FALSE	smux.h	34;"	d	language:C++
SNMP_INTEGER	smux.h	59;"	d	language:C++
SNMP_INVALID	smux.h	38;"	d	language:C++
SNMP_IPADDRESS	smux.h	66;"	d	language:C++
SNMP_LOCAL_VARIABLES	smux.h	55;"	d	language:C++
SNMP_TRUE	smux.h	33;"	d	language:C++
SNMP_VALID	smux.h	37;"	d	language:C++
SOPT_SIZE_CMSG_IFINDEX	sockopt.h	82;"	d	language:C++
SOPT_SIZE_CMSG_IFINDEX_IPV4	sockopt.h	75;"	d	language:C++
SOPT_SIZE_CMSG_IFINDEX_IPV4	sockopt.h	77;"	d	language:C++
SOPT_SIZE_CMSG_IFINDEX_IPV4	sockopt.h	79;"	d	language:C++
SOPT_SIZE_CMSG_PKTINFO	sockopt.h	58;"	d	language:C++
SOPT_SIZE_CMSG_PKTINFO_IPV4	sockopt.h	56;"	d	language:C++
SOPT_SIZE_CMSG_PKTINFO_IPV6	sockopt.h	46;"	d	language:C++
SOPT_SIZE_CMSG_RECVIF_IPV4	sockopt.h	67;"	d	language:C++
SOPT_SIZE_CMSG_RECVIF_IPV4	sockopt.h	69;"	d	language:C++
SRCS-y	Makefile	/^SRCS-y := $(wildcard $(LIB_ZEBRA_SRC)\/*.c)$/;"	m	language:Make
STAILQ_CONCAT	queue.h	241;"	d	language:C++
STAILQ_EMPTY	queue.h	249;"	d	language:C++
STAILQ_ENTRY	queue.h	233;"	d	language:C++
STAILQ_FIRST	queue.h	251;"	d	language:C++
STAILQ_FOREACH	queue.h	253;"	d	language:C++
STAILQ_FOREACH_SAFE	queue.h	259;"	d	language:C++
STAILQ_HEAD	queue.h	224;"	d	language:C++
STAILQ_HEAD_INITIALIZER	queue.h	230;"	d	language:C++
STAILQ_INIT	queue.h	264;"	d	language:C++
STAILQ_INSERT_AFTER	queue.h	269;"	d	language:C++
STAILQ_INSERT_HEAD	queue.h	275;"	d	language:C++
STAILQ_INSERT_TAIL	queue.h	281;"	d	language:C++
STAILQ_LAST	queue.h	287;"	d	language:C++
STAILQ_NEXT	queue.h	293;"	d	language:C++
STAILQ_REMOVE	queue.h	295;"	d	language:C++
STAILQ_REMOVE_AFTER	queue.h	309;"	d	language:C++
STAILQ_REMOVE_HEAD	queue.h	315;"	d	language:C++
STAILQ_SWAP	queue.h	321;"	d	language:C++
STATE_ADDR	command.c	941;"	d	language:C	file:
STATE_COLON	command.c	939;"	d	language:C	file:
STATE_DOT	command.c	942;"	d	language:C	file:
STATE_DOUBLE	command.c	940;"	d	language:C	file:
STATE_MASK	command.c	944;"	d	language:C	file:
STATE_SLASH	command.c	943;"	d	language:C	file:
STATE_START	command.c	938;"	d	language:C	file:
STDC_HEADERS	config.h	740;"	d	language:C++
STORE_JUMP	regex.c	1653;"	d	language:C	file:
STORE_JUMP2	regex.c	1657;"	d	language:C	file:
STORE_NUMBER	regex.c	535;"	d	language:C	file:
STORE_NUMBER_AND_INCR	regex.c	545;"	d	language:C	file:
STREAM_BOUND_WARN	stream.c	69;"	d	language:C	file:
STREAM_CONCAT_REMAIN	stream.h	125;"	d	language:C++
STREAM_DATA	stream.h	130;"	d	language:C++
STREAM_PNT	stream.h	129;"	d	language:C++
STREAM_READABLE	stream.h	123;"	d	language:C++
STREAM_REMAIN	stream.h	131;"	d	language:C++
STREAM_SIZE	stream.h	119;"	d	language:C++
STREAM_VERIFY_SANE	stream.c	61;"	d	language:C	file:
STREAM_WARN_OFFSETS	stream.c	54;"	d	language:C	file:
STREAM_WRITEABLE	stream.h	121;"	d	language:C++
STREQ	regex.c	374;"	d	language:C	file:
SUPPORT_OSPF_API	config.h	752;"	d	language:C++
SU_ADDRSTRLEN	sockunion.h	65;"	d	language:C++
SWAP_FLAGS	getopt.c	285;"	d	language:C	file:
SWAP_FLAGS	getopt.c	293;"	d	language:C	file:
SWITCH_ENUM_CAST	regex.c	166;"	d	language:C	file:
SWITCH_ENUM_CAST	regex.c	168;"	d	language:C	file:
SYNTAX	regex.c	209;"	d	language:C	file:
SYSCONFDIR	zebra.h	35;"	d	language:C++
Sa	md5.c	76;"	d	language:C	file:
Sb	md5.c	77;"	d	language:C	file:
Sc	md5.c	78;"	d	language:C	file:
Sd	md5.c	79;"	d	language:C	file:
Se	md5.c	81;"	d	language:C	file:
Sf	md5.c	82;"	d	language:C	file:
Sg	md5.c	83;"	d	language:C	file:
Sh	md5.c	84;"	d	language:C	file:
Si	md5.c	86;"	d	language:C	file:
Sj	md5.c	87;"	d	language:C	file:
Sk	md5.c	88;"	d	language:C	file:
Sl	md5.c	89;"	d	language:C	file:
Sm	md5.c	91;"	d	language:C	file:
Sn	md5.c	92;"	d	language:C	file:
So	md5.c	93;"	d	language:C	file:
Sp	md5.c	94;"	d	language:C	file:
Sword	regex.c	162;"	d	language:C	file:
T	md5.c	/^static const uint32_t T[65] = {$/;"	v	language:C	file:
TABLE_NODE	command.h	/^  TABLE_NODE,			\/* rtm_table selection node. *\/$/;"	e	language:C++	enum:node_type
TAILQ_CONCAT	queue.h	503;"	d	language:C++
TAILQ_EMPTY	queue.h	514;"	d	language:C++
TAILQ_ENTRY	queue.h	462;"	d	language:C++
TAILQ_FIRST	queue.h	516;"	d	language:C++
TAILQ_FOREACH	queue.h	518;"	d	language:C++
TAILQ_FOREACH_REVERSE	queue.h	528;"	d	language:C++
TAILQ_FOREACH_REVERSE_SAFE	queue.h	533;"	d	language:C++
TAILQ_FOREACH_SAFE	queue.h	523;"	d	language:C++
TAILQ_HEAD	queue.h	452;"	d	language:C++
TAILQ_HEAD_INITIALIZER	queue.h	459;"	d	language:C++
TAILQ_INIT	queue.h	538;"	d	language:C++
TAILQ_INSERT_AFTER	queue.h	544;"	d	language:C++
TAILQ_INSERT_BEFORE	queue.h	559;"	d	language:C++
TAILQ_INSERT_HEAD	queue.h	569;"	d	language:C++
TAILQ_INSERT_TAIL	queue.h	582;"	d	language:C++
TAILQ_LAST	queue.h	592;"	d	language:C++
TAILQ_NEXT	queue.h	595;"	d	language:C++
TAILQ_PREV	queue.h	597;"	d	language:C++
TAILQ_REMOVE	queue.h	600;"	d	language:C++
TAILQ_SWAP	queue.h	618;"	d	language:C++
TALLOC	regex.c	366;"	d	language:C	file:
TCP_MD5_AUTH	sockopt.c	529;"	d	language:C	file:
TCP_MD5_AUTH_ADD	sockopt.c	530;"	d	language:C	file:
TCP_MD5_AUTH_DEL	sockopt.c	531;"	d	language:C	file:
TELNET_NAWS_SB_LEN	vty.h	93;"	d	language:C++
THREAD_ARG	thread.h	125;"	d	language:C++
THREAD_BACKGROUND	thread.h	117;"	d	language:C++
THREAD_EVENT	thread.h	115;"	d	language:C++
THREAD_EXECUTE	thread.h	119;"	d	language:C++
THREAD_FD	thread.h	126;"	d	language:C++
THREAD_OFF	thread.h	153;"	d	language:C++
THREAD_READ	thread.h	112;"	d	language:C++
THREAD_READY	thread.h	116;"	d	language:C++
THREAD_READ_OFF	thread.h	162;"	d	language:C++
THREAD_READ_ON	thread.h	129;"	d	language:C++
THREAD_TIMER	thread.h	114;"	d	language:C++
THREAD_TIMER_MSEC_ON	thread.h	147;"	d	language:C++
THREAD_TIMER_OFF	thread.h	164;"	d	language:C++
THREAD_TIMER_ON	thread.h	141;"	d	language:C++
THREAD_UNUSED	thread.h	118;"	d	language:C++
THREAD_VAL	thread.h	127;"	d	language:C++
THREAD_WRITE	thread.h	113;"	d	language:C++
THREAD_WRITE_OFF	thread.h	163;"	d	language:C++
THREAD_WRITE_ON	thread.h	135;"	d	language:C++
THREAD_YIELD_TIME_SLOT	thread.h	122;"	d	language:C++
TIMER_SECOND_MICRO	thread.c	61;"	d	language:C	file:
TIME_WITH_SYS_TIME	config.h	755;"	d	language:C++
TOKEN_KEYWORD	command.h	/^  TOKEN_KEYWORD,$/;"	e	language:C++	enum:cmd_token_type
TOKEN_MULTIPLE	command.h	/^  TOKEN_MULTIPLE,$/;"	e	language:C++	enum:cmd_token_type
TOKEN_TERMINAL	command.h	/^  TOKEN_TERMINAL = 0,$/;"	e	language:C++	enum:cmd_token_type
TOLOWER	regex.c	262;"	d	language:C	file:
TOLOWER	regex.c	264;"	d	language:C	file:
TRACEBUF	queue.h	112;"	d	language:C++
TRACEBUF	queue.h	134;"	d	language:C++
TRANSLATE	regex.c	1609;"	d	language:C	file:
TRASHIT	queue.h	113;"	d	language:C++
TRASHIT	queue.h	135;"	d	language:C++
UINT16_MAX	zebra.h	238;"	d	language:C++
UINT32_MAX	zebra.h	241;"	d	language:C++
UINT8_MAX	zebra.h	235;"	d	language:C++
UNDEBUG_STR	command.h	463;"	d	language:C++
UNSET_FLAG	zebra.h	516;"	d	language:C++
V4NOTATION_STR	command.h	471;"	d	language:C++
VECTOR_MIN_SIZE	vector.h	35;"	d	language:C++
VERSION	config.h	789;"	d	language:C++
VIEW_NODE	command.h	/^  VIEW_NODE,			\/* View node. Default mode of vty interface. *\/$/;"	e	language:C++	enum:node_type
VTYSH	config.h	792;"	d	language:C++
VTYSH_READ	vty.c	/^  VTYSH_READ,$/;"	e	language:C	enum:event	file:
VTYSH_SERV	vty.c	/^  VTYSH_SERV,$/;"	e	language:C	enum:event	file:
VTYSH_WRITE	vty.c	/^  VTYSH_WRITE$/;"	e	language:C	enum:event	file:
VTY_BUFSIZ	vty.h	28;"	d	language:C++
VTY_CHECK_INTEGER_RANGE	vty.h	189;"	d	language:C++
VTY_CLOSE	vty.h	/^  enum {VTY_NORMAL, VTY_CLOSE, VTY_MORE, VTY_MORELINE} status;$/;"	e	language:C++	enum:vty::__anon21
VTY_ESCAPE	vty.c	1304;"	d	language:C	file:
VTY_FILE	vty.h	/^  enum {VTY_TERM, VTY_FILE, VTY_SHELL, VTY_SHELL_SERV} type;$/;"	e	language:C++	enum:vty::__anon20
VTY_GET_INTEGER	vty.h	195;"	d	language:C++
VTY_GET_INTEGER_RANGE	vty.h	182;"	d	language:C++
VTY_GET_INTEGER_RANGE_HEART	vty.h	172;"	d	language:C++
VTY_GET_IPV4_ADDRESS	vty.h	198;"	d	language:C++
VTY_GET_IPV4_PREFIX	vty.h	209;"	d	language:C++
VTY_GET_ULONG	vty.h	153;"	d	language:C++
VTY_MAXHIST	vty.h	29;"	d	language:C++
VTY_MORE	vty.h	/^  enum {VTY_NORMAL, VTY_CLOSE, VTY_MORE, VTY_MORELINE} status;$/;"	e	language:C++	enum:vty::__anon21
VTY_MORELINE	vty.h	/^  enum {VTY_NORMAL, VTY_CLOSE, VTY_MORE, VTY_MORELINE} status;$/;"	e	language:C++	enum:vty::__anon21
VTY_NEWLINE	vty.h	128;"	d	language:C++
VTY_NODE	command.h	/^  VTY_NODE,			\/* Vty node. *\/$/;"	e	language:C++	enum:node_type
VTY_NORMAL	vty.c	1302;"	d	language:C	file:
VTY_NORMAL	vty.h	/^  enum {VTY_NORMAL, VTY_CLOSE, VTY_MORE, VTY_MORELINE} status;$/;"	e	language:C++	enum:vty::__anon21
VTY_PRE_ESCAPE	vty.c	1303;"	d	language:C	file:
VTY_READ	vty.c	/^  VTY_READ,$/;"	e	language:C	enum:event	file:
VTY_READ_BUFSIZ	vty.h	134;"	d	language:C++
VTY_SERV	vty.c	/^  VTY_SERV,$/;"	e	language:C	enum:event	file:
VTY_SHELL	vty.h	/^  enum {VTY_TERM, VTY_FILE, VTY_SHELL, VTY_SHELL_SERV} type;$/;"	e	language:C++	enum:vty::__anon20
VTY_SHELL_SERV	vty.h	/^  enum {VTY_TERM, VTY_FILE, VTY_SHELL, VTY_SHELL_SERV} type;$/;"	e	language:C++	enum:vty::__anon20
VTY_TERM	vty.h	/^  enum {VTY_TERM, VTY_FILE, VTY_SHELL, VTY_SHELL_SERV} type;$/;"	e	language:C++	enum:vty::__anon20
VTY_TIMEOUT_DEFAULT	vty.h	131;"	d	language:C++
VTY_TIMEOUT_RESET	vty.c	/^  VTY_TIMEOUT_RESET,$/;"	e	language:C	enum:event	file:
VTY_WARN_EXPERIMENTAL	vty.h	220;"	d	language:C++
VTY_WRITE	vty.c	/^  VTY_WRITE,$/;"	e	language:C	enum:event	file:
Vvty_serv_thread	vty.c	/^static vector Vvty_serv_thread;$/;"	v	language:C	file:
WANT_OSPF_WRITE_FRAGMENT	zebra.h	336;"	d	language:C++
WIDE_CHAR_SUPPORT	regex.c	53;"	d	language:C	file:
WORDCHAR_P	regex.c	3743;"	d	language:C	file:
WORDS_BIGENDIAN	config.h	801;"	d	language:C++
WORK_QUEUE_DEFAULT_HOLD	workqueue.h	28;"	d	language:C++
WORK_QUEUE_MIN_GRANULARITY	workqueue.c	39;"	d	language:C	file:
WQ_ERROR	workqueue.h	/^  WQ_ERROR,             \/* Error, run error handler if provided *\/$/;"	e	language:C++	enum:__anon30
WQ_HYSTERESIS_FACTOR	workqueue.c	348;"	d	language:C	file:
WQ_HYSTERIS_FACTOR	workqueue.c	369;"	d	language:C	file:
WQ_QUEUE_BLOCKED	workqueue.h	/^  WQ_QUEUE_BLOCKED,	\/* Queue cant be processed at this time.$/;"	e	language:C++	enum:__anon30
WQ_REQUEUE	workqueue.h	/^  WQ_REQUEUE,		\/* requeue item, continue processing work queue *\/$/;"	e	language:C++	enum:__anon30
WQ_RETRY_LATER	workqueue.h	/^  WQ_RETRY_LATER,       \/* retry later, cease processing work queue *\/$/;"	e	language:C++	enum:__anon30
WQ_RETRY_NOW	workqueue.h	/^  WQ_RETRY_NOW,         \/* retry immediately *\/$/;"	e	language:C++	enum:__anon30
WQ_SUCCESS	workqueue.h	/^  WQ_SUCCESS = 0,$/;"	e	language:C++	enum:__anon30
WQ_UNPLUGGED	workqueue.h	50;"	d	language:C++
XCALLOC	memory.h	46;"	d	language:C++
XCALLOC	memory.h	59;"	d	language:C++
XFREE	memory.h	50;"	d	language:C++
XFREE	memory.h	61;"	d	language:C++
XMALLOC	memory.h	44;"	d	language:C++
XMALLOC	memory.h	58;"	d	language:C++
XREALLOC	memory.h	48;"	d	language:C++
XREALLOC	memory.h	60;"	d	language:C++
XSTRDUP	memory.h	55;"	d	language:C++
XSTRDUP	memory.h	65;"	d	language:C++
ZAPI_MESSAGE_DISTANCE	zclient.h	90;"	d	language:C++
ZAPI_MESSAGE_IFINDEX	zclient.h	89;"	d	language:C++
ZAPI_MESSAGE_METRIC	zclient.h	91;"	d	language:C++
ZAPI_MESSAGE_NEXTHOP	zclient.h	88;"	d	language:C++
ZCAP_BIND	privs.h	/^  ZCAP_BIND,$/;"	e	language:C++	enum:__anon33
ZCAP_CHROOT	privs.h	/^  ZCAP_CHROOT,$/;"	e	language:C++	enum:__anon33
ZCAP_DAC_OVERRIDE	privs.h	/^  ZCAP_DAC_OVERRIDE,$/;"	e	language:C++	enum:__anon33
ZCAP_FOWNER	privs.h	/^  ZCAP_FOWNER,$/;"	e	language:C++	enum:__anon33
ZCAP_MAX	privs.h	/^  ZCAP_MAX$/;"	e	language:C++	enum:__anon33
ZCAP_NET_ADMIN	privs.h	/^  ZCAP_NET_ADMIN,$/;"	e	language:C++	enum:__anon33
ZCAP_NET_RAW	privs.h	/^  ZCAP_NET_RAW,$/;"	e	language:C++	enum:__anon33
ZCAP_NICE	privs.h	/^  ZCAP_NICE,$/;"	e	language:C++	enum:__anon33
ZCAP_PTRACE	privs.h	/^  ZCAP_PTRACE,$/;"	e	language:C++	enum:__anon33
ZCAP_READ_SEARCH	privs.h	/^  ZCAP_READ_SEARCH,$/;"	e	language:C++	enum:__anon33
ZCAP_SETID	privs.h	/^  ZCAP_SETID,$/;"	e	language:C++	enum:__anon33
ZCAP_SYS_ADMIN	privs.h	/^  ZCAP_SYS_ADMIN,$/;"	e	language:C++	enum:__anon33
ZCLIENT_CONNECT	zclient.c	/^enum event {ZCLIENT_SCHEDULE, ZCLIENT_READ, ZCLIENT_CONNECT};$/;"	e	language:C	enum:event	file:
ZCLIENT_READ	zclient.c	/^enum event {ZCLIENT_SCHEDULE, ZCLIENT_READ, ZCLIENT_CONNECT};$/;"	e	language:C	enum:event	file:
ZCLIENT_SCHEDULE	zclient.c	/^enum event {ZCLIENT_SCHEDULE, ZCLIENT_READ, ZCLIENT_CONNECT};$/;"	e	language:C	enum:event	file:
ZCMSG_FIRSTHDR	zebra.h	262;"	d	language:C++
ZCMSG_FIRSTHDR	zebra.h	269;"	d	language:C++
ZEBRA_BUG_ADDRESS	version.h	42;"	d	language:C++
ZEBRA_CONNECT_DISTANCE_DEFAULT	zebra.h	503;"	d	language:C++
ZEBRA_EBGP_DISTANCE_DEFAULT	zebra.h	511;"	d	language:C++
ZEBRA_ERR_EPERM	zebra.h	455;"	d	language:C++
ZEBRA_ERR_KERNEL	zebra.h	457;"	d	language:C++
ZEBRA_ERR_NOERROR	zebra.h	452;"	d	language:C++
ZEBRA_ERR_RTEXIST	zebra.h	453;"	d	language:C++
ZEBRA_ERR_RTNOEXIST	zebra.h	456;"	d	language:C++
ZEBRA_ERR_RTUNREACH	zebra.h	454;"	d	language:C++
ZEBRA_FAMILY_IPV4	zebra.h	447;"	d	language:C++
ZEBRA_FAMILY_IPV6	zebra.h	448;"	d	language:C++
ZEBRA_FAMILY_MAX	zebra.h	449;"	d	language:C++
ZEBRA_FLAG_BLACKHOLE	zebra.h	462;"	d	language:C++
ZEBRA_FLAG_CHANGED	zebra.h	465;"	d	language:C++
ZEBRA_FLAG_IBGP	zebra.h	463;"	d	language:C++
ZEBRA_FLAG_INTERNAL	zebra.h	460;"	d	language:C++
ZEBRA_FLAG_REJECT	zebra.h	467;"	d	language:C++
ZEBRA_FLAG_SELECTED	zebra.h	464;"	d	language:C++
ZEBRA_FLAG_SELFROUTE	zebra.h	461;"	d	language:C++
ZEBRA_FLAG_STATIC	zebra.h	466;"	d	language:C++
ZEBRA_HEADER_MARKER	zebra.h	422;"	d	language:C++
ZEBRA_HEADER_SIZE	zclient.h	35;"	d	language:C++
ZEBRA_HELLO	zebra.h	414;"	d	language:C++
ZEBRA_IBGP_DISTANCE_DEFAULT	zebra.h	510;"	d	language:C++
ZEBRA_IFA_PEER	if.h	169;"	d	language:C++
ZEBRA_IFA_SECONDARY	if.h	168;"	d	language:C++
ZEBRA_IFC_CONFIGURED	if.h	153;"	d	language:C++
ZEBRA_IFC_QUEUED	if.h	154;"	d	language:C++
ZEBRA_IFC_REAL	if.h	152;"	d	language:C++
ZEBRA_INTERFACE_ACTIVE	if.h	90;"	d	language:C++
ZEBRA_INTERFACE_ADD	zebra.h	392;"	d	language:C++
ZEBRA_INTERFACE_ADDRESS_ADD	zebra.h	394;"	d	language:C++
ZEBRA_INTERFACE_ADDRESS_DELETE	zebra.h	395;"	d	language:C++
ZEBRA_INTERFACE_DELETE	zebra.h	393;"	d	language:C++
ZEBRA_INTERFACE_DOWN	zebra.h	397;"	d	language:C++
ZEBRA_INTERFACE_LINKDETECTION	if.h	92;"	d	language:C++
ZEBRA_INTERFACE_RENAME	zebra.h	410;"	d	language:C++
ZEBRA_INTERFACE_SUB	if.h	91;"	d	language:C++
ZEBRA_INTERFACE_UP	zebra.h	396;"	d	language:C++
ZEBRA_IPV4_IMPORT_LOOKUP	zebra.h	408;"	d	language:C++
ZEBRA_IPV4_NEXTHOP_LOOKUP	zebra.h	406;"	d	language:C++
ZEBRA_IPV4_NEXTHOP_LOOKUP_MRIB	zebra.h	415;"	d	language:C++
ZEBRA_IPV4_ROUTE_ADD	zebra.h	398;"	d	language:C++
ZEBRA_IPV4_ROUTE_DELETE	zebra.h	399;"	d	language:C++
ZEBRA_IPV6_IMPORT_LOOKUP	zebra.h	409;"	d	language:C++
ZEBRA_IPV6_NEXTHOP_LOOKUP	zebra.h	407;"	d	language:C++
ZEBRA_IPV6_ROUTE_ADD	zebra.h	400;"	d	language:C++
ZEBRA_IPV6_ROUTE_DELETE	zebra.h	401;"	d	language:C++
ZEBRA_ISIS_DISTANCE_DEFAULT	zebra.h	509;"	d	language:C++
ZEBRA_KERNEL_DISTANCE_DEFAULT	zebra.h	502;"	d	language:C++
ZEBRA_MAX_PACKET_SIZ	zclient.h	32;"	d	language:C++
ZEBRA_MESSAGE_MAX	zebra.h	416;"	d	language:C++
ZEBRA_NEXTHOP_BLACKHOLE	zebra.h	478;"	d	language:C++
ZEBRA_NEXTHOP_IFINDEX	zebra.h	470;"	d	language:C++
ZEBRA_NEXTHOP_IFNAME	zebra.h	471;"	d	language:C++
ZEBRA_NEXTHOP_IPV4	zebra.h	472;"	d	language:C++
ZEBRA_NEXTHOP_IPV4_IFINDEX	zebra.h	473;"	d	language:C++
ZEBRA_NEXTHOP_IPV4_IFNAME	zebra.h	474;"	d	language:C++
ZEBRA_NEXTHOP_IPV6	zebra.h	475;"	d	language:C++
ZEBRA_NEXTHOP_IPV6_IFINDEX	zebra.h	476;"	d	language:C++
ZEBRA_NEXTHOP_IPV6_IFNAME	zebra.h	477;"	d	language:C++
ZEBRA_NODE	command.h	/^  ZEBRA_NODE,			\/* zebra connection node. *\/$/;"	e	language:C++	enum:node_type
ZEBRA_NUM_OF	zebra.h	381;"	d	language:C++
ZEBRA_OSPF6_DISTANCE_DEFAULT	zebra.h	508;"	d	language:C++
ZEBRA_OSPF_DISTANCE_DEFAULT	zebra.h	507;"	d	language:C++
ZEBRA_PORT	zebra.h	389;"	d	language:C++
ZEBRA_REDISTRIBUTE_ADD	zebra.h	402;"	d	language:C++
ZEBRA_REDISTRIBUTE_DEFAULT_ADD	zebra.h	404;"	d	language:C++
ZEBRA_REDISTRIBUTE_DEFAULT_DELETE	zebra.h	405;"	d	language:C++
ZEBRA_REDISTRIBUTE_DELETE	zebra.h	403;"	d	language:C++
ZEBRA_RIPNG_DISTANCE_DEFAULT	zebra.h	506;"	d	language:C++
ZEBRA_RIP_DISTANCE_DEFAULT	zebra.h	505;"	d	language:C++
ZEBRA_ROUTER_ID_ADD	zebra.h	411;"	d	language:C++
ZEBRA_ROUTER_ID_DELETE	zebra.h	412;"	d	language:C++
ZEBRA_ROUTER_ID_UPDATE	zebra.h	413;"	d	language:C++
ZEBRA_ROUTE_BABEL	route_types.h	21;"	d	language:C++
ZEBRA_ROUTE_BGP	route_types.h	17;"	d	language:C++
ZEBRA_ROUTE_CONNECT	route_types.h	10;"	d	language:C++
ZEBRA_ROUTE_HSLS	route_types.h	19;"	d	language:C++
ZEBRA_ROUTE_ISIS	route_types.h	16;"	d	language:C++
ZEBRA_ROUTE_KERNEL	route_types.h	9;"	d	language:C++
ZEBRA_ROUTE_MAX	route_types.h	22;"	d	language:C++
ZEBRA_ROUTE_OLSR	route_types.h	20;"	d	language:C++
ZEBRA_ROUTE_OSPF	route_types.h	14;"	d	language:C++
ZEBRA_ROUTE_OSPF6	route_types.h	15;"	d	language:C++
ZEBRA_ROUTE_PIM	route_types.h	18;"	d	language:C++
ZEBRA_ROUTE_RIP	route_types.h	12;"	d	language:C++
ZEBRA_ROUTE_RIPNG	route_types.h	13;"	d	language:C++
ZEBRA_ROUTE_STATIC	route_types.h	11;"	d	language:C++
ZEBRA_ROUTE_SYSTEM	route_types.h	8;"	d	language:C++
ZEBRA_SERV_PATH	config.h	810;"	d	language:C++
ZEBRA_STATIC_DISTANCE_DEFAULT	zebra.h	504;"	d	language:C++
ZEBRA_VTYSH_PATH	config.h	813;"	d	language:C++
ZLOG_BABEL	log.h	/^  ZLOG_BABEL,$/;"	e	language:C++	enum:__anon38
ZLOG_BGP	log.h	/^  ZLOG_BGP,$/;"	e	language:C++	enum:__anon38
ZLOG_DEFAULT	log.h	/^  ZLOG_DEFAULT,$/;"	e	language:C++	enum:__anon38
ZLOG_DEST_FILE	log.h	/^  ZLOG_DEST_FILE$/;"	e	language:C++	enum:__anon39
ZLOG_DEST_MONITOR	log.h	/^  ZLOG_DEST_MONITOR,$/;"	e	language:C++	enum:__anon39
ZLOG_DEST_STDOUT	log.h	/^  ZLOG_DEST_STDOUT,$/;"	e	language:C++	enum:__anon39
ZLOG_DEST_SYSLOG	log.h	/^  ZLOG_DEST_SYSLOG = 0,$/;"	e	language:C++	enum:__anon39
ZLOG_DISABLED	log.h	62;"	d	language:C++
ZLOG_FUNC	log.c	/^ZLOG_FUNC(zlog_err, LOG_ERR)$/;"	f	language:C
ZLOG_FUNC	log.c	598;"	d	language:C	file:
ZLOG_FUNC	log.c	618;"	d	language:C	file:
ZLOG_ISIS	log.h	/^  ZLOG_ISIS,$/;"	e	language:C++	enum:__anon38
ZLOG_MASC	log.h	/^  ZLOG_MASC$/;"	e	language:C++	enum:__anon38
ZLOG_NONE	log.h	/^  ZLOG_NONE,$/;"	e	language:C++	enum:__anon38
ZLOG_NUM_DESTS	log.h	71;"	d	language:C++
ZLOG_OSPF	log.h	/^  ZLOG_OSPF,$/;"	e	language:C++	enum:__anon38
ZLOG_OSPF6	log.h	/^  ZLOG_OSPF6,$/;"	e	language:C++	enum:__anon38
ZLOG_PIM	log.h	/^  ZLOG_PIM,$/;"	e	language:C++	enum:__anon38
ZLOG_RIP	log.h	/^  ZLOG_RIP,$/;"	e	language:C++	enum:__anon38
ZLOG_RIPNG	log.h	/^  ZLOG_RIPNG,$/;"	e	language:C++	enum:__anon38
ZLOG_ZEBRA	log.h	/^  ZLOG_ZEBRA,$/;"	e	language:C++	enum:__anon38
ZPRIVS_LOWER	privs.h	/^  ZPRIVS_LOWER,$/;"	e	language:C++	enum:__anon35
ZPRIVS_LOWERED	privs.h	/^  ZPRIVS_LOWERED,$/;"	e	language:C++	enum:__anon34
ZPRIVS_RAISE	privs.h	/^  ZPRIVS_RAISE,$/;"	e	language:C++	enum:__anon35
ZPRIVS_RAISED	privs.h	/^  ZPRIVS_RAISED,$/;"	e	language:C++	enum:__anon34
ZPRIVS_UNKNOWN	privs.h	/^  ZPRIVS_UNKNOWN,$/;"	e	language:C++	enum:__anon34
ZSERV_VERSION	zclient.h	101;"	d	language:C++
_	getopt.c	89;"	d	language:C	file:
_	getopt.c	91;"	d	language:C	file:
_ALL_SOURCE	config.h	768;"	d	language:C++
_CMSG_DATA_ALIGN	zebra.h	284;"	d	language:C++
_CMSG_HDR_ALIGN	zebra.h	288;"	d	language:C++
_GETOPT_H	getopt.h	23;"	d	language:C++
_GNU_SOURCE	config.h	772;"	d	language:C++
_GNU_SOURCE	regex.c	27;"	d	language:C	file:
_GNU_SOURCE	regex.c	28;"	d	language:C	file:
_LIBOSPFD_H	libospf.h	24;"	d	language:C++
_LIBZEBRA_MD5_H_	md5.h	43;"	d	language:C++
_NO_PROTO	getopt.c	30;"	d	language:C	file:
_POSIX_PTHREAD_SEMANTICS	config.h	776;"	d	language:C++
_QUAGGA_ASSERT_H	zassert.h	23;"	d	language:C++
_QUAGGA_JHASH_H	jhash.h	21;"	d	language:C++
_QUAGGA_MEMTYPES_H	memtypes.h	5;"	d	language:C++
_QUAGGA_PLIST_H	plist.h	24;"	d	language:C++
_QUAGGA_ROUTE_TYPES_H	route_types.h	5;"	d	language:C++
_QUAGGA_SIGNAL_H	sigevent.h	25;"	d	language:C++
_QUAGGA_WORK_QUEUE_H	workqueue.h	25;"	d	language:C++
_REGEX_H	regex-gnu.h	24;"	d	language:C++
_RE_ARGS	regex-gnu.h	434;"	d	language:C++
_RE_ARGS	regex-gnu.h	438;"	d	language:C++
_RE_SYNTAX_POSIX_COMMON	regex-gnu.h	210;"	d	language:C++
_Restrict	config.h	859;"	d	language:C++
_SYS_QUEUE_H_	queue.h	34;"	d	language:C++
_TANDEM_SOURCE	config.h	780;"	d	language:C++
_XPG4_2	zebra.h	29;"	d	language:C++
_ZEBRA_BUFFER_H	buffer.h	24;"	d	language:C++
_ZEBRA_COMMAND_H	command.h	24;"	d	language:C++
_ZEBRA_DISTRIBUTE_H	distribute.h	23;"	d	language:C++
_ZEBRA_FILTER_H	filter.h	24;"	d	language:C++
_ZEBRA_H	zebra.h	22;"	d	language:C++
_ZEBRA_HASH_H	hash.h	22;"	d	language:C++
_ZEBRA_IF_H	if.h	22;"	d	language:C++
_ZEBRA_IF_RMAP_H	if_rmap.h	23;"	d	language:C++
_ZEBRA_KEYCHAIN_H	keychain.h	23;"	d	language:C++
_ZEBRA_LINKLIST_H	linklist.h	23;"	d	language:C++
_ZEBRA_LOG_H	log.h	24;"	d	language:C++
_ZEBRA_MEMORY_H	memory.h	22;"	d	language:C++
_ZEBRA_NETWORK_H	network.h	24;"	d	language:C++
_ZEBRA_PQUEUE_H	pqueue.h	22;"	d	language:C++
_ZEBRA_PREFIX_H	prefix.h	24;"	d	language:C++
_ZEBRA_PRIVS_H	privs.h	25;"	d	language:C++
_ZEBRA_ROUTEMAP_H	routemap.h	23;"	d	language:C++
_ZEBRA_SNMP_H	smux.h	23;"	d	language:C++
_ZEBRA_SOCKOPT_H	sockopt.h	23;"	d	language:C++
_ZEBRA_SOCKUNION_H	sockunion.h	24;"	d	language:C++
_ZEBRA_STREAM_H	stream.h	24;"	d	language:C++
_ZEBRA_STR_H	str.h	6;"	d	language:C++
_ZEBRA_TABLE_H	table.h	24;"	d	language:C++
_ZEBRA_THREAD_H	thread.h	23;"	d	language:C++
_ZEBRA_VECTOR_H	vector.h	24;"	d	language:C++
_ZEBRA_VERSION_H	version.h	25;"	d	language:C++
_ZEBRA_VTY_H	vty.h	22;"	d	language:C++
_ZEBRA_ZCLIENT_H	zclient.h	23;"	d	language:C++
__APPLE_USE_RFC_3542	zebra.h	147;"	d	language:C++
__ASSERT_FUNCTION	zassert.h	30;"	d	language:C++
__ASSERT_FUNCTION	zassert.h	32;"	d	language:C++
__ASSERT_FUNCTION	zassert.h	34;"	d	language:C++
__EXTENSIONS__	config.h	784;"	d	language:C++
__EXTENSIONS__	zebra.h	30;"	d	language:C++
__USE_GNU	sigevent.c	32;"	d	language:C	file:
__attribute__	zebra.h	250;"	d	language:C++
__getopt_initialized	getopt.c	/^int __getopt_initialized = 0;$/;"	v	language:C
__jhash_mix	jhash.c	27;"	d	language:C	file:
__restrict__	config.h	860;"	d	language:C++
_getopt_initialize	getopt.c	/^_getopt_initialize (argc, argv, optstring)$/;"	f	language:C	file:
_getopt_internal	getopt.c	/^_getopt_internal (argc, argv, optstring, longopts, longind, long_only)$/;"	f	language:C
_pset	privs.c	/^struct _pset {$/;"	s	language:C	file:
_vector	vector.h	/^struct _vector $/;"	s	language:C++
_work_queues	workqueue.c	/^static struct list _work_queues;$/;"	v	language:C	typeref:struct:list	file:
_zlog_assert_failed	log.c	/^_zlog_assert_failed (const char *assertion, const char *file,$/;"	f	language:C	signature:(const char *assertion, const char *file, unsigned int line, const char *function)
_zprivs_t	privs.c	/^static struct _zprivs_t$/;"	s	language:C	file:
accept	keychain.h	/^  struct key_range accept;$/;"	m	language:C++	struct:key	typeref:struct:key::key_range
access_ipv6_node	filter.c	/^static struct cmd_node access_ipv6_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
access_list	filter.h	/^struct access_list$/;"	s	language:C++
access_list_add_hook	filter.c	/^access_list_add_hook (void (*func) (struct access_list *access))$/;"	f	language:C	signature:(void (*func) (struct access_list *access))
access_list_apply	filter.c	/^access_list_apply (struct access_list *access, void *object)$/;"	f	language:C	signature:(struct access_list *access, void *object)
access_list_delete	filter.c	/^access_list_delete (struct access_list *access)$/;"	f	language:C	file:	signature:(struct access_list *access)
access_list_delete_hook	filter.c	/^access_list_delete_hook (void (*func) (struct access_list *access))$/;"	f	language:C	signature:(void (*func) (struct access_list *access))
access_list_empty	filter.c	/^access_list_empty (struct access_list *access)$/;"	f	language:C	file:	signature:(struct access_list *access)
access_list_filter_add	filter.c	/^access_list_filter_add (struct access_list *access, struct filter *filter)$/;"	f	language:C	file:	signature:(struct access_list *access, struct filter *filter)
access_list_filter_delete	filter.c	/^access_list_filter_delete (struct access_list *access, struct filter *filter)$/;"	f	language:C	file:	signature:(struct access_list *access, struct filter *filter)
access_list_free	filter.c	/^access_list_free (struct access_list *access)$/;"	f	language:C	file:	signature:(struct access_list *access)
access_list_get	filter.c	/^access_list_get (afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(afi_t afi, const char *name)
access_list_init	filter.c	/^access_list_init ()$/;"	f	language:C
access_list_init_ipv4	filter.c	/^access_list_init_ipv4 (void)$/;"	f	language:C	file:	signature:(void)
access_list_init_ipv6	filter.c	/^access_list_init_ipv6 (void)$/;"	f	language:C	file:	signature:(void)
access_list_insert	filter.c	/^access_list_insert (afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(afi_t afi, const char *name)
access_list_list	filter.c	/^struct access_list_list$/;"	s	language:C	file:
access_list_lookup	filter.c	/^access_list_lookup (afi_t afi, const char *name)$/;"	f	language:C	signature:(afi_t afi, const char *name)
access_list_new	filter.c	/^access_list_new (void)$/;"	f	language:C	file:	signature:(void)
access_list_reset	filter.c	/^access_list_reset ()$/;"	f	language:C
access_list_reset_ipv4	filter.c	/^access_list_reset_ipv4 (void)$/;"	f	language:C	file:	signature:(void)
access_list_reset_ipv6	filter.c	/^access_list_reset_ipv6 (void)$/;"	f	language:C	file:	signature:(void)
access_master	filter.c	/^struct access_master$/;"	s	language:C	file:
access_master_get	filter.c	/^access_master_get (afi_t afi)$/;"	f	language:C	file:	signature:(afi_t afi)
access_master_ipv4	filter.c	/^static struct access_master access_master_ipv4 = $/;"	v	language:C	typeref:struct:access_master	file:
access_master_ipv6	filter.c	/^static struct access_master access_master_ipv6 = $/;"	v	language:C	typeref:struct:access_master	file:
access_node	filter.c	/^static struct cmd_node access_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
access_type	filter.h	/^enum access_type$/;"	g	language:C++
active	vector.h	/^  unsigned int active;		\/* number of active slots *\/$/;"	m	language:C++	struct:_vector
active_reg_t	regex-gnu.h	/^typedef unsigned long int active_reg_t;$/;"	t	language:C++
add_hook	filter.c	/^  void (*add_hook) (struct access_list *);$/;"	m	language:C	struct:access_master	file:
add_hook	plist.c	/^  void (*add_hook) (struct prefix_list *);$/;"	m	language:C	struct:prefix_master	file:
add_hook	routemap.c	/^  void (*add_hook) (const char *);$/;"	m	language:C	struct:route_map_list	file:
add_type	thread.h	/^  thread_type add_type;		\/* thread type *\/$/;"	m	language:C++	struct:thread
addr	filter.c	/^  struct in_addr addr;$/;"	m	language:C	struct:filter_cisco	typeref:struct:filter_cisco::in_addr	file:
addr_mask	filter.c	/^  struct in_addr addr_mask;$/;"	m	language:C	struct:filter_cisco	typeref:struct:filter_cisco::in_addr	file:
address	if.h	/^  struct prefix *address;$/;"	m	language:C++	struct:connected	typeref:struct:connected::prefix
address	vty.h	/^  char address[SU_ADDRSTRLEN];$/;"	m	language:C++	struct:vty
adv_router	prefix.h	/^      struct in_addr adv_router;$/;"	m	language:C++	struct:prefix::__anon14::__anon15	typeref:struct:prefix::__anon14::__anon15::in_addr
adv_router	prefix.h	/^  struct in_addr adv_router;$/;"	m	language:C++	struct:prefix_ls	typeref:struct:prefix_ls::in_addr
advanced	command.h	/^  int advanced;$/;"	m	language:C++	struct:host
afi2family	prefix.c	/^afi2family (afi_t afi)$/;"	f	language:C	signature:(afi_t afi)
afi_t	zebra.h	/^typedef u_int16_t afi_t;$/;"	t	language:C++
after_dot	regex.c	/^  after_dot,	\/* Succeeds if after point.  *\/$/;"	e	language:C	enum:__anon22	file:
agentx_enabled	agentx.c	/^int agentx_enabled = 0;$/;"	v	language:C
agentx_log_callback	agentx.c	/^agentx_log_callback(int major, int minor,$/;"	f	language:C	file:	signature:(int major, int minor, void *serverarg, void *clientarg)
agentx_node	agentx.c	/^static struct cmd_node agentx_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
all_digit	prefix.c	/^all_digit (const char *str)$/;"	f	language:C	signature:(const char *str)
alloc	memory.c	/^  long alloc;$/;"	m	language:C	struct:__anon11	file:
alloc	memory.c	/^  long alloc;$/;"	m	language:C	struct:__anon12	file:
alloc	thread.h	/^  unsigned long alloc;$/;"	m	language:C++	struct:thread_master
alloc_dec	memory.c	/^alloc_dec (int type)$/;"	f	language:C	file:	signature:(int type)
alloc_inc	memory.c	/^alloc_inc (int type)$/;"	f	language:C	file:	signature:(int type)
alloca	regex.c	306;"	d	language:C	file:
allocated	regex-gnu.h	/^  unsigned long int allocated;$/;"	m	language:C++	struct:re_pattern_buffer
alloced	vector.h	/^  unsigned int alloced;		\/* number of allocated slot *\/$/;"	m	language:C++	struct:_vector
already_rendered	log.h	/^   int already_rendered; \/* should be initialized to 0 *\/$/;"	m	language:C++	struct:timestamp_control
alt_match_null_string_p	regex.c	/^alt_match_null_string_p (p, end, reg_info)$/;"	f	language:C	file:
any	plist.c	/^  int any;$/;"	m	language:C	struct:prefix_list_entry	file:
anychar	regex.c	/^  anychar,$/;"	e	language:C	enum:__anon22	file:
apply_classful_mask_ipv4	prefix.c	/^void apply_classful_mask_ipv4 (struct prefix_ipv4 *p)$/;"	f	language:C	signature:(struct prefix_ipv4 *p)
apply_mask	prefix.c	/^apply_mask (struct prefix *p)$/;"	f	language:C	signature:(struct prefix *p)
apply_mask_ipv4	prefix.c	/^apply_mask_ipv4 (struct prefix_ipv4 *p)$/;"	f	language:C	signature:(struct prefix_ipv4 *p)
apply_mask_ipv6	prefix.c	/^apply_mask_ipv6 (struct prefix_ipv6 *p)$/;"	f	language:C	signature:(struct prefix_ipv6 *p)
arg	thread.h	/^  void *arg;			\/* event argument *\/$/;"	m	language:C++	struct:thread
argv_concat	command.c	/^argv_concat (const char **argv, int argc, int shift)$/;"	f	language:C	signature:(const char **argv, int argc, int shift)
array	pqueue.h	/^  void **array;$/;"	m	language:C++	struct:pqueue
array_size	memory.h	24;"	d	language:C++
array_size	pqueue.h	/^  int array_size;$/;"	m	language:C++	struct:pqueue
assert	regex.c	968;"	d	language:C	file:
assert	regex.c	969;"	d	language:C	file:
assert	zassert.h	41;"	d	language:C++
assert	zassert.h	42;"	d	language:C++
at_begline_loc_p	regex.c	/^at_begline_loc_p (pattern, p, syntax)$/;"	f	language:C	file:
at_dot	regex.c	/^  at_dot,	\/* Succeeds if at point.  *\/$/;"	e	language:C	enum:__anon22	file:
at_endline_loc_p	regex.c	/^at_endline_loc_p (p, pend, syntax)$/;"	f	language:C	file:
attr	command.h	/^  u_char attr;			\/* Command attributes *\/$/;"	m	language:C++	struct:cmd_element
auth_enable_node	command.c	/^static struct cmd_node auth_enable_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
auth_node	command.c	/^static struct cmd_node auth_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
avail	regex.c	/^  unsigned avail;			\/* Offset of next open position.  *\/$/;"	m	language:C	struct:__anon24	file:
avail	regex.c	/^  unsigned avail;			\/* Offset of next open position.  *\/$/;"	m	language:C	struct:__anon28	file:
avail	regex.c	/^  unsigned long int avail;		\/* Offset of next open position.  *\/$/;"	m	language:C	struct:__anon23	file:
background	thread.h	/^  struct pqueue *background;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::pqueue
bandwidth	if.h	/^  unsigned int bandwidth;$/;"	m	language:C++	struct:interface
bcmp_translate	regex.c	/^bcmp_translate (s1, s2, len, translate)$/;"	f	language:C	file:
before_dot	regex.c	/^  ,before_dot,	\/* Succeeds if before point.  *\/$/;"	e	language:C	enum:__anon22	file:
begalt_offset	regex.c	/^  pattern_offset_t begalt_offset;$/;"	m	language:C	struct:__anon27	file:
begbuf	regex.c	/^  begbuf,$/;"	e	language:C	enum:__anon22	file:
begline	regex.c	/^  begline,$/;"	e	language:C	enum:__anon22	file:
best	workqueue.h	/^    unsigned int best;$/;"	m	language:C++	struct:work_queue::__anon32
best_regend	regex.c	/^static const char **best_regstart, **best_regend;$/;"	v	language:C	file:
best_regstart	regex.c	/^static const char **best_regstart, **best_regend;$/;"	v	language:C	file:
bits	regex.c	/^  } bits;$/;"	m	language:C	union:__anon25	typeref:struct:__anon25::__anon26	file:
boolean	regex.c	/^typedef char boolean;$/;"	t	language:C	file:
btowc	regex.c	85;"	d	language:C	file:
buf	log.h	/^   char buf[40];	\/* will contain the rendered timestamp *\/$/;"	m	language:C++	struct:timestamp_control
buf	vty.h	/^  char *buf;$/;"	m	language:C++	struct:vty
buffer	buffer.c	/^struct buffer$/;"	s	language:C	file:
buffer	regex-gnu.h	/^  unsigned char *buffer;$/;"	m	language:C++	struct:re_pattern_buffer
buffer_add	buffer.c	/^buffer_add (struct buffer *b)$/;"	f	language:C	file:	signature:(struct buffer *b)
buffer_data	buffer.c	/^struct buffer_data$/;"	s	language:C	file:
buffer_empty	buffer.c	/^buffer_empty (struct buffer *b)$/;"	f	language:C	signature:(struct buffer *b)
buffer_flush_all	buffer.c	/^buffer_flush_all (struct buffer *b, int fd)$/;"	f	language:C	signature:(struct buffer *b, int fd)
buffer_flush_available	buffer.c	/^buffer_flush_available(struct buffer *b, int fd)$/;"	f	language:C	signature:(struct buffer *b, int fd)
buffer_flush_window	buffer.c	/^buffer_flush_window (struct buffer *b, int fd, int width, int height, $/;"	f	language:C	signature:(struct buffer *b, int fd, int width, int height, int erase_flag, int no_more_flag)
buffer_free	buffer.c	/^buffer_free (struct buffer *b)$/;"	f	language:C	signature:(struct buffer *b)
buffer_getstr	buffer.c	/^buffer_getstr (struct buffer *b)$/;"	f	language:C	signature:(struct buffer *b)
buffer_new	buffer.c	/^buffer_new (size_t size)$/;"	f	language:C	signature:(size_t size)
buffer_put	buffer.c	/^buffer_put(struct buffer *b, const void *p, size_t size)$/;"	f	language:C	signature:(struct buffer *b, const void *p, size_t size)
buffer_putc	buffer.c	/^buffer_putc (struct buffer *b, u_char c)$/;"	f	language:C	signature:(struct buffer *b, u_char c)
buffer_putstr	buffer.c	/^buffer_putstr (struct buffer *b, const char *c)$/;"	f	language:C	signature:(struct buffer *b, const char *c)
buffer_reset	buffer.c	/^buffer_reset (struct buffer *b)$/;"	f	language:C	signature:(struct buffer *b)
buffer_status_t	buffer.h	/^  } buffer_status_t;$/;"	t	language:C++	typeref:enum:__anon13
buffer_write	buffer.c	/^buffer_write(struct buffer *b, int fd, const void *p, size_t size)$/;"	f	language:C	signature:(struct buffer *b, int fd, const void *p, size_t size)
bzero	regex.c	141;"	d	language:C	file:
bzero	regex.c	143;"	d	language:C	file:
c_calloc	memory.c	/^  unsigned long c_calloc;$/;"	m	language:C	struct:__anon11	file:
c_malloc	memory.c	/^  unsigned long c_malloc;$/;"	m	language:C	struct:__anon11	file:
c_strdup	memory.c	/^  unsigned long c_strdup;$/;"	m	language:C	struct:__anon11	file:
can_be_null	regex-gnu.h	/^  unsigned can_be_null : 1;$/;"	m	language:C++	struct:re_pattern_buffer
cap_map	privs.c	/^} cap_map [ZCAP_MAX] =$/;"	v	language:C	typeref:struct:__anon16	file:
cap_num_i	privs.h	/^  int cap_num_i;                    $/;"	m	language:C++	struct:zebra_privs_t
cap_num_p	privs.h	/^  int cap_num_p;                      \/* number of caps in arrays *\/$/;"	m	language:C++	struct:zebra_privs_t
caps	privs.c	/^  cap_value_t *caps;$/;"	m	language:C	struct:_pset	file:
caps	privs.c	/^  pstorage_t caps;		\/* working storage        *\/$/;"	m	language:C	struct:_zprivs_t	file:
caps_i	privs.h	/^  zebra_capabilities_t *caps_i;       \/* caps to allow inheritance of *\/$/;"	m	language:C++	struct:zebra_privs_t
caps_p	privs.h	/^  zebra_capabilities_t *caps_p;       \/* caps required for operation *\/$/;"	m	language:C++	struct:zebra_privs_t
caught	sigevent.c	/^  volatile sig_atomic_t caught;$/;"	m	language:C	struct:quagga_sigevent_master_t	file:
caught	sigevent.h	/^  volatile sig_atomic_t caught;   \/* private member   *\/$/;"	m	language:C++	struct:quagga_signal_t
cfilter	filter.c	/^      struct filter_cisco cfilter;$/;"	m	language:C	union:filter::__anon18	typeref:struct:filter::__anon18::filter_cisco	file:
change	privs.h	/^    (*change) (zebra_privs_ops_t);    \/* change privileges, 0 on success *\/$/;"	m	language:C++	struct:zebra_privs_t
charset	regex.c	/^  charset,$/;"	e	language:C	enum:__anon22	file:
charset_not	regex.c	/^  charset_not,$/;"	e	language:C	enum:__anon22	file:
chr	route_types.h	/^  char chr;$/;"	m	language:C++	struct:zebra_desc_table
cisco	filter.c	/^  int cisco;$/;"	m	language:C	struct:filter	file:
closezlog	log.c	/^closezlog (struct zlog *zl)$/;"	f	language:C	signature:(struct zlog *zl)
cmd	command.c	/^  struct cmd_element *cmd; \/* The command element the matcher is using *\/$/;"	m	language:C	struct:cmd_matcher	typeref:struct:cmd_matcher::cmd_element	file:
cmd	command.h	/^  char *cmd;                    \/* Command string. *\/$/;"	m	language:C++	struct:cmd_token
cmd	routemap.c	/^  struct route_map_rule_cmd *cmd;$/;"	m	language:C	struct:route_map_rule	typeref:struct:route_map_rule::route_map_rule_cmd	file:
cmd_complete_cmp	command.c	/^cmd_complete_cmp(const void *a, const void *b)$/;"	f	language:C	file:	signature:(const void *a, const void *b)
cmd_complete_command	command.c	/^cmd_complete_command (vector vline, struct vty *vty, int *status)$/;"	f	language:C	signature:(vector vline, struct vty *vty, int *status)
cmd_complete_command_real	command.c	/^cmd_complete_command_real (vector vline, struct vty *vty, int *status)$/;"	f	language:C	file:	signature:(vector vline, struct vty *vty, int *status)
cmd_complete_sort	command.c	/^cmd_complete_sort(vector matchvec)$/;"	f	language:C	file:	signature:(vector matchvec)
cmd_describe_cmp	command.c	/^cmd_describe_cmp(const void *a, const void *b)$/;"	f	language:C	file:	signature:(const void *a, const void *b)
cmd_describe_command	command.c	/^cmd_describe_command (vector vline, struct vty *vty, int *status)$/;"	f	language:C	signature:(vector vline, struct vty *vty, int *status)
cmd_describe_command_real	command.c	/^cmd_describe_command_real (vector vline, struct vty *vty, int *status)$/;"	f	language:C	file:	signature:(vector vline, struct vty *vty, int *status)
cmd_describe_sort	command.c	/^cmd_describe_sort(vector matchvec)$/;"	f	language:C	file:	signature:(vector matchvec)
cmd_element	command.h	/^struct cmd_element $/;"	s	language:C++
cmd_element_match	command.c	/^cmd_element_match(struct cmd_element *cmd_element,$/;"	f	language:C	file:	signature:(struct cmd_element *cmd_element, enum filter_type filter, vector vline, unsigned int index, enum match_type *match_type, vector *match, int *argc, const char **argv)
cmd_entry_function	command.c	/^cmd_entry_function (const char *src, const char *dst)$/;"	f	language:C	file:	signature:(const char *src, const char *dst)
cmd_entry_function_desc	command.c	/^cmd_entry_function_desc (const char *src, const char *dst)$/;"	f	language:C	file:	signature:(const char *src, const char *dst)
cmd_execute_command	command.c	/^cmd_execute_command (vector vline, struct vty *vty, struct cmd_element **cmd,$/;"	f	language:C	signature:(vector vline, struct vty *vty, struct cmd_element **cmd, int vtysh)
cmd_execute_command_real	command.c	/^cmd_execute_command_real (vector vline,$/;"	f	language:C	file:	signature:(vector vline, enum filter_type filter, struct vty *vty, struct cmd_element **cmd)
cmd_execute_command_strict	command.c	/^cmd_execute_command_strict (vector vline, struct vty *vty,$/;"	f	language:C	signature:(vector vline, struct vty *vty, struct cmd_element **cmd)
cmd_free_strvec	command.c	/^cmd_free_strvec (vector v)$/;"	f	language:C	signature:(vector v)
cmd_init	command.c	/^cmd_init (int terminal)$/;"	f	language:C	signature:(int terminal)
cmd_ipv4_match	command.c	/^cmd_ipv4_match (const char *str)$/;"	f	language:C	file:	signature:(const char *str)
cmd_ipv4_prefix_match	command.c	/^cmd_ipv4_prefix_match (const char *str)$/;"	f	language:C	file:	signature:(const char *str)
cmd_ipv6_match	command.c	/^cmd_ipv6_match (const char *str)$/;"	f	language:C	file:	signature:(const char *str)
cmd_ipv6_prefix_match	command.c	/^cmd_ipv6_prefix_match (const char *str)$/;"	f	language:C	file:	signature:(const char *str)
cmd_is_complete	command.c	/^cmd_is_complete(struct cmd_element *cmd_element,$/;"	f	language:C	file:	signature:(struct cmd_element *cmd_element, vector vline)
cmd_lcd	command.c	/^cmd_lcd (char **matched)$/;"	f	language:C	file:	signature:(char **matched)
cmd_make_strvec	command.c	/^cmd_make_strvec (const char *string)$/;"	f	language:C	signature:(const char *string)
cmd_matcher	command.c	/^struct cmd_matcher$/;"	s	language:C	file:
cmd_matcher_build_keyword_args	command.c	/^cmd_matcher_build_keyword_args(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_token *token, int *argc, const char **argv, vector keyword_args_vector)
cmd_matcher_get_word	command.c	/^cmd_matcher_get_word(struct cmd_matcher *matcher)$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher)
cmd_matcher_init	command.c	/^cmd_matcher_init(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_element *cmd, enum filter_type filter, vector vline, unsigned int index, enum match_type *match_type, vector *match)
cmd_matcher_match_keyword	command.c	/^cmd_matcher_match_keyword(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_token *token, int *argc, const char **argv)
cmd_matcher_match_multiple	command.c	/^cmd_matcher_match_multiple(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_token *token, int *argc, const char **argv)
cmd_matcher_match_terminal	command.c	/^cmd_matcher_match_terminal(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_token *token, int *argc, const char **argv)
cmd_matcher_read_keywords	command.c	/^cmd_matcher_read_keywords(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, struct cmd_token *token, vector args_vector)
cmd_matcher_record_match	command.c	/^cmd_matcher_record_match(struct cmd_matcher *matcher,$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher, enum match_type match_type, struct cmd_token *token)
cmd_matcher_words_left	command.c	/^cmd_matcher_words_left(struct cmd_matcher *matcher)$/;"	f	language:C	file:	signature:(struct cmd_matcher *matcher)
cmd_matches_free	command.c	/^cmd_matches_free(vector *matches)$/;"	f	language:C	file:	signature:(vector *matches)
cmd_node	command.h	/^struct cmd_node $/;"	s	language:C++
cmd_node_vector	command.c	/^cmd_node_vector (vector v, enum node_type ntype)$/;"	f	language:C	file:	signature:(vector v, enum node_type ntype)
cmd_parse	command.c	/^cmd_parse(struct cmd_element *cmd_element,$/;"	f	language:C	file:	signature:(struct cmd_element *cmd_element, vector vline, int *argc, const char **argv)
cmd_parse_format	command.c	/^cmd_parse_format(const char *string, const char *descstr)$/;"	f	language:C	file:	signature:(const char *string, const char *descstr)
cmd_prompt	command.c	/^cmd_prompt (enum node_type node)$/;"	f	language:C	signature:(enum node_type node)
cmd_range_match	command.c	/^cmd_range_match (const char *range, const char *str)$/;"	f	language:C	file:	signature:(const char *range, const char *str)
cmd_terminate	command.c	/^cmd_terminate ()$/;"	f	language:C
cmd_terminate_element	command.c	/^cmd_terminate_element(struct cmd_element *cmd)$/;"	f	language:C	file:	signature:(struct cmd_element *cmd)
cmd_terminate_token	command.c	/^cmd_terminate_token(struct cmd_token *token)$/;"	f	language:C	file:	signature:(struct cmd_token *token)
cmd_token	command.h	/^struct cmd_token$/;"	s	language:C++
cmd_token_type	command.h	/^enum cmd_token_type$/;"	g	language:C++
cmd_try_do_shortcut	command.c	/^cmd_try_do_shortcut (enum node_type node, char* first_word) {$/;"	f	language:C	file:	signature:(enum node_type node, char* first_word)
cmd_unique_string	command.c	/^cmd_unique_string (vector v, const char *str)$/;"	f	language:C	file:	signature:(vector v, const char *str)
cmd_vector	command.h	/^  vector cmd_vector;	$/;"	m	language:C++	struct:cmd_node
cmd_vector_filter	command.c	/^cmd_vector_filter(vector commands,$/;"	f	language:C	file:	signature:(vector commands, enum filter_type filter, vector vline, unsigned int index, enum match_type *match_type, vector *matches)
cmd_word_match	command.c	/^cmd_word_match(struct cmd_token *token,$/;"	f	language:C	file:	signature:(struct cmd_token *token, enum filter_type filter, const char *word)
cmdvec	command.c	/^vector cmdvec = NULL;$/;"	v	language:C
cmp	linklist.h	/^  int (*cmp) (void *val1, void *val2);$/;"	m	language:C++	struct:list
cmp	pqueue.h	/^  int (*cmp) (void *, void *);$/;"	m	language:C++	struct:pqueue
collisions	if.h	/^  unsigned long collisions;$/;"	m	language:C++	struct:if_stats
command	zclient.h	/^  uint16_t command;$/;"	m	language:C++	struct:zserv_header
command_cr	command.c	/^char *command_cr = NULL;$/;"	v	language:C
command_types	log.c	/^static const struct zebra_desc_table command_types[] = {$/;"	v	language:C	typeref:struct:zebra_desc_table	file:
common_op_match_null_string_p	regex.c	/^common_op_match_null_string_p (p, end, reg_info)$/;"	f	language:C	file:
compile_range	regex.c	/^compile_range (p_ptr, pend, translate, syntax, b)$/;"	f	language:C	file:
compile_stack_elt_t	regex.c	/^} compile_stack_elt_t;$/;"	t	language:C	typeref:struct:__anon27	file:
compile_stack_type	regex.c	/^} compile_stack_type;$/;"	t	language:C	typeref:struct:__anon28	file:
completion_func	workqueue.h	/^    void (*completion_func) (struct work_queue *);$/;"	m	language:C++	struct:work_queue::__anon31
conf	if.h	/^  u_char conf;$/;"	m	language:C++	struct:connected
config	command.h	/^  char *config;$/;"	m	language:C++	struct:host
config	vty.h	/^  int config;$/;"	m	language:C++	struct:vty
config_from_file	command.c	/^config_from_file (struct vty *vty, FILE *fp, unsigned int *line_num)$/;"	f	language:C	signature:(struct vty *vty, FILE *fp, unsigned int *line_num)
config_node	command.c	/^static struct cmd_node config_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
config_show_distribute	distribute.c	/^config_show_distribute (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
config_write_access	filter.c	/^config_write_access (struct vty *vty, afi_t afi)$/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi)
config_write_access_cisco	filter.c	/^config_write_access_cisco (struct vty *vty, struct filter *mfilter)$/;"	f	language:C	signature:(struct vty *vty, struct filter *mfilter)
config_write_access_ipv4	filter.c	/^config_write_access_ipv4 (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_access_ipv6	filter.c	/^config_write_access_ipv6 (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_access_zebra	filter.c	/^config_write_access_zebra (struct vty *vty, struct filter *mfilter)$/;"	f	language:C	signature:(struct vty *vty, struct filter *mfilter)
config_write_agentx	agentx.c	/^config_write_agentx (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_distribute	distribute.c	/^config_write_distribute (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
config_write_host	command.c	/^config_write_host (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_if_rmap	if_rmap.c	/^config_write_if_rmap (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
config_write_prefix_afi	plist.c	/^config_write_prefix_afi (afi_t afi, struct vty *vty)$/;"	f	language:C	file:	signature:(afi_t afi, struct vty *vty)
config_write_prefix_ipv4	plist.c	/^config_write_prefix_ipv4 (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_prefix_ipv6	plist.c	/^config_write_prefix_ipv6 (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
config_write_smux	smux.c	/^config_write_smux (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
connect_error	sockunion.h	/^  connect_error,$/;"	e	language:C++	enum:connect_result
connect_in_progress	sockunion.h	/^  connect_in_progress$/;"	e	language:C++	enum:connect_result
connect_result	sockunion.h	/^enum connect_result$/;"	g	language:C++
connect_success	sockunion.h	/^  connect_success,$/;"	e	language:C++	enum:connect_result
connected	if.h	/^  struct list *connected;$/;"	m	language:C++	struct:interface	typeref:struct:interface::list
connected	if.h	/^struct connected$/;"	s	language:C++
connected_add_by_prefix	if.c	/^connected_add_by_prefix (struct interface *ifp, struct prefix *p, $/;"	f	language:C	signature:(struct interface *ifp, struct prefix *p, struct prefix *destination)
connected_delete_by_prefix	if.c	/^connected_delete_by_prefix (struct interface *ifp, struct prefix *p)$/;"	f	language:C	signature:(struct interface *ifp, struct prefix *p)
connected_free	if.c	/^connected_free (struct connected *connected)$/;"	f	language:C	signature:(struct connected *connected)
connected_log	if.c	/^connected_log (struct connected *connected, char *str)$/;"	f	language:C	file:	signature:(struct connected *connected, char *str)
connected_lookup_address	if.c	/^connected_lookup_address (struct interface *ifp, struct in_addr dst)$/;"	f	language:C	signature:(struct interface *ifp, struct in_addr dst)
connected_new	if.c	/^connected_new (void)$/;"	f	language:C	signature:(void)
connected_same_prefix	if.c	/^connected_same_prefix (struct prefix *p1, struct prefix *p2)$/;"	f	language:C	file:	signature:(struct prefix *p1, struct prefix *p2)
const	getopt.c	43;"	d	language:C	file:
const	getopt1.c	34;"	d	language:C	file:
core_handler	sigevent.c	/^core_handler(int signo$/;"	f	language:C	file:	signature:(int signo , siginfo_t *siginfo, void *context )
count	hash.h	/^  unsigned long count;$/;"	m	language:C++	struct:hash
count	linklist.h	/^  unsigned int count;$/;"	m	language:C++	struct:list
count	plist.h	/^  int count;$/;"	m	language:C++	struct:prefix_list
count	stream.h	/^  size_t count;$/;"	m	language:C++	struct:stream_fifo
count	table.h	/^  unsigned long count;$/;"	m	language:C++	struct:route_table
count	thread.h	/^  int count;$/;"	m	language:C++	struct:thread_list
cp	buffer.c	/^  size_t cp;$/;"	m	language:C	struct:buffer_data	file:
cp	command.c	/^  const char *cp; \/* pointer in command string, moved along while$/;"	m	language:C	struct:format_parser_state	file:
cp	vty.h	/^  int cp;$/;"	m	language:C++	struct:vty
cpu	thread.h	/^  struct rusage cpu;$/;"	m	language:C++	struct:rusage_t	typeref:struct:rusage_t::rusage
cpu	thread.h	/^  struct time_stats cpu;$/;"	m	language:C++	struct:cpu_thread_history	typeref:struct:cpu_thread_history::time_stats
cpu_record	thread.c	/^static struct hash *cpu_record = NULL;$/;"	v	language:C	typeref:struct:hash	file:
cpu_record_clear	thread.c	/^cpu_record_clear (thread_type filter)$/;"	f	language:C	file:	signature:(thread_type filter)
cpu_record_hash_alloc	thread.c	/^cpu_record_hash_alloc (struct cpu_thread_history *a)$/;"	f	language:C	file:	signature:(struct cpu_thread_history *a)
cpu_record_hash_clear	thread.c	/^cpu_record_hash_clear (struct hash_backet *bucket, $/;"	f	language:C	file:	signature:(struct hash_backet *bucket, void *args)
cpu_record_hash_cmp	thread.c	/^cpu_record_hash_cmp (const struct cpu_thread_history *a,$/;"	f	language:C	file:	signature:(const struct cpu_thread_history *a, const struct cpu_thread_history *b)
cpu_record_hash_free	thread.c	/^cpu_record_hash_free (void *a)$/;"	f	language:C	file:	signature:(void *a)
cpu_record_hash_key	thread.c	/^cpu_record_hash_key (struct cpu_thread_history *a)$/;"	f	language:C	file:	signature:(struct cpu_thread_history *a)
cpu_record_hash_print	thread.c	/^cpu_record_hash_print(struct hash_backet *bucket, $/;"	f	language:C	file:	signature:(struct hash_backet *bucket, void *args[])
cpu_record_print	thread.c	/^cpu_record_print(struct vty *vty, thread_type filter)$/;"	f	language:C	file:	signature:(struct vty *vty, thread_type filter)
cpu_thread_history	thread.h	/^struct cpu_thread_history $/;"	s	language:C++
create_node	table.h	/^  route_table_create_node_func_t create_node;$/;"	m	language:C++	struct:route_table_delegate_t_
current	table.h	/^  struct route_node *current;$/;"	m	language:C++	struct:route_table_iter_t_	typeref:struct:route_table_iter_t_::route_node
current_state	privs.h	/^    (*current_state) (void);          \/* current privilege state *\/$/;"	m	language:C++	struct:zebra_privs_t
curvect	command.c	/^  vector curvect; \/* current vector where read tokens should be$/;"	m	language:C	struct:format_parser_state	file:
cycles	workqueue.h	/^  } cycles;	\/* cycle counts *\/$/;"	m	language:C++	struct:work_queue	typeref:struct:work_queue::__anon32
daemon	command.h	/^  int daemon;                   \/* Daemon to which this command belong. *\/$/;"	m	language:C++	struct:cmd_element
daemon	daemon.c	/^daemon (int nochdir, int noclose)$/;"	f	language:C	signature:(int nochdir, int noclose)
data	buffer.c	/^  unsigned char data[];  \/* real dimension is buffer->size *\/$/;"	m	language:C	struct:buffer_data	file:
data	hash.h	/^  void *data;$/;"	m	language:C++	struct:hash_backet
data	linklist.h	/^  void *data;$/;"	m	language:C++	struct:listnode
data	stream.h	/^  unsigned char *data; \/* data pointer *\/$/;"	m	language:C++	struct:stream
data	workqueue.h	/^    void *data;$/;"	m	language:C++	struct:work_queue::__anon31
data	workqueue.h	/^  void *data;                           \/* opaque data *\/$/;"	m	language:C++	struct:work_queue_item
debug	regex.c	/^static int debug;$/;"	v	language:C	file:
debug_smux	smux.c	/^int debug_smux = 0;$/;"	v	language:C
debugargdef	thread.c	665;"	d	language:C	file:
debugargdef	thread.h	166;"	d	language:C++
debugargdef	thread.h	205;"	d	language:C++
debugargpass	thread.c	666;"	d	language:C	file:
default_delegate	table.c	/^static route_table_delegate_t default_delegate = {$/;"	v	language:C	file:
default_information	zclient.h	/^  u_char default_information;$/;"	m	language:C++	struct:zclient
default_lvl	log.h	/^  int default_lvl;	\/* maxlvl to use if none is specified *\/$/;"	m	language:C++	struct:zlog
default_motd	command.c	/^static const char *default_motd =$/;"	v	language:C	file:
del	linklist.h	/^  void (*del) (void *val);$/;"	m	language:C++	struct:list
del_item_data	workqueue.h	/^    void (*del_item_data) (struct work_queue *, void *);$/;"	m	language:C++	struct:work_queue::__anon31
delegate	table.h	/^  route_table_delegate_t *delegate;$/;"	m	language:C++	struct:route_table
delete_hook	filter.c	/^  void (*delete_hook) (struct access_list *);$/;"	m	language:C	struct:access_master	file:
delete_hook	plist.c	/^  void (*delete_hook) (struct prefix_list *);$/;"	m	language:C	struct:prefix_master	file:
delete_hook	routemap.c	/^  void (*delete_hook) (const char *);$/;"	m	language:C	struct:route_map_list	file:
desc	command.h	/^  char *desc;                    \/* Command's description. *\/$/;"	m	language:C++	struct:cmd_token
desc	if.h	/^  char *desc;			$/;"	m	language:C++	struct:interface
desc	plist.h	/^  char *desc;$/;"	m	language:C++	struct:prefix_list
desc_unique_string	command.c	/^desc_unique_string (vector v, const char *str)$/;"	f	language:C	file:	signature:(vector v, const char *str)
description	routemap.h	/^  char *description;$/;"	m	language:C++	struct:route_map_index
destination	if.h	/^  struct prefix *destination;$/;"	m	language:C++	struct:connected	typeref:struct:connected::prefix
destroy_node	table.h	/^  route_table_destroy_node_func_t destroy_node;$/;"	m	language:C++	struct:route_table_delegate_t_
detail_display	plist.c	/^  detail_display,$/;"	e	language:C	enum:display_type	file:
display_type	plist.c	/^enum display_type$/;"	g	language:C	file:
distance	zclient.h	/^  u_char distance;$/;"	m	language:C++	struct:zapi_ipv4
distance	zclient.h	/^  u_char distance;$/;"	m	language:C++	struct:zapi_ipv6
disthash	distribute.c	/^struct hash *disthash;$/;"	v	language:C	typeref:struct:hash
distribute	distribute.h	/^struct distribute$/;"	s	language:C++
distribute_add_hook	distribute.c	/^void (*distribute_add_hook) (struct distribute *);$/;"	v	language:C
distribute_cmp	distribute.c	/^distribute_cmp (const struct distribute *dist1, const struct distribute *dist2)$/;"	f	language:C	file:	signature:(const struct distribute *dist1, const struct distribute *dist2)
distribute_delete_hook	distribute.c	/^void (*distribute_delete_hook) (struct distribute *);$/;"	v	language:C
distribute_free	distribute.c	/^distribute_free (struct distribute *dist)$/;"	f	language:C	file:	signature:(struct distribute *dist)
distribute_get	distribute.c	/^distribute_get (const char *ifname)$/;"	f	language:C	file:	signature:(const char *ifname)
distribute_hash_alloc	distribute.c	/^distribute_hash_alloc (struct distribute *arg)$/;"	f	language:C	file:	signature:(struct distribute *arg)
distribute_hash_make	distribute.c	/^distribute_hash_make (void *arg)$/;"	f	language:C	file:	signature:(void *arg)
distribute_in	if.h	/^  void *distribute_in;$/;"	m	language:C++	struct:interface
distribute_list_add_hook	distribute.c	/^distribute_list_add_hook (void (*func) (struct distribute *))$/;"	f	language:C	signature:(void (*func) (struct distribute *))
distribute_list_delete_hook	distribute.c	/^distribute_list_delete_hook (void (*func) (struct distribute *))$/;"	f	language:C	signature:(void (*func) (struct distribute *))
distribute_list_init	distribute.c	/^distribute_list_init (int node)$/;"	f	language:C	signature:(int node)
distribute_list_prefix_set	distribute.c	/^distribute_list_prefix_set (const char *ifname, enum distribute_type type,$/;"	f	language:C	file:	signature:(const char *ifname, enum distribute_type type, const char *plist_name)
distribute_list_prefix_unset	distribute.c	/^distribute_list_prefix_unset (const char *ifname, enum distribute_type type,$/;"	f	language:C	file:	signature:(const char *ifname, enum distribute_type type, const char *plist_name)
distribute_list_reset	distribute.c	/^distribute_list_reset ()$/;"	f	language:C
distribute_list_set	distribute.c	/^distribute_list_set (const char *ifname, enum distribute_type type, $/;"	f	language:C	file:	signature:(const char *ifname, enum distribute_type type, const char *alist_name)
distribute_list_unset	distribute.c	/^distribute_list_unset (const char *ifname, enum distribute_type type, $/;"	f	language:C	file:	signature:(const char *ifname, enum distribute_type type, const char *alist_name)
distribute_lookup	distribute.c	/^distribute_lookup (const char *ifname)$/;"	f	language:C	signature:(const char *ifname)
distribute_new	distribute.c	/^distribute_new (void)$/;"	f	language:C	file:	signature:(void)
distribute_out	if.h	/^  void *distribute_out;$/;"	m	language:C++	struct:interface
distribute_type	distribute.h	/^enum distribute_type$/;"	g	language:C++
doc	command.h	/^  const char *doc;			\/* Documentation of this command. *\/$/;"	m	language:C++	struct:cmd_element
dp	command.c	/^  const char *dp;  \/* pointer in description string, moved along while$/;"	m	language:C	struct:format_parser_state	file:
dummy_failure_jump	regex.c	/^  dummy_failure_jump,$/;"	e	language:C	enum:__anon22	file:
duplicate	regex.c	/^  duplicate,$/;"	e	language:C	enum:__anon22	file:
duration	keychain.h	/^  u_char duration;$/;"	m	language:C++	struct:key_range
eflags	regex.c	/^    int eflags;$/;"	v	language:C
enable	command.h	/^  char *enable;$/;"	m	language:C++	struct:host
enable	zclient.h	/^  int enable;$/;"	m	language:C++	struct:zclient
enable_encrypt	command.h	/^  char *enable_encrypt;$/;"	m	language:C++	struct:host
enable_node	command.c	/^static struct cmd_node enable_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
encrypt	command.h	/^  int encrypt;$/;"	m	language:C++	struct:host
end	keychain.h	/^  time_t end;$/;"	m	language:C++	struct:key_range
end	regex-gnu.h	/^  regoff_t *end;$/;"	m	language:C++	struct:re_registers
endbuf	regex.c	/^  endbuf,$/;"	e	language:C	enum:__anon22	file:
endline	regex.c	/^  endline,$/;"	e	language:C	enum:__anon22	file:
endp	stream.h	/^  size_t endp;		\/* last valid data position *\/$/;"	m	language:C++	struct:stream
ends	regex.c	/^    regoff_t *starts, *ends;$/;"	v	language:C
errbuf	regex.c	/^    char *errbuf;$/;"	v	language:C
errbuf_size	regex.c	/^    size_t errbuf_size;$/;"	v	language:C
errorfunc	workqueue.h	/^    void (*errorfunc) (struct work_queue *, struct work_queue_item *);$/;"	m	language:C++	struct:work_queue::__anon31
escape	vty.h	/^  unsigned char escape;$/;"	m	language:C++	struct:vty
event	thread.h	/^  struct thread_list event;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::thread_list
event	vty.c	/^enum event $/;"	g	language:C	file:
event	zclient.c	/^enum event {ZCLIENT_SCHEDULE, ZCLIENT_READ, ZCLIENT_CONNECT};$/;"	g	language:C	file:
event_hook	routemap.c	/^  void (*event_hook) (route_map_event_t, const char *); $/;"	m	language:C	struct:route_map_list	file:
ever_matched_something	regex.c	/^    unsigned ever_matched_something : 1;$/;"	m	language:C	struct:__anon25::__anon26	file:
exact	filter.c	/^  int exact;$/;"	m	language:C	struct:filter_zebra	file:
exact_match	command.c	/^  exact_match $/;"	e	language:C	enum:match_type	file:
exactn	regex.c	/^  exactn,$/;"	e	language:C	enum:__anon22	file:
exceptfd	thread.h	/^  fd_set exceptfd;$/;"	m	language:C++	struct:thread_master
exchange	getopt.c	/^exchange (argv)$/;"	f	language:C	file:
exec_timeout	vty.c	/^exec_timeout (struct vty *vty, const char *min_str, const char *sec_str)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *min_str, const char *sec_str)
exit_handler	sigevent.c	/^exit_handler(int signo$/;"	f	language:C	file:	signature:(int signo , siginfo_t *siginfo, void *context )
exitpolicy	routemap.h	/^  route_map_end_t exitpolicy;$/;"	m	language:C++	struct:route_map_index
extend_match	command.c	/^  extend_match,$/;"	e	language:C	enum:match_type	file:
extended	filter.c	/^  int extended;$/;"	m	language:C	struct:filter_cisco	file:
extract_number	regex.c	/^extract_number (dest, source)$/;"	f	language:C	file:
extract_number_and_incr	regex.c	/^extract_number_and_incr (destination, source)$/;"	f	language:C	file:
facility	command.c	/^  int facility;$/;"	m	language:C	struct:facility_map	file:
facility	log.h	/^  int facility;		\/* as per syslog facility *\/$/;"	m	language:C++	struct:zlog
facility_map	command.c	/^static const struct facility_map {$/;"	s	language:C	file:
facility_match	command.c	/^facility_match(const char *str)$/;"	f	language:C	file:	signature:(const char *str)
facility_name	command.c	/^facility_name(int facility)$/;"	f	language:C	file:	signature:(int facility)
fail	smux.c	/^int fail = 0;$/;"	v	language:C
fail	vty.h	/^  int fail;$/;"	m	language:C++	struct:vty
fail	zclient.h	/^  int fail;$/;"	m	language:C++	struct:zclient
fail_stack	regex.c	/^static fail_stack_type fail_stack;$/;"	v	language:C	file:
fail_stack_elt	regex.c	/^union fail_stack_elt$/;"	u	language:C	file:
fail_stack_elt_t	regex.c	/^typedef union fail_stack_elt fail_stack_elt_t;$/;"	t	language:C	typeref:union:fail_stack_elt	file:
fail_stack_type	regex.c	/^} fail_stack_type;$/;"	t	language:C	typeref:struct:__anon23	file:
fail_stack_type	regex.c	/^} fail_stack_type;$/;"	t	language:C	typeref:struct:__anon24	file:
false	regex.c	382;"	d	language:C	file:
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix_ipv4
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix_ipv6
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix_ls
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix_ptr
family	prefix.h	/^  u_char family;$/;"	m	language:C++	struct:prefix_rd
family2afi	prefix.c	/^family2afi (int family)$/;"	f	language:C	signature:(int family)
fastmap	regex-gnu.h	/^  char *fastmap;$/;"	m	language:C++	struct:re_pattern_buffer
fastmap_accurate	regex-gnu.h	/^  unsigned fastmap_accurate : 1;$/;"	m	language:C++	struct:re_pattern_buffer
fd	thread.h	/^    int fd;			\/* file descriptor in case of read\/write. *\/$/;"	m	language:C++	union:thread::__anon10
fd	vty.h	/^  int fd;$/;"	m	language:C++	struct:vty
fifo	zebra.h	/^struct fifo$/;"	s	language:C++
filename	log.h	/^  char *filename;$/;"	m	language:C++	struct:zlog
filter	command.c	/^  enum filter_type filter; \/* Whether to use strict or relaxed matching *\/$/;"	m	language:C	struct:cmd_matcher	typeref:enum:cmd_matcher::filter_type	file:
filter	filter.c	/^struct filter$/;"	s	language:C	file:
filter_cisco	filter.c	/^struct filter_cisco$/;"	s	language:C	file:
filter_free	filter.c	/^filter_free (struct filter *filter)$/;"	f	language:C	file:	signature:(struct filter *filter)
filter_lookup_cisco	filter.c	/^filter_lookup_cisco (struct access_list *access, struct filter *mnew)$/;"	f	language:C	file:	signature:(struct access_list *access, struct filter *mnew)
filter_lookup_zebra	filter.c	/^filter_lookup_zebra (struct access_list *access, struct filter *mnew)$/;"	f	language:C	file:	signature:(struct access_list *access, struct filter *mnew)
filter_match_cisco	filter.c	/^filter_match_cisco (struct filter *mfilter, struct prefix *p)$/;"	f	language:C	file:	signature:(struct filter *mfilter, struct prefix *p)
filter_match_zebra	filter.c	/^filter_match_zebra (struct filter *mfilter, struct prefix *p)$/;"	f	language:C	file:	signature:(struct filter *mfilter, struct prefix *p)
filter_new	filter.c	/^filter_new (void)$/;"	f	language:C	file:	signature:(void)
filter_set_cisco	filter.c	/^filter_set_cisco (struct vty *vty, const char *name_str, const char *type_str,$/;"	f	language:C	file:	signature:(struct vty *vty, const char *name_str, const char *type_str, const char *addr_str, const char *addr_mask_str, const char *mask_str, const char *mask_mask_str, int extended, int set)
filter_set_zebra	filter.c	/^filter_set_zebra (struct vty *vty, const char *name_str, const char *type_str,$/;"	f	language:C	file:	signature:(struct vty *vty, const char *name_str, const char *type_str, afi_t afi, const char *prefix_str, int exact, int set)
filter_show	filter.c	/^filter_show (struct vty *vty, const char *name, afi_t afi)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *name, afi_t afi)
filter_type	command.c	/^enum filter_type$/;"	g	language:C	file:
filter_type	filter.h	/^enum filter_type $/;"	g	language:C++
filter_type_str	filter.c	/^filter_type_str (struct filter *filter)$/;"	f	language:C	file:	signature:(struct filter *filter)
filter_zebra	filter.c	/^struct filter_zebra$/;"	s	language:C	file:
first_match_display	plist.c	/^  first_match_display$/;"	e	language:C	enum:display_type	file:
first_nonopt	getopt.c	/^static int first_nonopt;$/;"	v	language:C	file:
fixup_alt_jump	regex.c	/^  pattern_offset_t fixup_alt_jump;$/;"	m	language:C	struct:__anon27	file:
flag	getopt.h	/^  int *flag;$/;"	m	language:C++	struct:option
flags	if.h	/^  u_char flags;$/;"	m	language:C++	struct:connected
flags	if.h	/^  uint64_t flags;$/;"	m	language:C++	struct:interface
flags	workqueue.h	/^  u_int16_t flags;		\/* user set flag *\/$/;"	m	language:C++	struct:work_queue
flags	zclient.h	/^  u_char flags;$/;"	m	language:C++	struct:zapi_ipv4
flags	zclient.h	/^  u_char flags;$/;"	m	language:C++	struct:zapi_ipv6
fletcher_checksum	checksum.c	/^fletcher_checksum(u_char * buffer, const size_t len, const uint16_t offset)$/;"	f	language:C	signature:(u_char * buffer, const size_t len, const uint16_t offset)
format	memory.h	/^  const char *format;$/;"	m	language:C++	struct:memory_list
format_parser_begin_keyword	command.c	/^format_parser_begin_keyword(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_begin_multiple	command.c	/^format_parser_begin_multiple(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_desc_str	command.c	/^format_parser_desc_str(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_end_keyword	command.c	/^format_parser_end_keyword(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_end_multiple	command.c	/^format_parser_end_multiple(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_error	command.c	/^format_parser_error(struct format_parser_state *state, const char *message)$/;"	f	language:C	file:	signature:(struct format_parser_state *state, const char *message)
format_parser_handle_pipe	command.c	/^format_parser_handle_pipe(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_read_word	command.c	/^format_parser_read_word(struct format_parser_state *state)$/;"	f	language:C	file:	signature:(struct format_parser_state *state)
format_parser_state	command.c	/^struct format_parser_state$/;"	s	language:C	file:
fp	log.h	/^  FILE *fp;$/;"	m	language:C++	struct:zlog
func	command.h	/^  int (*func) (struct cmd_element *, struct vty *, int, const char *[]);$/;"	m	language:C++	struct:cmd_element
func	command.h	/^  int (*func) (struct vty *);$/;"	m	language:C++	struct:cmd_node
func	thread.h	/^  int (*func) (struct thread *); \/* event function *\/$/;"	m	language:C++	struct:thread
func	thread.h	/^  int (*func)(struct thread *);$/;"	m	language:C++	struct:cpu_thread_history
func_apply	routemap.h	/^  route_map_result_t (*func_apply)(void *, struct prefix *, $/;"	m	language:C++	struct:route_map_rule_cmd
func_compile	routemap.h	/^  void *(*func_compile)(const char *);$/;"	m	language:C++	struct:route_map_rule_cmd
func_free	routemap.h	/^  void (*func_free)(void *);$/;"	m	language:C++	struct:route_map_rule_cmd
funcname	thread.h	/^  const char *funcname;$/;"	m	language:C++	struct:cpu_thread_history
funcname	thread.h	/^  const char *funcname;$/;"	m	language:C++	struct:thread
funcname_thread_add_background	thread.c	/^funcname_thread_add_background (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, long delay, debugargdef)
funcname_thread_add_event	thread.c	/^funcname_thread_add_event (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, int val, debugargdef)
funcname_thread_add_read	thread.c	/^funcname_thread_add_read (struct thread_master *m, $/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, int fd, debugargdef)
funcname_thread_add_timer	thread.c	/^funcname_thread_add_timer (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, long timer, debugargdef)
funcname_thread_add_timer_msec	thread.c	/^funcname_thread_add_timer_msec (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, long timer, debugargdef)
funcname_thread_add_timer_timeval	thread.c	/^funcname_thread_add_timer_timeval (struct thread_master *m,$/;"	f	language:C	file:	signature:(struct thread_master *m, int (*func) (struct thread *), int type, void *arg, struct timeval *time_relative, debugargdef)
funcname_thread_add_write	thread.c	/^funcname_thread_add_write (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func) (struct thread *), void *arg, int fd, debugargdef)
funcname_thread_execute	thread.c	/^funcname_thread_execute (struct thread_master *m,$/;"	f	language:C	signature:(struct thread_master *m, int (*func)(struct thread *), void *arg, int val, debugargdef)
ge	plist.c	/^  int ge;$/;"	m	language:C	struct:prefix_list_entry	file:
ge	plist.h	/^  u_char ge;$/;"	m	language:C++	struct:orf_prefix
getdata	linklist.h	145;"	d	language:C++
getopt	getopt.c	/^getopt (argc, argv, optstring)$/;"	f	language:C
getopt_long	getopt1.c	/^getopt_long (argc, argv, options, long_options, opt_index)$/;"	f	language:C
getopt_long_only	getopt1.c	/^getopt_long_only (argc, argv, options, long_options, opt_index)$/;"	f	language:C
getp	stream.h	/^  size_t getp; 		\/* next get position *\/$/;"	m	language:C++	struct:stream
getsockopt_cmsg_data	sockopt.c	/^getsockopt_cmsg_data (struct msghdr *msgh, int level, int type)$/;"	f	language:C	file:	signature:(struct msghdr *msgh, int level, int type)
getsockopt_ifindex	sockopt.c	/^getsockopt_ifindex (int af, struct msghdr *msgh)$/;"	f	language:C	signature:(int af, struct msghdr *msgh)
getsockopt_ipv4_ifindex	sockopt.c	/^getsockopt_ipv4_ifindex (struct msghdr *msgh)$/;"	f	language:C	file:	signature:(struct msghdr *msgh)
getsockopt_ipv6_ifindex	sockopt.c	/^getsockopt_ipv6_ifindex (struct msghdr *msgh)$/;"	f	language:C	file:	signature:(struct msghdr *msgh)
getsockopt_so_sendbuf	sockopt.c	/^getsockopt_so_sendbuf (const int sock)$/;"	f	language:C	signature:(const int sock)
gettext	regex.c	92;"	d	language:C	file:
gettext_noop	regex.c	98;"	d	language:C	file:
gid_normal	privs.h	/^  gid_t gid_normal;                   \/* normal uid *\/$/;"	m	language:C++	struct:zprivs_ids_t
gid_priv	privs.h	/^  gid_t gid_priv;                     \/* privileged uid *\/$/;"	m	language:C++	struct:zprivs_ids_t
gid_vty	privs.h	/^  gid_t gid_vty;                      \/* vty gid *\/$/;"	m	language:C++	struct:zprivs_ids_t
granularity	workqueue.h	/^    unsigned int granularity;$/;"	m	language:C++	struct:work_queue::__anon32
group	privs.h	/^  const char *group;$/;"	m	language:C++	struct:zebra_privs_t
group_in_compile_stack	regex.c	/^group_in_compile_stack (compile_stack, regnum)$/;"	f	language:C	file:
group_match_null_string_p	regex.c	/^group_match_null_string_p (p, end, reg_info)$/;"	f	language:C	file:
handler	sigevent.h	/^  void (*handler) (void);         \/* handler to call  *\/$/;"	m	language:C++	struct:quagga_signal_t
has_arg	getopt.h	/^  int has_arg;$/;"	m	language:C++	struct:option
hash	hash.h	/^struct hash$/;"	s	language:C++
hash_alloc_intern	hash.c	/^hash_alloc_intern (void *arg)$/;"	f	language:C	signature:(void *arg)
hash_backet	hash.h	/^struct hash_backet$/;"	s	language:C++
hash_clean	hash.c	/^hash_clean (struct hash *hash, void (*free_func) (void *))$/;"	f	language:C	signature:(struct hash *hash, void (*free_func) (void *))
hash_cmp	hash.h	/^  int (*hash_cmp) (const void *, const void *);$/;"	m	language:C++	struct:hash
hash_create	hash.c	/^hash_create (unsigned int (*hash_key) (void *), $/;"	f	language:C	signature:(unsigned int (*hash_key) (void *), int (*hash_cmp) (const void *, const void *))
hash_create_size	hash.c	/^hash_create_size (unsigned int size, unsigned int (*hash_key) (void *),$/;"	f	language:C	signature:(unsigned int size, unsigned int (*hash_key) (void *), int (*hash_cmp) (const void *, const void *))
hash_expand	hash.c	/^static void hash_expand (struct hash *hash)$/;"	f	language:C	file:	signature:(struct hash *hash)
hash_free	hash.c	/^hash_free (struct hash *hash)$/;"	f	language:C	signature:(struct hash *hash)
hash_get	hash.c	/^hash_get (struct hash *hash, void *data, void * (*alloc_func) (void *))$/;"	f	language:C	signature:(struct hash *hash, void *data, void * (*alloc_func) (void *))
hash_iterate	hash.c	/^hash_iterate (struct hash *hash, $/;"	f	language:C	signature:(struct hash *hash, void (*func) (struct hash_backet *, void *), void *arg)
hash_key	hash.h	/^  unsigned int (*hash_key) (void *);$/;"	m	language:C++	struct:hash
hash_lookup	hash.c	/^hash_lookup (struct hash *hash, void *data)$/;"	f	language:C	signature:(struct hash *hash, void *data)
hash_release	hash.c	/^hash_release (struct hash *hash, void *data)$/;"	f	language:C	signature:(struct hash *hash, void *data)
head	buffer.c	/^  struct buffer_data *head;$/;"	m	language:C	struct:buffer	typeref:struct:buffer::buffer_data	file:
head	filter.c	/^  struct access_list *head;$/;"	m	language:C	struct:access_list_list	typeref:struct:access_list_list::access_list	file:
head	filter.h	/^  struct filter *head;$/;"	m	language:C++	struct:access_list	typeref:struct:access_list::filter
head	linklist.h	/^  struct listnode *head;$/;"	m	language:C++	struct:list	typeref:struct:list::listnode
head	plist.c	/^  struct prefix_list *head;$/;"	m	language:C	struct:prefix_list_list	typeref:struct:prefix_list_list::prefix_list	file:
head	plist.h	/^  struct prefix_list_entry *head;$/;"	m	language:C++	struct:prefix_list	typeref:struct:prefix_list::prefix_list_entry
head	routemap.c	/^  struct route_map *head;$/;"	m	language:C	struct:route_map_list	typeref:struct:route_map_list::route_map	file:
head	routemap.h	/^  struct route_map_index *head;$/;"	m	language:C++	struct:route_map	typeref:struct:route_map::route_map_index
head	routemap.h	/^  struct route_map_rule *head;$/;"	m	language:C++	struct:route_map_rule_list	typeref:struct:route_map_rule_list::route_map_rule
head	stream.h	/^  struct stream *head;$/;"	m	language:C++	struct:stream_fifo	typeref:struct:stream_fifo::stream
head	thread.h	/^  struct thread *head;$/;"	m	language:C++	struct:thread_list	typeref:struct:thread_list::thread
height	vty.h	/^  int height;$/;"	m	language:C++	struct:vty
hex_append	log.c	/^hex_append(char *s, int len, u_long x)$/;"	f	language:C	file:	signature:(char *s, int len, u_long x)
hindex	vty.h	/^  int hindex;$/;"	m	language:C++	struct:vty
hist	thread.h	/^  struct cpu_thread_history *hist; \/* cache pointer to cpu_history *\/$/;"	m	language:C++	struct:thread	typeref:struct:thread::cpu_thread_history
hist	vty.h	/^  char *hist[VTY_MAXHIST];$/;"	m	language:C++	struct:vty
hitcnt	plist.c	/^  unsigned long hitcnt;$/;"	m	language:C	struct:prefix_list_entry	file:
hmac_md5	md5.c	/^hmac_md5(text, text_len, key, key_len, digest)$/;"	f	language:C
hold	workqueue.h	/^    unsigned int hold;	\/* hold time for first run, in ms *\/$/;"	m	language:C++	struct:work_queue::__anon31
host	command.c	/^struct host host;$/;"	v	language:C	typeref:struct:host
host	command.h	/^struct host$/;"	s	language:C++
host_config_set	command.c	/^host_config_set (char *filename)$/;"	f	language:C	signature:(char *filename)
hp	vty.h	/^  int hp;$/;"	m	language:C++	struct:vty
hw_addr	if.h	/^  u_char hw_addr[INTERFACE_HWADDR_MAX];$/;"	m	language:C++	struct:interface
hw_addr_len	if.h	/^  int hw_addr_len;$/;"	m	language:C++	struct:interface
hw_type	if.h	/^  unsigned short hw_type;$/;"	m	language:C++	struct:interface
iac	vty.h	/^  unsigned char iac;$/;"	m	language:C++	struct:vty
iac_sb_in_progress	vty.h	/^  unsigned char iac_sb_in_progress;$/;"	m	language:C++	struct:vty
ibuf	zclient.h	/^  struct stream *ibuf;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::stream
id	prefix.h	/^      struct in_addr id;$/;"	m	language:C++	struct:prefix::__anon14::__anon15	typeref:struct:prefix::__anon14::__anon15::in_addr
id	prefix.h	/^  struct in_addr id __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix_ls	typeref:struct:prefix_ls::in_addr
ident	log.h	/^  const char *ident;	\/* daemon name (first arg to openlog) *\/$/;"	m	language:C++	struct:zlog
if_add_hook	if.c	/^if_add_hook (int type, int (*func)(struct interface *ifp))$/;"	f	language:C	signature:(int type, int (*func)(struct interface *ifp))
if_cmp_func	if.c	/^if_cmp_func (struct interface *ifp1, struct interface *ifp2)$/;"	f	language:C	signature:(struct interface *ifp1, struct interface *ifp2)
if_create	if.c	/^if_create (const char *name, int namelen)$/;"	f	language:C	signature:(const char *name, int namelen)
if_delete	if.c	/^if_delete (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_delete_hook	if.c	/^  int (*if_delete_hook) (struct interface *);$/;"	m	language:C	struct:if_master	file:
if_delete_retain	if.c	/^if_delete_retain (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_dump	if.c	/^if_dump (const struct interface *ifp)$/;"	f	language:C	file:	signature:(const struct interface *ifp)
if_dump_all	if.c	/^if_dump_all (void)$/;"	f	language:C	signature:(void)
if_flag_dump	if.c	/^if_flag_dump (unsigned long flag)$/;"	f	language:C	signature:(unsigned long flag)
if_get_by_name	if.c	/^if_get_by_name (const char *name)$/;"	f	language:C	signature:(const char *name)
if_get_by_name_len	if.c	/^if_get_by_name_len(const char *name, size_t namelen)$/;"	f	language:C	signature:(const char *name, size_t namelen)
if_indextoname	if.c	/^if_indextoname (unsigned int ifindex, char *name)$/;"	f	language:C	signature:(unsigned int ifindex, char *name)
if_init	if.c	/^if_init (void)$/;"	f	language:C	signature:(void)
if_is_broadcast	if.c	/^if_is_broadcast (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_loopback	if.c	/^if_is_loopback (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_multicast	if.c	/^if_is_multicast (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_operative	if.c	/^if_is_operative (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_pointopoint	if.c	/^if_is_pointopoint (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_running	if.c	/^if_is_running (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_is_up	if.c	/^if_is_up (struct interface *ifp)$/;"	f	language:C	signature:(struct interface *ifp)
if_lookup_address	if.c	/^if_lookup_address (struct in_addr src)$/;"	f	language:C	signature:(struct in_addr src)
if_lookup_by_index	if.c	/^if_lookup_by_index (unsigned int index)$/;"	f	language:C	signature:(unsigned int index)
if_lookup_by_name	if.c	/^if_lookup_by_name (const char *name)$/;"	f	language:C	signature:(const char *name)
if_lookup_by_name_len	if.c	/^if_lookup_by_name_len(const char *name, size_t namelen)$/;"	f	language:C	signature:(const char *name, size_t namelen)
if_lookup_exact_address	if.c	/^if_lookup_exact_address (struct in_addr src)$/;"	f	language:C	signature:(struct in_addr src)
if_lookup_prefix	if.c	/^if_lookup_prefix (struct prefix *prefix)$/;"	f	language:C	signature:(struct prefix *prefix)
if_master	if.c	/^struct if_master$/;"	s	language:C	file:
if_master	if.c	/^} if_master;$/;"	v	language:C	typeref:struct:if_master
if_nametoindex	if.c	/^if_nametoindex (const char *name)$/;"	f	language:C	signature:(const char *name)
if_new_hook	if.c	/^  int (*if_new_hook) (struct interface *);$/;"	m	language:C	struct:if_master	file:
if_rmap	if_rmap.h	/^struct if_rmap$/;"	s	language:C++
if_rmap_add_hook	if_rmap.c	/^static void (*if_rmap_add_hook) (struct if_rmap *) = NULL;$/;"	v	language:C	file:
if_rmap_delete_hook	if_rmap.c	/^static void (*if_rmap_delete_hook) (struct if_rmap *) = NULL;$/;"	v	language:C	file:
if_rmap_free	if_rmap.c	/^if_rmap_free (struct if_rmap *if_rmap)$/;"	f	language:C	file:	signature:(struct if_rmap *if_rmap)
if_rmap_get	if_rmap.c	/^if_rmap_get (const char *ifname)$/;"	f	language:C	file:	signature:(const char *ifname)
if_rmap_hash_alloc	if_rmap.c	/^if_rmap_hash_alloc (void *arg)$/;"	f	language:C	file:	signature:(void *arg)
if_rmap_hash_cmp	if_rmap.c	/^if_rmap_hash_cmp (const void *arg1, const void* arg2)$/;"	f	language:C	file:	signature:(const void *arg1, const void* arg2)
if_rmap_hash_make	if_rmap.c	/^if_rmap_hash_make (void *data)$/;"	f	language:C	file:	signature:(void *data)
if_rmap_hook_add	if_rmap.c	/^if_rmap_hook_add (void (*func) (struct if_rmap *))$/;"	f	language:C	signature:(void (*func) (struct if_rmap *))
if_rmap_hook_delete	if_rmap.c	/^if_rmap_hook_delete (void (*func) (struct if_rmap *))$/;"	f	language:C	signature:(void (*func) (struct if_rmap *))
if_rmap_init	if_rmap.c	/^if_rmap_init (int node)$/;"	f	language:C	signature:(int node)
if_rmap_lookup	if_rmap.c	/^if_rmap_lookup (const char *ifname)$/;"	f	language:C	signature:(const char *ifname)
if_rmap_new	if_rmap.c	/^if_rmap_new (void)$/;"	f	language:C	file:	signature:(void)
if_rmap_reset	if_rmap.c	/^if_rmap_reset ()$/;"	f	language:C
if_rmap_set	if_rmap.c	/^if_rmap_set (const char *ifname, enum if_rmap_type type, $/;"	f	language:C	file:	signature:(const char *ifname, enum if_rmap_type type, const char *routemap_name)
if_rmap_type	if_rmap.h	/^enum if_rmap_type$/;"	g	language:C++
if_rmap_unset	if_rmap.c	/^if_rmap_unset (const char *ifname, enum if_rmap_type type, $/;"	f	language:C	file:	signature:(const char *ifname, enum if_rmap_type type, const char *routemap_name)
if_stats	if.h	/^struct if_stats$/;"	s	language:C++
if_sunwzebra_get	if.c	/^if_sunwzebra_get (const char *name, size_t nlen)$/;"	f	language:C	file:	signature:(const char *name, size_t nlen)
if_terminate	if.c	/^if_terminate (void)$/;"	f	language:C	signature:(void)
ifindex	if.h	/^  unsigned int ifindex;$/;"	m	language:C++	struct:interface
ifindex	zclient.h	/^  unsigned int *ifindex;$/;"	m	language:C++	struct:zapi_ipv4
ifindex	zclient.h	/^  unsigned int *ifindex;$/;"	m	language:C++	struct:zapi_ipv6
ifindex2ifname	if.c	/^ifindex2ifname (unsigned int index)$/;"	f	language:C	signature:(unsigned int index)
ifindex_num	zclient.h	/^  u_char ifindex_num;$/;"	m	language:C++	struct:zapi_ipv4
ifindex_num	zclient.h	/^  u_char ifindex_num;$/;"	m	language:C++	struct:zapi_ipv6
iflist	if.c	/^struct list *iflist;$/;"	v	language:C	typeref:struct:list
ifname	distribute.h	/^  char *ifname;$/;"	m	language:C++	struct:distribute
ifname	if_rmap.h	/^  char *ifname;$/;"	m	language:C++	struct:if_rmap
ifname2ifindex	if.c	/^ifname2ifindex (const char *name)$/;"	f	language:C	signature:(const char *name)
ifp	if.h	/^  struct interface *ifp;$/;"	m	language:C++	struct:connected	typeref:struct:connected::interface
ifrmaphash	if_rmap.c	/^struct hash *ifrmaphash;$/;"	v	language:C	typeref:struct:hash
in6addr_cmp	sockunion.c	/^in6addr_cmp (struct in6_addr *addr1, struct in6_addr *addr2)$/;"	f	language:C	file:	signature:(struct in6_addr *addr1, struct in6_addr *addr2)
in_cksum	checksum.c	/^in_cksum(void *parg, int nbytes)$/;"	f	language:C	signature:(void *parg, int nbytes)
in_keyword	command.c	/^  int in_keyword; \/* flag to remember if we are in a keyword group *\/$/;"	m	language:C	struct:format_parser_state	file:
in_multiple	command.c	/^  int in_multiple; \/* flag to remember if we are in a multiple group *\/$/;"	m	language:C	struct:format_parser_state	file:
in_pktinfo	zebra.h	/^struct in_pktinfo$/;"	s	language:C++
index	command.c	/^  unsigned int index; \/* The index up to which matching should be done *\/$/;"	m	language:C	struct:cmd_matcher	file:
index	hash.h	/^  struct hash_backet **index;$/;"	m	language:C++	struct:hash	typeref:struct:hash::hash_backet
index	keychain.h	/^  u_int32_t index;$/;"	m	language:C++	struct:key
index	memory.h	/^  int index;$/;"	m	language:C++	struct:memory_list
index	thread.h	/^  int index;			\/* used for timers to store position in queue *\/$/;"	m	language:C++	struct:thread
index	vector.h	/^  void **index;			\/* index to data *\/$/;"	m	language:C++	struct:_vector
index	vty.h	/^  void *index;$/;"	m	language:C++	struct:vty
index_sub	vty.h	/^  void *index_sub;$/;"	m	language:C++	struct:vty
inet6_ntoa	prefix.c	/^inet6_ntoa (struct in6_addr addr)$/;"	f	language:C	signature:(struct in6_addr addr)
inet_aton	sockunion.c	/^inet_aton (const char *cp, struct in_addr *inaddr)$/;"	f	language:C	signature:(const char *cp, struct in_addr *inaddr)
inet_ntop	sockunion.c	/^inet_ntop (int family, const void *addrptr, char *strptr, size_t len)$/;"	f	language:C	signature:(int family, const void *addrptr, char *strptr, size_t len)
inet_pton	sockunion.c	/^inet_pton (int family, const char *strptr, void *addrptr)$/;"	f	language:C	signature:(int family, const char *strptr, void *addrptr)
inet_sutop	sockunion.c	/^inet_sutop (union sockunion *su, char *str)$/;"	f	language:C	signature:(union sockunion *su, char *str)
info	if.h	/^  void *info;$/;"	m	language:C++	struct:interface
info	table.h	/^  void *info;$/;"	m	language:C++	struct:route_table
init_syntax_once	regex.c	/^init_syntax_once ()$/;"	f	language:C	file:
inner_group_offset	regex.c	/^  pattern_offset_t inner_group_offset;$/;"	m	language:C	struct:__anon27	file:
insert_op1	regex.c	/^insert_op1 (op, loc, arg, end)$/;"	f	language:C	file:
insert_op2	regex.c	/^insert_op2 (op, loc, arg1, arg2, end)$/;"	f	language:C	file:
install_default	command.c	/^install_default (enum node_type node)$/;"	f	language:C	signature:(enum node_type node)
install_element	command.c	/^install_element (enum node_type ntype, struct cmd_element *cmd)$/;"	f	language:C	signature:(enum node_type ntype, struct cmd_element *cmd)
install_node	command.c	/^install_node (struct cmd_node *node, $/;"	f	language:C	signature:(struct cmd_node *node, int (*func) (struct vty *))
integer	regex.c	/^  int integer;$/;"	m	language:C	union:fail_stack_elt	file:
integer	regex.c	/^  long int integer;$/;"	m	language:C	union:fail_stack_elt	file:
integrate_default	vty.c	/^char integrate_default[] = SYSCONFDIR INTEGRATE_DEFAULT_CONFIG;$/;"	v	language:C
interface	if.h	/^struct interface $/;"	s	language:C++
interface_add	zclient.h	/^  int (*interface_add) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
interface_address_add	zclient.h	/^  int (*interface_address_add) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
interface_address_delete	zclient.h	/^  int (*interface_address_delete) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
interface_delete	zclient.h	/^  int (*interface_delete) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
interface_down	zclient.h	/^  int (*interface_down) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
interface_up	zclient.h	/^  int (*interface_up) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
intvect	command.c	/^  vector intvect; \/* Intermediate level vector, used when there's$/;"	m	language:C	struct:format_parser_state	file:
ip6_masklen	prefix.c	/^ip6_masklen (struct in6_addr netmask)$/;"	f	language:C	signature:(struct in6_addr netmask)
ip_masklen	prefix.c	/^ip_masklen (struct in_addr netmask)$/;"	f	language:C	signature:(struct in_addr netmask)
ipi_addr	zebra.h	/^  struct in_addr ipi_addr;$/;"	m	language:C++	struct:in_pktinfo	typeref:struct:in_pktinfo::in_addr
ipi_ifindex	zebra.h	/^  int ipi_ifindex;$/;"	m	language:C++	struct:in_pktinfo
ipi_spec_dst	zebra.h	/^  struct in_addr ipi_spec_dst;$/;"	m	language:C++	struct:in_pktinfo	typeref:struct:in_pktinfo::in_addr
ipv4_broadcast_addr	prefix.c	/^ipv4_broadcast_addr (in_addr_t hostaddr, int masklen)$/;"	f	language:C	signature:(in_addr_t hostaddr, int masklen)
ipv4_martian	prefix.h	/^static inline int ipv4_martian (struct in_addr *addr)$/;"	f	language:C++	signature:(struct in_addr *addr)
ipv4_match	command.c	/^  ipv4_match,$/;"	e	language:C	enum:match_type	file:
ipv4_network_addr	prefix.c	/^ipv4_network_addr (in_addr_t hostaddr, int masklen)$/;"	f	language:C	signature:(in_addr_t hostaddr, int masklen)
ipv4_prefix_match	command.c	/^  ipv4_prefix_match,$/;"	e	language:C	enum:match_type	file:
ipv4_route_add	zclient.h	/^  int (*ipv4_route_add) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
ipv4_route_delete	zclient.h	/^  int (*ipv4_route_delete) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
ipv6_match	command.c	/^  ipv6_match,$/;"	e	language:C	enum:match_type	file:
ipv6_prefix_match	command.c	/^  ipv6_prefix_match,$/;"	e	language:C	enum:match_type	file:
ipv6_route_add	zclient.h	/^  int (*ipv6_route_add) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
ipv6_route_delete	zclient.h	/^  int (*ipv6_route_delete) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
is_active	regex.c	/^    unsigned is_active : 1;$/;"	m	language:C	struct:__anon25::__anon26	file:
is_cmd_ambiguous	command.c	/^is_cmd_ambiguous (vector cmd_vector,$/;"	f	language:C	file:	signature:(vector cmd_vector, const char *command, vector matches, enum match_type type)
items	workqueue.h	/^  struct list *items;                 \/* queue item list *\/$/;"	m	language:C++	struct:work_queue	typeref:struct:work_queue::list
itoa64	command.c	/^static const unsigned char itoa64[] =$/;"	v	language:C	file:
jhash	jhash.c	/^jhash (const void *key, u_int32_t length, u_int32_t initval)$/;"	f	language:C	signature:(const void *key, u_int32_t length, u_int32_t initval)
jhash2	jhash.c	/^jhash2 (const u_int32_t *k, u_int32_t length, u_int32_t initval)$/;"	f	language:C	signature:(const u_int32_t *k, u_int32_t length, u_int32_t initval)
jhash_1word	jhash.c	/^jhash_1word (u_int32_t a, u_int32_t initval)$/;"	f	language:C	signature:(u_int32_t a, u_int32_t initval)
jhash_2words	jhash.c	/^jhash_2words (u_int32_t a, u_int32_t b, u_int32_t initval)$/;"	f	language:C	signature:(u_int32_t a, u_int32_t b, u_int32_t initval)
jhash_3words	jhash.c	/^jhash_3words (u_int32_t a, u_int32_t b, u_int32_t c, u_int32_t initval)$/;"	f	language:C	signature:(u_int32_t a, u_int32_t b, u_int32_t c, u_int32_t initval)
jump	regex.c	/^  jump,$/;"	e	language:C	enum:__anon22	file:
jump_n	regex.c	/^  jump_n,$/;"	e	language:C	enum:__anon22	file:
jump_past_alt	regex.c	/^  jump_past_alt,$/;"	e	language:C	enum:__anon22	file:
just_read_word	command.c	/^  int just_read_word; \/* flag to remember if the last thing we red was a$/;"	m	language:C	struct:format_parser_state	file:
key	hash.h	/^  unsigned int key;$/;"	m	language:C++	struct:hash_backet
key	keychain.h	/^  struct list *key;$/;"	m	language:C++	struct:keychain	typeref:struct:keychain::list
key	keychain.h	/^struct key$/;"	s	language:C++
key	log.h	/^  int key;$/;"	m	language:C++	struct:message
key_cmp_func	keychain.c	/^key_cmp_func (void *arg1, void *arg2)$/;"	f	language:C	file:	signature:(void *arg1, void *arg2)
key_delete	keychain.c	/^key_delete (struct keychain *keychain, struct key *key)$/;"	f	language:C	file:	signature:(struct keychain *keychain, struct key *key)
key_delete_func	keychain.c	/^key_delete_func (struct key *key)$/;"	f	language:C	file:	signature:(struct key *key)
key_free	keychain.c	/^key_free (struct key *key)$/;"	f	language:C	file:	signature:(struct key *key)
key_get	keychain.c	/^key_get (const struct keychain *keychain, u_int32_t index)$/;"	f	language:C	file:	signature:(const struct keychain *keychain, u_int32_t index)
key_lifetime_duration_set	keychain.c	/^key_lifetime_duration_set (struct vty *vty, struct key_range *krange,$/;"	f	language:C	file:	signature:(struct vty *vty, struct key_range *krange, const char *stime_str, const char *sday_str, const char *smonth_str, const char *syear_str, const char *duration_str)
key_lifetime_infinite_set	keychain.c	/^key_lifetime_infinite_set (struct vty *vty, struct key_range *krange,$/;"	f	language:C	file:	signature:(struct vty *vty, struct key_range *krange, const char *stime_str, const char *sday_str, const char *smonth_str, const char *syear_str)
key_lifetime_set	keychain.c	/^key_lifetime_set (struct vty *vty, struct key_range *krange,$/;"	f	language:C	file:	signature:(struct vty *vty, struct key_range *krange, const char *stime_str, const char *sday_str, const char *smonth_str, const char *syear_str, const char *etime_str, const char *eday_str, const char *emonth_str, const char *eyear_str)
key_lookup	keychain.c	/^key_lookup (const struct keychain *keychain, u_int32_t index)$/;"	f	language:C	file:	signature:(const struct keychain *keychain, u_int32_t index)
key_lookup_for_accept	keychain.c	/^key_lookup_for_accept (const struct keychain *keychain, u_int32_t index)$/;"	f	language:C	signature:(const struct keychain *keychain, u_int32_t index)
key_lookup_for_send	keychain.c	/^key_lookup_for_send (const struct keychain *keychain)$/;"	f	language:C	signature:(const struct keychain *keychain)
key_match_for_accept	keychain.c	/^key_match_for_accept (const struct keychain *keychain, const char *auth_str)$/;"	f	language:C	signature:(const struct keychain *keychain, const char *auth_str)
key_new	keychain.c	/^key_new (void)$/;"	f	language:C	file:	signature:(void)
key_range	keychain.h	/^struct key_range$/;"	s	language:C++
key_str2time	keychain.c	/^key_str2time (const char *time_str, const char *day_str, const char *month_str,$/;"	f	language:C	file:	signature:(const char *time_str, const char *day_str, const char *month_str, const char *year_str)
keychain	keychain.h	/^struct keychain$/;"	s	language:C++
keychain_config_write	keychain.c	/^keychain_config_write (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
keychain_delete	keychain.c	/^keychain_delete (struct keychain *keychain)$/;"	f	language:C	file:	signature:(struct keychain *keychain)
keychain_free	keychain.c	/^keychain_free (struct keychain *keychain)$/;"	f	language:C	file:	signature:(struct keychain *keychain)
keychain_get	keychain.c	/^keychain_get (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
keychain_init	keychain.c	/^keychain_init ()$/;"	f	language:C
keychain_key_node	keychain.c	/^static struct cmd_node keychain_key_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
keychain_list	keychain.c	/^struct list *keychain_list;$/;"	v	language:C	typeref:struct:list
keychain_lookup	keychain.c	/^keychain_lookup (const char *name)$/;"	f	language:C	signature:(const char *name)
keychain_new	keychain.c	/^keychain_new (void)$/;"	f	language:C	file:	signature:(void)
keychain_node	keychain.c	/^static struct cmd_node keychain_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
keychain_strftime	keychain.c	/^keychain_strftime (char *buf, int bufsiz, time_t *time)$/;"	f	language:C	file:	signature:(char *buf, int bufsiz, time_t *time)
keyword	command.h	/^  vector keyword; \/* vector of vector of cmd_tokens *\/$/;"	m	language:C++	struct:cmd_token
l_left	table.h	97;"	d	language:C++
l_right	table.h	98;"	d	language:C++
label	if.h	/^  char *label;$/;"	m	language:C++	struct:connected
last_nonopt	getopt.c	/^static int last_nonopt;$/;"	v	language:C	file:
last_recent_time	thread.c	/^static struct timeval last_recent_time;$/;"	v	language:C	typeref:struct:timeval	file:
lastfile	queue.h	/^	char * lastfile;$/;"	m	language:C++	struct:qm_trace
lastline	queue.h	/^	int lastline;$/;"	m	language:C++	struct:qm_trace
laststart_offset	regex.c	/^  pattern_offset_t laststart_offset;$/;"	m	language:C	struct:__anon27	file:
le	plist.c	/^  int le;$/;"	m	language:C	struct:prefix_list_entry	file:
le	plist.h	/^  u_char le;$/;"	m	language:C++	struct:orf_prefix
len	log.h	/^   size_t len;		\/* length of rendered timestamp *\/$/;"	m	language:C++	struct:timestamp_control
length	vty.h	/^  int length;$/;"	m	language:C++	struct:vty
length	zclient.h	/^  uint16_t length;$/;"	m	language:C++	struct:zserv_header
level_match	command.c	/^level_match(const char *s)$/;"	f	language:C	file:	signature:(const char *s)
lines	command.h	/^  int lines;$/;"	m	language:C++	struct:host
lines	vty.h	/^  int lines;$/;"	m	language:C++	struct:vty
list	distribute.h	/^  char *list[DISTRIBUTE_MAX];$/;"	m	language:C++	struct:distribute
list	linklist.h	/^struct list $/;"	s	language:C++
list	memory.h	/^  struct memory_list *list;$/;"	m	language:C++	struct:mlist	typeref:struct:mlist::memory_list
list_add_list	linklist.c	/^list_add_list (struct list *l, struct list *m)$/;"	f	language:C	signature:(struct list *l, struct list *m)
list_add_node_next	linklist.c	/^list_add_node_next (struct list *list, struct listnode *current, void *val)$/;"	f	language:C	signature:(struct list *list, struct listnode *current, void *val)
list_add_node_prev	linklist.c	/^list_add_node_prev (struct list *list, struct listnode *current, void *val)$/;"	f	language:C	signature:(struct list *list, struct listnode *current, void *val)
list_delete	linklist.c	/^list_delete (struct list *list)$/;"	f	language:C	signature:(struct list *list)
list_delete_all_node	linklist.c	/^list_delete_all_node (struct list *list)$/;"	f	language:C	signature:(struct list *list)
list_delete_node	linklist.c	/^list_delete_node (struct list *list, struct listnode *node)$/;"	f	language:C	signature:(struct list *list, struct listnode *node)
list_free	linklist.c	/^list_free (struct list *l)$/;"	f	language:C	signature:(struct list *l)
list_isempty	linklist.h	61;"	d	language:C++
list_new	linklist.c	/^list_new (void)$/;"	f	language:C	signature:(void)
listcount	linklist.h	60;"	d	language:C++
listgetdata	linklist.h	62;"	d	language:C++
listhead	linklist.h	58;"	d	language:C++
listnextnode	linklist.h	57;"	d	language:C++
listnode	linklist.h	/^struct listnode $/;"	s	language:C++
listnode_add	linklist.c	/^listnode_add (struct list *list, void *val)$/;"	f	language:C	signature:(struct list *list, void *val)
listnode_add_after	linklist.c	/^listnode_add_after (struct list *list, struct listnode *pp, void *val)$/;"	f	language:C	signature:(struct list *list, struct listnode *pp, void *val)
listnode_add_sort	linklist.c	/^listnode_add_sort (struct list *list, void *val)$/;"	f	language:C	signature:(struct list *list, void *val)
listnode_delete	linklist.c	/^listnode_delete (struct list *list, void *val)$/;"	f	language:C	signature:(struct list *list, void *val)
listnode_free	linklist.c	/^listnode_free (struct listnode *node)$/;"	f	language:C	file:	signature:(struct listnode *node)
listnode_head	linklist.c	/^listnode_head (struct list *list)$/;"	f	language:C	signature:(struct list *list)
listnode_lookup	linklist.c	/^listnode_lookup (struct list *list, void *data)$/;"	f	language:C	signature:(struct list *list, void *data)
listnode_move_to_tail	linklist.c	/^listnode_move_to_tail (struct list *l, struct listnode *n)$/;"	f	language:C	signature:(struct list *l, struct listnode *n)
listnode_new	linklist.c	/^listnode_new (void)$/;"	f	language:C	file:	signature:(void)
listtail	linklist.h	59;"	d	language:C++
log_memstats	memory.c	/^log_memstats(int pri)$/;"	f	language:C	file:	signature:(int pri)
log_memstats_stderr	memory.c	/^log_memstats_stderr (const char *prefix)$/;"	f	language:C	signature:(const char *prefix)
logfile	command.h	/^  char *logfile;$/;"	m	language:C++	struct:host
logfile_fd	log.c	/^static int logfile_fd = -1;	\/* Used in signal handler. *\/$/;"	v	language:C	file:
longer_display	plist.c	/^  longer_display,$/;"	e	language:C	enum:display_type	file:
lookup	log.c	/^lookup (const struct message *mes, int key)$/;"	f	language:C	signature:(const struct message *mes, int key)
lp	prefix.h	/^    } lp;$/;"	m	language:C++	union:prefix::__anon14	typeref:struct:prefix::__anon14::__anon15
main	getopt.c	/^main (argc, argv)$/;"	f	language:C
main	getopt1.c	/^main (argc, argv)$/;"	f	language:C
map	routemap.h	/^  struct route_map *map;$/;"	m	language:C++	struct:route_map_index	typeref:struct:route_map_index::route_map
marker	zclient.h	/^  uint8_t marker;	\/* corresponds to command field in old zserv$/;"	m	language:C++	struct:zserv_header
mask	filter.c	/^  struct in_addr mask;$/;"	m	language:C	struct:filter_cisco	typeref:struct:filter_cisco::in_addr	file:
mask_mask	filter.c	/^  struct in_addr mask_mask;$/;"	m	language:C	struct:filter_cisco	typeref:struct:filter_cisco::in_addr	file:
maskbit	prefix.c	/^static const u_char maskbit[] = {0x00, 0x80, 0xc0, 0xe0, 0xf0,$/;"	v	language:C	file:
maskbit	table.c	/^static const u_char maskbit[] =$/;"	v	language:C	file:
maskbytes6	prefix.c	/^static const struct in6_addr maskbytes6[] =$/;"	v	language:C	typeref:struct:in6_addr	file:
masklen2ip	prefix.c	/^masklen2ip (const int masklen, struct in_addr *netmask)$/;"	f	language:C	signature:(const int masklen, struct in_addr *netmask)
masklen2ip6	prefix.c	/^masklen2ip6 (const int masklen, struct in6_addr *netmask)$/;"	f	language:C	signature:(const int masklen, struct in6_addr *netmask)
master	filter.h	/^  struct access_master *master;$/;"	m	language:C++	struct:access_list	typeref:struct:access_list::access_master
master	plist.h	/^  struct prefix_master *master;$/;"	m	language:C++	struct:prefix_list	typeref:struct:prefix_list::prefix_master
master	smux.c	/^static struct thread_master *master;$/;"	v	language:C	typeref:struct:thread_master	file:
master	thread.h	/^  struct thread_master *master;	\/* pointer to the struct thread_master. *\/$/;"	m	language:C++	struct:thread	typeref:struct:thread::thread_master
master	vty.c	/^static struct thread_master *master;$/;"	v	language:C	typeref:struct:thread_master	file:
master	workqueue.h	/^  struct thread_master *master;       \/* thread master *\/$/;"	m	language:C++	struct:work_queue	typeref:struct:work_queue::thread_master
match	command.c	/^  size_t match;$/;"	m	language:C	struct:facility_map	file:
match	command.c	/^  vector *match;$/;"	m	language:C	struct:cmd_matcher	file:
match_list	routemap.h	/^  struct route_map_rule_list match_list;$/;"	m	language:C++	struct:route_map_index	typeref:struct:route_map_index::route_map_rule_list
match_null_string_p	regex.c	/^    unsigned match_null_string_p : 2;$/;"	m	language:C	struct:__anon25::__anon26	file:
match_type	command.c	/^  enum match_type *match_type;$/;"	m	language:C	struct:cmd_matcher	typeref:enum:cmd_matcher::match_type	file:
match_type	command.c	/^enum match_type $/;"	g	language:C	file:
matched_something	regex.c	/^    unsigned matched_something : 1;$/;"	m	language:C	struct:__anon25::__anon26	file:
matcher_rv	command.c	/^enum matcher_rv$/;"	g	language:C	file:
max	thread.h	/^    unsigned long total, max;$/;"	m	language:C++	struct:cpu_thread_history::time_stats
max	vty.h	/^  int max;$/;"	m	language:C++	struct:vty
max_retries	workqueue.h	/^    unsigned int max_retries;	$/;"	m	language:C++	struct:work_queue::__anon31
maxlvl	log.h	/^  int maxlvl[ZLOG_NUM_DESTS];	\/* maximum priority to send to associated$/;"	m	language:C++	struct:zlog
maybe_pop_jump	regex.c	/^  maybe_pop_jump,$/;"	e	language:C	enum:__anon22	file:
md5_buf	md5.h	/^	uint8_t	md5_buf[MD5_BUFLEN];$/;"	m	language:C++	struct:__anon7
md5_calc	md5.c	/^static void md5_calc(const uint8_t *b64, md5_ctxt * ctxt)$/;"	f	language:C	file:	signature:(const uint8_t *b64, md5_ctxt * ctxt)
md5_count	md5.h	/^	} md5_count;$/;"	m	language:C++	struct:__anon7	typeref:union:__anon7::__anon9
md5_count64	md5.h	/^		uint64_t	md5_count64;$/;"	m	language:C++	union:__anon7::__anon9
md5_count8	md5.h	/^		uint8_t	md5_count8[8];$/;"	m	language:C++	union:__anon7::__anon9
md5_ctxt	md5.h	/^} md5_ctxt;$/;"	t	language:C++	typeref:struct:__anon7
md5_i	md5.h	/^	uint	md5_i;$/;"	m	language:C++	struct:__anon7
md5_init	md5.c	/^void md5_init(md5_ctxt *ctxt)$/;"	f	language:C	signature:(md5_ctxt *ctxt)
md5_loop	md5.c	/^void md5_loop(md5_ctxt *ctxt, const void *vinput, uint len)$/;"	f	language:C	signature:(md5_ctxt *ctxt, const void *vinput, uint len)
md5_n	md5.h	63;"	d	language:C++
md5_n8	md5.h	64;"	d	language:C++
md5_pad	md5.c	/^void md5_pad(md5_ctxt *ctxt)$/;"	f	language:C	signature:(md5_ctxt *ctxt)
md5_paddat	md5.c	/^static const uint8_t md5_paddat[MD5_BUFLEN] = {$/;"	v	language:C	file:
md5_result	md5.c	/^void md5_result(uint8_t *digest, md5_ctxt *ctxt)$/;"	f	language:C	signature:(uint8_t *digest, md5_ctxt *ctxt)
md5_st	md5.h	/^	} md5_st;$/;"	m	language:C++	struct:__anon7	typeref:union:__anon7::__anon8
md5_st8	md5.h	57;"	d	language:C++
md5_sta	md5.h	53;"	d	language:C++
md5_state32	md5.h	/^		uint32_t	md5_state32[4];$/;"	m	language:C++	union:__anon7::__anon8
md5_state8	md5.h	/^		uint8_t	md5_state8[16];$/;"	m	language:C++	union:__anon7::__anon8
md5_stb	md5.h	54;"	d	language:C++
md5_stc	md5.h	55;"	d	language:C++
md5_std	md5.h	56;"	d	language:C++
memcmp	regex.c	149;"	d	language:C	file:
memconstant	zclient.c	/^memconstant(const void *s, int c, size_t n)$/;"	f	language:C	file:	signature:(const void *s, int c, size_t n)
memcpy	regex.c	152;"	d	language:C	file:
memory_init	memory.c	/^memory_init (void)$/;"	f	language:C	signature:(void)
memory_list	memory.h	/^struct memory_list$/;"	s	language:C++
memory_list_babel	memtypes.c	/^struct memory_list memory_list_babel[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_bgp	memtypes.c	/^struct memory_list memory_list_bgp[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_isis	memtypes.c	/^struct memory_list memory_list_isis[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_lib	memtypes.c	/^struct memory_list memory_list_lib[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_ospf	memtypes.c	/^struct memory_list memory_list_ospf[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_ospf6	memtypes.c	/^struct memory_list memory_list_ospf6[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_pim	memtypes.c	/^struct memory_list memory_list_pim[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_rip	memtypes.c	/^struct memory_list memory_list_rip[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_ripng	memtypes.c	/^struct memory_list memory_list_ripng[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_vtysh	memtypes.c	/^struct memory_list memory_list_vtysh[] =$/;"	v	language:C	typeref:struct:memory_list
memory_list_zebra	memtypes.c	/^struct memory_list memory_list_zebra[] = $/;"	v	language:C	typeref:struct:memory_list
mes_lookup	log.c	/^mes_lookup (const struct message *meslist, int max, int index,$/;"	f	language:C	signature:(const struct message *meslist, int max, int index, const char *none, const char *mesname)
message	log.h	/^struct message$/;"	s	language:C++
message	zclient.h	/^  u_char message;$/;"	m	language:C++	struct:zapi_ipv4
message	zclient.h	/^  u_char message;$/;"	m	language:C++	struct:zapi_ipv6
metric	if.h	/^  int metric;$/;"	m	language:C++	struct:interface
metric	zclient.h	/^  u_int32_t metric;$/;"	m	language:C++	struct:zapi_ipv4
metric	zclient.h	/^  u_int32_t metric;$/;"	m	language:C++	struct:zapi_ipv6
min	smux.c	76;"	d	language:C	file:
min	snmp.c	30;"	d	language:C	file:
mlist	memory.h	/^struct mlist {$/;"	s	language:C++
mlists	memtypes.c	/^struct mlist mlists[] __attribute__ ((unused)) = {$/;"	v	language:C	typeref:struct:mlist
monitor	vty.h	/^  int monitor;$/;"	m	language:C++	struct:vty
motd	command.h	/^  const char *motd;$/;"	m	language:C++	struct:host
motdfile	command.h	/^  char *motdfile;$/;"	m	language:C++	struct:host
mstat	memory.c	/^} mstat [MTYPE_MAX];$/;"	v	language:C	typeref:struct:__anon11	file:
mstat	memory.c	/^} mstat [MTYPE_MAX];$/;"	v	language:C	typeref:struct:__anon12	file:
mstr	memory.c	/^static const struct message mstr [] =$/;"	v	language:C	typeref:struct:message	file:
mtu	if.h	/^  unsigned int mtu;    \/* IPv4 MTU *\/$/;"	m	language:C++	struct:interface
mtu6	if.h	/^  unsigned int mtu6;   \/* IPv6 MTU - probably, but not neccessarily same as mtu *\/$/;"	m	language:C++	struct:interface
mtype_log	memory.c	/^mtype_log (char *func, void *memory, const char *file, int line, int type)$/;"	f	language:C	file:	signature:(char *func, void *memory, const char *file, int line, int type)
mtype_memstr	memory.c	/^mtype_memstr (char *buf, size_t len, unsigned long bytes)$/;"	f	language:C	signature:(char *buf, size_t len, unsigned long bytes)
mtype_stats_alloc	memory.c	/^mtype_stats_alloc (int type)$/;"	f	language:C	signature:(int type)
mtype_zcalloc	memory.c	/^mtype_zcalloc (const char *file, int line, int type, size_t size)$/;"	f	language:C	signature:(const char *file, int line, int type, size_t size)
mtype_zfree	memory.c	/^mtype_zfree (const char *file, int line, int type, void *ptr)$/;"	f	language:C	signature:(const char *file, int line, int type, void *ptr)
mtype_zmalloc	memory.c	/^mtype_zmalloc (const char *file, int line, int type, size_t size)$/;"	f	language:C	signature:(const char *file, int line, int type, size_t size)
mtype_zrealloc	memory.c	/^mtype_zrealloc (const char *file, int line, int type, void *ptr, size_t size)$/;"	f	language:C	signature:(const char *file, int line, int type, void *ptr, size_t size)
mtype_zstrdup	memory.c	/^mtype_zstrdup (const char *file, int line, int type, const char *str)$/;"	f	language:C	signature:(const char *file, int line, int type, const char *str)
multiple	command.h	/^  vector multiple; \/* vector of cmd_token, type == FINAL *\/$/;"	m	language:C++	struct:cmd_token
my_index	getopt.c	/^my_index (str, chr)$/;"	f	language:C	file:
my_index	getopt.c	203;"	d	language:C	file:
name	command.c	/^  const char *name;$/;"	m	language:C	struct:facility_map	file:
name	command.h	/^  char *name;$/;"	m	language:C++	struct:host
name	filter.h	/^  char *name;$/;"	m	language:C++	struct:access_list
name	getopt.h	/^  const char *name;$/;"	m	language:C++	struct:option
name	if.h	/^  char name[INTERFACE_NAMSIZ + 1];$/;"	m	language:C++	struct:interface
name	keychain.h	/^  char *name;$/;"	m	language:C++	struct:keychain
name	memory.c	/^  char *name;$/;"	m	language:C	struct:__anon12	file:
name	memory.c	/^  const char *name;$/;"	m	language:C	struct:__anon11	file:
name	memory.h	/^  const char *name;$/;"	m	language:C++	struct:mlist
name	plist.h	/^  char *name;$/;"	m	language:C++	struct:prefix_list
name	routemap.h	/^  char *name;$/;"	m	language:C++	struct:route_map
name	smux.c	/^  oid name[MAX_OID_LEN];$/;"	m	language:C	struct:subtree	file:
name	smux.h	/^  oid name[MAX_OID_LEN];$/;"	m	language:C++	struct:trap_object
name	workqueue.h	/^  char *name;                         \/* work queue name *\/$/;"	m	language:C++	struct:work_queue
name_len	smux.c	/^  u_char name_len;$/;"	m	language:C	struct:subtree	file:
namelen	smux.h	/^  int namelen; \/* Negative if the object is not indexed *\/$/;"	m	language:C++	struct:trap_object
netmask_str2prefix_str	prefix.c	/^netmask_str2prefix_str (const char *net_str, const char *mask_str,$/;"	f	language:C	signature:(const char *net_str, const char *mask_str, char *prefix_str)
newline_anchor	regex-gnu.h	/^  unsigned newline_anchor : 1;$/;"	m	language:C++	struct:re_pattern_buffer
next	buffer.c	/^  struct buffer_data *next;$/;"	m	language:C	struct:buffer_data	typeref:struct:buffer_data::buffer_data	file:
next	filter.c	/^  struct filter *next;$/;"	m	language:C	struct:filter	typeref:struct:filter::filter	file:
next	filter.h	/^  struct access_list *next;$/;"	m	language:C++	struct:access_list	typeref:struct:access_list::access_list
next	hash.h	/^  struct hash_backet *next;$/;"	m	language:C++	struct:hash_backet	typeref:struct:hash_backet::hash_backet
next	linklist.h	/^  struct listnode *next;$/;"	m	language:C++	struct:listnode	typeref:struct:listnode::listnode
next	plist.c	/^  struct prefix_list_entry *next;$/;"	m	language:C	struct:prefix_list_entry	typeref:struct:prefix_list_entry::prefix_list_entry	file:
next	plist.h	/^  struct prefix_list *next;$/;"	m	language:C++	struct:prefix_list	typeref:struct:prefix_list::prefix_list
next	routemap.c	/^  struct route_map_rule *next;$/;"	m	language:C	struct:route_map_rule	typeref:struct:route_map_rule::route_map_rule	file:
next	routemap.h	/^  struct route_map *next;$/;"	m	language:C++	struct:route_map	typeref:struct:route_map::route_map
next	routemap.h	/^  struct route_map_index *next;$/;"	m	language:C++	struct:route_map_index	typeref:struct:route_map_index::route_map_index
next	stream.h	/^  struct stream *next;$/;"	m	language:C++	struct:stream	typeref:struct:stream::stream
next	thread.h	/^  struct thread *next;		\/* next pointer of the thread *\/   $/;"	m	language:C++	struct:thread	typeref:struct:thread::thread
next	zebra.h	/^  struct fifo *next;$/;"	m	language:C++	struct:fifo	typeref:struct:fifo::fifo
nextchar	getopt.c	/^static char *nextchar;$/;"	v	language:C	file:
nexthop	zclient.h	/^  struct in6_addr **nexthop;$/;"	m	language:C++	struct:zapi_ipv6	typeref:struct:zapi_ipv6::in6_addr
nexthop	zclient.h	/^  struct in_addr **nexthop;$/;"	m	language:C++	struct:zapi_ipv4	typeref:struct:zapi_ipv4::in_addr
nexthop_num	zclient.h	/^  u_char nexthop_num;$/;"	m	language:C++	struct:zapi_ipv4
nexthop_num	zclient.h	/^  u_char nexthop_num;$/;"	m	language:C++	struct:zapi_ipv6
nextnode	linklist.h	144;"	d	language:C++
nextpref	routemap.h	/^  int nextpref;$/;"	m	language:C++	struct:route_map_index
nextrm	routemap.h	/^  char *nextrm;$/;"	m	language:C++	struct:route_map_index
nmatch	regex.c	/^    size_t nmatch;$/;"	v	language:C
no_argument	getopt.h	109;"	d	language:C++
no_expand	hash.h	/^  int no_expand;$/;"	m	language:C++	struct:hash
no_match	command.c	/^  no_match,$/;"	e	language:C	enum:match_type	file:
no_op	regex.c	/^  no_op = 0,$/;"	e	language:C	enum:__anon22	file:
no_password_check	vty.c	/^static int no_password_check = 0;$/;"	v	language:C	file:
no_sub	regex-gnu.h	/^  unsigned no_sub : 1;$/;"	m	language:C++	struct:re_pattern_buffer
node	command.h	/^  enum node_type node;		$/;"	m	language:C++	struct:cmd_node	typeref:enum:cmd_node::node_type
node	vty.h	/^  int node;$/;"	m	language:C++	struct:vty
node_parent	command.c	/^node_parent ( enum node_type node )$/;"	f	language:C	signature:( enum node_type node )
node_type	command.h	/^enum node_type $/;"	g	language:C++
nonoption_flags_len	getopt.c	/^static int nonoption_flags_len;$/;"	v	language:C	file:
nonoption_flags_max_len	getopt.c	/^static int nonoption_flags_max_len;$/;"	v	language:C	file:
normal_display	plist.c	/^  normal_display,$/;"	e	language:C	enum:display_type	file:
not_bol	regex-gnu.h	/^  unsigned not_bol : 1;$/;"	m	language:C++	struct:re_pattern_buffer
not_eol	regex-gnu.h	/^  unsigned not_eol : 1;$/;"	m	language:C++	struct:re_pattern_buffer
notsyntaxspec	regex.c	/^  notsyntaxspec$/;"	e	language:C	enum:__anon22	file:
notwordbound	regex.c	/^  notwordbound	\/* Succeeds if not at a word boundary.  *\/$/;"	e	language:C	enum:__anon22	file:
notwordchar	regex.c	/^  notwordchar,	\/* Matches any char that is not a word-constituent.  *\/$/;"	e	language:C	enum:__anon22	file:
num	filter.c	/^  struct access_list_list num;$/;"	m	language:C	struct:access_master	typeref:struct:access_master::access_list_list	file:
num	plist.c	/^  struct prefix_list_list num;$/;"	m	language:C	struct:prefix_master	typeref:struct:prefix_master::prefix_list_list	file:
num	privs.c	/^  int num;$/;"	m	language:C	struct:__anon16	file:
num	privs.c	/^  int num;$/;"	m	language:C	struct:_pset	file:
num_append	log.c	/^num_append(char *s, int len, u_long x)$/;"	f	language:C	file:	signature:(char *s, int len, u_long x)
num_regs	regex-gnu.h	/^  unsigned num_regs;$/;"	m	language:C++	struct:re_registers
num_regs	regex.c	/^    unsigned num_regs;$/;"	v	language:C
obuf	vty.h	/^  struct buffer *obuf;$/;"	m	language:C++	struct:vty	typeref:struct:vty::buffer
obuf	zclient.h	/^  struct stream *obuf;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::stream
oid2in_addr	snmp.c	/^oid2in_addr (oid oid[], int len, struct in_addr *addr)$/;"	f	language:C	signature:(oid oid[], int len, struct in_addr *addr)
oid_compare	snmp.c	/^oid_compare (oid *o1, int o1_len, oid *o2, int o2_len)$/;"	f	language:C	signature:(oid *o1, int o1_len, oid *o2, int o2_len)
oid_compare_part	smux.c	/^oid_compare_part (oid *o1, int o1_len, oid *o2, int o2_len)$/;"	f	language:C	file:	signature:(oid *o1, int o1_len, oid *o2, int o2_len)
oid_copy	snmp.c	/^oid_copy (void *dest, const void *src, size_t size)$/;"	f	language:C	signature:(void *dest, const void *src, size_t size)
oid_copy_addr	snmp.c	/^oid_copy_addr (oid oid[], struct in_addr *addr, int len)$/;"	f	language:C	signature:(oid oid[], struct in_addr *addr, int len)
old_regend	regex.c	/^static const char ** old_regstart, ** old_regend;$/;"	v	language:C	file:
old_regstart	regex.c	/^static const char ** old_regstart, ** old_regend;$/;"	v	language:C	file:
on_failure_jump	regex.c	/^  on_failure_jump,$/;"	e	language:C	enum:__anon22	file:
on_failure_keep_string_jump	regex.c	/^  on_failure_keep_string_jump,$/;"	e	language:C	enum:__anon22	file:
open_crashlog	log.c	/^open_crashlog(void)$/;"	f	language:C	file:	signature:(void)
openzlog	log.c	/^openzlog (const char *progname, zlog_proto_t protocol,$/;"	f	language:C	signature:(const char *progname, zlog_proto_t protocol, int syslog_flags, int syslog_facility)
optarg	getopt.c	/^char *optarg = NULL;$/;"	v	language:C
opterr	getopt.c	/^int opterr = 1;$/;"	v	language:C
optind	getopt.c	/^int optind = 1;$/;"	v	language:C
option	getopt.h	/^struct option$/;"	s	language:C++
optional_argument	getopt.h	111;"	d	language:C++
optopt	getopt.c	/^int optopt = '?';$/;"	v	language:C
ordering	getopt.c	/^} ordering;$/;"	v	language:C	typeref:enum:__anon6	file:
orf_prefix	plist.h	/^struct orf_prefix$/;"	s	language:C++
original_argc	getopt.c	/^static int original_argc;$/;"	v	language:C	file:
original_argv	getopt.c	/^static char *const *original_argv;$/;"	v	language:C	file:
p	plist.h	/^  struct prefix p;$/;"	m	language:C++	struct:orf_prefix	typeref:struct:orf_prefix::prefix
p	prefix.h	/^  const struct prefix *p;$/;"	m	language:C++	union:prefix46constptr	typeref:struct:prefix46constptr::prefix
p	prefix.h	/^  struct prefix *p;$/;"	m	language:C++	union:prefix46ptr	typeref:struct:prefix46ptr::prefix
p4	prefix.h	/^  const struct prefix_ipv4 *p4;$/;"	m	language:C++	union:prefix46constptr	typeref:struct:prefix46constptr::prefix_ipv4
p4	prefix.h	/^  struct prefix_ipv4 *p4;$/;"	m	language:C++	union:prefix46ptr	typeref:struct:prefix46ptr::prefix_ipv4
p6	prefix.h	/^  const struct prefix_ipv6 *p6;$/;"	m	language:C++	union:prefix46constptr	typeref:struct:prefix46constptr::prefix_ipv6
p6	prefix.h	/^  struct prefix_ipv6 *p6;$/;"	m	language:C++	union:prefix46ptr	typeref:struct:prefix46ptr::prefix_ipv6
partly_match	command.c	/^  partly_match,$/;"	e	language:C	enum:match_type	file:
password	command.h	/^  char *password;$/;"	m	language:C++	struct:host
password_encrypt	command.h	/^  char *password_encrypt;$/;"	m	language:C++	struct:host
pattern_offset_t	regex.c	/^typedef long pattern_offset_t;$/;"	t	language:C	file:
pause_prefix	table.h	/^  struct prefix pause_prefix;$/;"	m	language:C++	struct:route_table_iter_t_	typeref:struct:route_table_iter_t_::prefix
pid_output	pid_output.c	/^pid_output (const char *path)$/;"	f	language:C	signature:(const char *path)
pmatch	regex.c	/^    regmatch_t pmatch[];$/;"	v	language:C
pointer	regex.c	/^  unsigned char *pointer;$/;"	m	language:C	union:fail_stack_elt	file:
pop_failure_jump	regex.c	/^  pop_failure_jump,$/;"	e	language:C	enum:__anon22	file:
pos	regex.c	/^     int size, pos;$/;"	v	language:C
posixly_correct	getopt.c	/^static char *posixly_correct;$/;"	v	language:C	file:
pqueue	pqueue.h	/^struct pqueue$/;"	s	language:C++
pqueue_create	pqueue.c	/^pqueue_create (void)$/;"	f	language:C	signature:(void)
pqueue_delete	pqueue.c	/^pqueue_delete (struct pqueue *queue)$/;"	f	language:C	signature:(struct pqueue *queue)
pqueue_dequeue	pqueue.c	/^pqueue_dequeue (struct pqueue *queue)$/;"	f	language:C	signature:(struct pqueue *queue)
pqueue_enqueue	pqueue.c	/^pqueue_enqueue (void *data, struct pqueue *queue)$/;"	f	language:C	signature:(void *data, struct pqueue *queue)
pqueue_expand	pqueue.c	/^pqueue_expand (struct pqueue *queue)$/;"	f	language:C	file:	signature:(struct pqueue *queue)
pqueue_remove_at	pqueue.c	/^pqueue_remove_at (int index, struct pqueue *queue)$/;"	f	language:C	signature:(int index, struct pqueue *queue)
precision	log.h	/^   int precision;	\/* configuration parameter *\/$/;"	m	language:C++	struct:timestamp_control
pref	routemap.h	/^  int pref;$/;"	m	language:C++	struct:route_map_index
prefix	distribute.h	/^  char *prefix[DISTRIBUTE_MAX];$/;"	m	language:C++	struct:distribute
prefix	filter.c	/^  struct prefix prefix;$/;"	m	language:C	struct:filter_zebra	typeref:struct:filter_zebra::prefix	file:
prefix	plist.c	/^  struct prefix prefix;$/;"	m	language:C	struct:prefix_list_entry	typeref:struct:prefix_list_entry::prefix	file:
prefix	prefix.h	/^    u_char prefix;$/;"	m	language:C++	union:prefix::__anon14
prefix	prefix.h	/^  struct in6_addr prefix __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix_ipv6	typeref:struct:prefix_ipv6::in6_addr
prefix	prefix.h	/^  struct in_addr prefix __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix_ipv4	typeref:struct:prefix_ipv4::in_addr
prefix	prefix.h	/^  uintptr_t prefix __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix_ptr
prefix	prefix.h	/^struct prefix$/;"	s	language:C++
prefix2sockunion	prefix.c	/^prefix2sockunion (const struct prefix *p, union sockunion *su)$/;"	f	language:C	signature:(const struct prefix *p, union sockunion *su)
prefix2str	prefix.c	/^prefix2str (const struct prefix *p, char *str, int size)$/;"	f	language:C	signature:(const struct prefix *p, char *str, int size)
prefix4	prefix.h	/^    struct in_addr prefix4;$/;"	m	language:C++	union:prefix::__anon14	typeref:struct:prefix::__anon14::in_addr
prefix46constptr	prefix.h	/^union prefix46constptr$/;"	u	language:C++
prefix46ptr	prefix.h	/^union prefix46ptr$/;"	u	language:C++
prefix6	prefix.h	/^    struct in6_addr prefix6;$/;"	m	language:C++	union:prefix::__anon14	typeref:struct:prefix::__anon14::in6_addr
prefix6_bit	prefix.c	/^prefix6_bit (const struct in6_addr *prefix, const u_char prefixlen)$/;"	f	language:C	signature:(const struct in6_addr *prefix, const u_char prefixlen)
prefix_bgp_orf_entry	plist.c	/^prefix_bgp_orf_entry (struct stream *s, struct prefix_list *plist,$/;"	f	language:C	signature:(struct stream *s, struct prefix_list *plist, u_char init_flag, u_char permit_flag, u_char deny_flag)
prefix_bgp_orf_remove_all	plist.c	/^prefix_bgp_orf_remove_all (char *name)$/;"	f	language:C	signature:(char *name)
prefix_bgp_orf_set	plist.c	/^prefix_bgp_orf_set (char *name, afi_t afi, struct orf_prefix *orfp,$/;"	f	language:C	signature:(char *name, afi_t afi, struct orf_prefix *orfp, int permit, int set)
prefix_bgp_show_prefix_list	plist.c	/^prefix_bgp_show_prefix_list (struct vty *vty, afi_t afi, char *name)$/;"	f	language:C	signature:(struct vty *vty, afi_t afi, char *name)
prefix_bit	prefix.c	/^prefix_bit (const u_char *prefix, const u_char prefixlen)$/;"	f	language:C	signature:(const u_char *prefix, const u_char prefixlen)
prefix_blen	prefix.c	/^prefix_blen (const struct prefix *p)$/;"	f	language:C	signature:(const struct prefix *p)
prefix_cmp	prefix.c	/^prefix_cmp (const struct prefix *p1, const struct prefix *p2)$/;"	f	language:C	signature:(const struct prefix *p1, const struct prefix *p2)
prefix_common_bits	prefix.c	/^prefix_common_bits (const struct prefix *p1, const struct prefix *p2)$/;"	f	language:C	signature:(const struct prefix *p1, const struct prefix *p2)
prefix_copy	prefix.c	/^prefix_copy (struct prefix *dest, const struct prefix *src)$/;"	f	language:C	signature:(struct prefix *dest, const struct prefix *src)
prefix_entry_dup_check	plist.c	/^prefix_entry_dup_check (struct prefix_list *plist,$/;"	f	language:C	file:	signature:(struct prefix_list *plist, struct prefix_list_entry *new)
prefix_family_str	prefix.c	/^prefix_family_str (const struct prefix *p)$/;"	f	language:C	signature:(const struct prefix *p)
prefix_free	prefix.c	/^prefix_free (struct prefix *p)$/;"	f	language:C	signature:(struct prefix *p)
prefix_ipv4	prefix.h	/^struct prefix_ipv4$/;"	s	language:C++
prefix_ipv4_any	prefix.c	/^prefix_ipv4_any (const struct prefix_ipv4 *p)$/;"	f	language:C	signature:(const struct prefix_ipv4 *p)
prefix_ipv4_free	prefix.c	/^prefix_ipv4_free (struct prefix_ipv4 *p)$/;"	f	language:C	signature:(struct prefix_ipv4 *p)
prefix_ipv4_new	prefix.c	/^prefix_ipv4_new ()$/;"	f	language:C
prefix_ipv6	prefix.h	/^struct prefix_ipv6$/;"	s	language:C++
prefix_ipv6_free	prefix.c	/^prefix_ipv6_free (struct prefix_ipv6 *p)$/;"	f	language:C	signature:(struct prefix_ipv6 *p)
prefix_ipv6_new	prefix.c	/^prefix_ipv6_new (void)$/;"	f	language:C	signature:(void)
prefix_ipv6_node	plist.c	/^static struct cmd_node prefix_ipv6_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
prefix_list	plist.h	/^struct prefix_list$/;"	s	language:C++
prefix_list_add_hook	plist.c	/^prefix_list_add_hook (void (*func) (struct prefix_list *plist))$/;"	f	language:C	signature:(void (*func) (struct prefix_list *plist))
prefix_list_apply	plist.c	/^prefix_list_apply (struct prefix_list *plist, void *object)$/;"	f	language:C	signature:(struct prefix_list *plist, void *object)
prefix_list_delete	plist.c	/^prefix_list_delete (struct prefix_list *plist)$/;"	f	language:C	file:	signature:(struct prefix_list *plist)
prefix_list_delete_hook	plist.c	/^prefix_list_delete_hook (void (*func) (struct prefix_list *plist))$/;"	f	language:C	signature:(void (*func) (struct prefix_list *plist))
prefix_list_entry	plist.c	/^struct prefix_list_entry$/;"	s	language:C	file:
prefix_list_entry_add	plist.c	/^prefix_list_entry_add (struct prefix_list *plist,$/;"	f	language:C	file:	signature:(struct prefix_list *plist, struct prefix_list_entry *pentry)
prefix_list_entry_delete	plist.c	/^prefix_list_entry_delete (struct prefix_list *plist, $/;"	f	language:C	file:	signature:(struct prefix_list *plist, struct prefix_list_entry *pentry, int update_list)
prefix_list_entry_free	plist.c	/^prefix_list_entry_free (struct prefix_list_entry *pentry)$/;"	f	language:C	file:	signature:(struct prefix_list_entry *pentry)
prefix_list_entry_lookup	plist.c	/^prefix_list_entry_lookup (struct prefix_list *plist, struct prefix *prefix,$/;"	f	language:C	file:	signature:(struct prefix_list *plist, struct prefix *prefix, enum prefix_list_type type, int seq, int le, int ge)
prefix_list_entry_make	plist.c	/^prefix_list_entry_make (struct prefix *prefix, enum prefix_list_type type,$/;"	f	language:C	file:	signature:(struct prefix *prefix, enum prefix_list_type type, int seq, int le, int ge, int any)
prefix_list_entry_match	plist.c	/^prefix_list_entry_match (struct prefix_list_entry *pentry, struct prefix *p)$/;"	f	language:C	file:	signature:(struct prefix_list_entry *pentry, struct prefix *p)
prefix_list_entry_new	plist.c	/^prefix_list_entry_new (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_free	plist.c	/^prefix_list_free (struct prefix_list *plist)$/;"	f	language:C	file:	signature:(struct prefix_list *plist)
prefix_list_get	plist.c	/^prefix_list_get (afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(afi_t afi, const char *name)
prefix_list_init	plist.c	/^prefix_list_init ()$/;"	f	language:C
prefix_list_init_ipv4	plist.c	/^prefix_list_init_ipv4 (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_init_ipv6	plist.c	/^prefix_list_init_ipv6 (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_insert	plist.c	/^prefix_list_insert (afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(afi_t afi, const char *name)
prefix_list_list	plist.c	/^struct prefix_list_list$/;"	s	language:C	file:
prefix_list_lookup	plist.c	/^prefix_list_lookup (afi_t afi, const char *name)$/;"	f	language:C	signature:(afi_t afi, const char *name)
prefix_list_new	plist.c	/^prefix_list_new (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_print	plist.c	/^prefix_list_print (struct prefix_list *plist)$/;"	f	language:C	file:	signature:(struct prefix_list *plist)
prefix_list_reset	plist.c	/^prefix_list_reset ()$/;"	f	language:C
prefix_list_reset_ipv4	plist.c	/^prefix_list_reset_ipv4 (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_reset_ipv6	plist.c	/^prefix_list_reset_ipv6 (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_reset_orf	plist.c	/^prefix_list_reset_orf (void)$/;"	f	language:C	file:	signature:(void)
prefix_list_type	plist.h	/^enum prefix_list_type $/;"	g	language:C++
prefix_list_type_str	plist.c	/^prefix_list_type_str (struct prefix_list_entry *pentry)$/;"	f	language:C	file:	signature:(struct prefix_list_entry *pentry)
prefix_ls	prefix.h	/^struct prefix_ls$/;"	s	language:C++
prefix_master	plist.c	/^struct prefix_master$/;"	s	language:C	file:
prefix_master_get	plist.c	/^prefix_master_get (afi_t afi)$/;"	f	language:C	file:	signature:(afi_t afi)
prefix_master_ipv4	plist.c	/^static struct prefix_master prefix_master_ipv4 = $/;"	v	language:C	typeref:struct:prefix_master	file:
prefix_master_ipv6	plist.c	/^static struct prefix_master prefix_master_ipv6 = $/;"	v	language:C	typeref:struct:prefix_master	file:
prefix_master_orf	plist.c	/^static struct prefix_master prefix_master_orf = $/;"	v	language:C	typeref:struct:prefix_master	file:
prefix_match	prefix.c	/^prefix_match (const struct prefix *n, const struct prefix *p)$/;"	f	language:C	signature:(const struct prefix *n, const struct prefix *p)
prefix_name_type	plist.h	/^enum prefix_name_type$/;"	g	language:C++
prefix_new	prefix.c	/^prefix_new ()$/;"	f	language:C
prefix_new_seq_get	plist.c	/^prefix_new_seq_get (struct prefix_list *plist)$/;"	f	language:C	file:	signature:(struct prefix_list *plist)
prefix_node	plist.c	/^static struct cmd_node prefix_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
prefix_ptr	prefix.h	/^struct prefix_ptr$/;"	s	language:C++
prefix_rd	prefix.h	/^struct prefix_rd$/;"	s	language:C++
prefix_same	prefix.c	/^prefix_same (const struct prefix *p1, const struct prefix *p2)$/;"	f	language:C	signature:(const struct prefix *p1, const struct prefix *p2)
prefix_seq_check	plist.c	/^prefix_seq_check (struct prefix_list *plist, int seq)$/;"	f	language:C	file:	signature:(struct prefix_list *plist, int seq)
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix_ipv4
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix_ipv6
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix_ls
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix_ptr
prefixlen	prefix.h	/^  u_char prefixlen;$/;"	m	language:C++	struct:prefix_rd
prev	filter.c	/^  struct filter *prev;$/;"	m	language:C	struct:filter	typeref:struct:filter::filter	file:
prev	filter.h	/^  struct access_list *prev;$/;"	m	language:C++	struct:access_list	typeref:struct:access_list::access_list
prev	linklist.h	/^  struct listnode *prev;$/;"	m	language:C++	struct:listnode	typeref:struct:listnode::listnode
prev	plist.c	/^  struct prefix_list_entry *prev;$/;"	m	language:C	struct:prefix_list_entry	typeref:struct:prefix_list_entry::prefix_list_entry	file:
prev	plist.h	/^  struct prefix_list *prev;$/;"	m	language:C++	struct:prefix_list	typeref:struct:prefix_list::prefix_list
prev	routemap.c	/^  struct route_map_rule *prev;$/;"	m	language:C	struct:route_map_rule	typeref:struct:route_map_rule::route_map_rule	file:
prev	routemap.h	/^  struct route_map *prev;$/;"	m	language:C++	struct:route_map	typeref:struct:route_map::route_map
prev	routemap.h	/^  struct route_map_index *prev;$/;"	m	language:C++	struct:route_map_index	typeref:struct:route_map_index::route_map_index
prev	thread.h	/^  struct thread *prev;		\/* previous pointer of the thread *\/$/;"	m	language:C++	struct:thread	typeref:struct:thread::thread
prev	zebra.h	/^  struct fifo *prev;$/;"	m	language:C++	struct:fifo	typeref:struct:fifo::fifo
prevfile	queue.h	/^	char * prevfile;$/;"	m	language:C++	struct:qm_trace
prevline	queue.h	/^	int prevline;$/;"	m	language:C++	struct:qm_trace
print_compiled_pattern	regex.c	/^print_compiled_pattern (bufp)$/;"	f	language:C
print_double_string	regex.c	/^print_double_string (where, string1, size1, string2, size2)$/;"	f	language:C
print_fastmap	regex.c	/^print_fastmap (fastmap)$/;"	f	language:C
print_partial_compiled_pattern	regex.c	/^print_partial_compiled_pattern (start, end)$/;"	f	language:C
print_version	command.c	/^print_version (const char *progname)$/;"	f	language:C	signature:(const char *progname)
printchar	regex.c	/^printchar (c)$/;"	f	language:C
program_counter	sigevent.c	/^program_counter(void *context)$/;"	f	language:C	file:	signature:(void *context)
prompt	command.h	/^  const char *prompt;			$/;"	m	language:C++	struct:cmd_node
proto_name2num	log.c	/^proto_name2num(const char *s)$/;"	f	language:C	signature:(const char *s)
proto_redistnum	log.c	/^proto_redistnum(int afi, const char *s)$/;"	f	language:C	signature:(int afi, const char *s)
protocol	log.h	/^  zlog_proto_t protocol;$/;"	m	language:C++	struct:zlog
pset_t	privs.c	/^typedef priv_set_t pset_t;$/;"	t	language:C	file:
pset_t	privs.c	/^typedef struct _pset pset_t;$/;"	t	language:C	typeref:struct:_pset	file:
pstorage_t	privs.c	/^typedef cap_t pstorage_t;$/;"	t	language:C	file:
pstorage_t	privs.c	/^typedef priv_set_t *pstorage_t;$/;"	t	language:C	file:
ptr	prefix.h	/^    uintptr_t ptr;$/;"	m	language:C++	union:prefix::__anon14
push_argument	command.c	/^push_argument(int *argc, const char **argv, const char *arg)$/;"	f	language:C	file:	signature:(int *argc, const char **argv, const char *arg)
push_dummy_failure	regex.c	/^  push_dummy_failure,$/;"	e	language:C	enum:__anon22	file:
pvalue_t	privs.c	/^typedef cap_value_t pvalue_t;$/;"	t	language:C	file:
pvalue_t	privs.c	/^typedef priv_t pvalue_t;$/;"	t	language:C	file:
qm_trace	queue.h	/^struct qm_trace {$/;"	s	language:C++
quagga_clkid	thread.h	/^enum quagga_clkid {$/;"	g	language:C++
quagga_get_relative	thread.c	/^quagga_get_relative (struct timeval *tv)$/;"	f	language:C	file:	signature:(struct timeval *tv)
quagga_gettime	thread.c	/^quagga_gettime (enum quagga_clkid clkid, struct timeval *tv)$/;"	f	language:C	signature:(enum quagga_clkid clkid, struct timeval *tv)
quagga_gettimeofday	thread.c	/^quagga_gettimeofday (struct timeval *tv)$/;"	f	language:C	file:	signature:(struct timeval *tv)
quagga_gettimeofday_relative_adjust	thread.c	/^quagga_gettimeofday_relative_adjust (void)$/;"	f	language:C	file:	signature:(void)
quagga_real_stabilised	thread.c	/^quagga_real_stabilised (struct timeval *tv)$/;"	f	language:C	file:	signature:(struct timeval *tv)
quagga_sigevent_master_t	sigevent.c	/^struct quagga_sigevent_master_t$/;"	s	language:C	file:
quagga_sigevent_process	sigevent.c	/^quagga_sigevent_process (void)$/;"	f	language:C	signature:(void)
quagga_signal_handler	sigevent.c	/^quagga_signal_handler (int signo)$/;"	f	language:C	file:	signature:(int signo)
quagga_signal_t	sigevent.h	/^struct quagga_signal_t$/;"	s	language:C++
quagga_signal_timer	sigevent.c	/^quagga_signal_timer (struct thread *t)$/;"	f	language:C	signature:(struct thread *t)
quagga_time	thread.c	/^quagga_time (time_t *t)$/;"	f	language:C	signature:(time_t *t)
quagga_timestamp	log.c	/^quagga_timestamp(int timestamp_precision, char *buf, size_t buflen)$/;"	f	language:C	signature:(int timestamp_precision, char *buf, size_t buflen)
ran	workqueue.h	/^  unsigned short ran;			\/* # of times item has been run *\/$/;"	m	language:C++	struct:work_queue_item
range	regex.c	/^     int range;$/;"	v	language:C
range	regex.c	/^     int size, startpos, range;$/;"	v	language:C
range_match	command.c	/^  range_match,$/;"	e	language:C	enum:match_type	file:
rangecount	plist.h	/^  int rangecount;$/;"	m	language:C++	struct:prefix_list
re_comp	regex.c	/^re_comp (s)$/;"	f	language:C
re_comp_buf	regex.c	/^static struct re_pattern_buffer re_comp_buf;$/;"	v	language:C	typeref:struct:re_pattern_buffer	file:
re_compile_fastmap	regex.c	/^re_compile_fastmap (bufp)$/;"	f	language:C
re_compile_fastmap	regex.c	83;"	d	language:C	file:
re_compile_pattern	regex.c	/^re_compile_pattern (pattern, length, bufp)$/;"	f	language:C
re_compile_pattern	regex.c	78;"	d	language:C	file:
re_error_msgid	regex.c	/^static const char re_error_msgid[] =$/;"	v	language:C	file:
re_error_msgid_idx	regex.c	/^static const size_t re_error_msgid_idx[] =$/;"	v	language:C	file:
re_exec	regex.c	/^re_exec (s)$/;"	f	language:C
re_match	regex.c	74;"	d	language:C	file:
re_match_2	regex.c	/^re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)$/;"	f	language:C
re_match_2	regex.c	72;"	d	language:C	file:
re_match_2_internal	regex.c	/^re_match_2_internal (bufp, string1, size1, string2, size2, pos, regs, stop)$/;"	f	language:C	file:
re_max_failures	regex.c	/^int re_max_failures = 20000;$/;"	v	language:C
re_max_failures	regex.c	/^int re_max_failures = 2000;$/;"	v	language:C
re_max_failures	regex.c	/^long int re_max_failures = 2000;$/;"	v	language:C
re_max_failures	regex.c	/^long int re_max_failures = 4000;$/;"	v	language:C
re_nsub	regex-gnu.h	/^  size_t re_nsub;$/;"	m	language:C++	struct:re_pattern_buffer
re_opcode_t	regex.c	/^} re_opcode_t;$/;"	t	language:C	typeref:enum:__anon22	file:
re_pattern_buffer	regex-gnu.h	/^struct re_pattern_buffer$/;"	s	language:C++
re_registers	regex-gnu.h	/^struct re_registers$/;"	s	language:C++
re_search	regex.c	76;"	d	language:C	file:
re_search_2	regex.c	81;"	d	language:C	file:
re_set_registers	regex.c	70;"	d	language:C	file:
re_set_syntax	regex.c	/^re_set_syntax (syntax)$/;"	f	language:C
re_set_syntax	regex.c	80;"	d	language:C	file:
re_syntax_options	regex.c	/^reg_syntax_t re_syntax_options;$/;"	v	language:C
re_syntax_table	regex.c	/^static char re_syntax_table[CHAR_SET_SIZE];$/;"	v	language:C	file:
read	thread.h	/^  struct thread_list read;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::thread_list
readfd	thread.h	/^  fd_set readfd;$/;"	m	language:C++	struct:thread_master
readn	network.c	/^readn (int fd, u_char *ptr, int nbytes)$/;"	f	language:C	signature:(int fd, u_char *ptr, int nbytes)
ready	thread.h	/^  struct thread_list ready;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::thread_list
real	thread.h	/^  struct timeval real;$/;"	m	language:C++	struct:rusage_t	typeref:struct:rusage_t::timeval
real	thread.h	/^  struct timeval real;$/;"	m	language:C++	struct:thread	typeref:struct:thread::timeval
real	thread.h	/^  } real;$/;"	m	language:C++	struct:cpu_thread_history	typeref:struct:cpu_thread_history::time_stats
recent	plist.c	/^  struct prefix_list *recent;$/;"	m	language:C	struct:prefix_master	typeref:struct:prefix_master::prefix_list	file:
recent_relative_time	thread.c	/^recent_relative_time (void)$/;"	f	language:C	signature:(void)
recent_time	thread.c	/^struct timeval recent_time;$/;"	v	language:C	typeref:struct:timeval
record_priority	log.h	/^  int record_priority;	\/* should messages logged through stdio include the$/;"	m	language:C++	struct:zlog
redist	zclient.h	/^  u_char redist[ZEBRA_ROUTE_MAX];$/;"	m	language:C++	struct:zclient
redist_default	zclient.h	/^  u_char redist_default;$/;"	m	language:C++	struct:zclient
refcnt	plist.c	/^  unsigned long refcnt;$/;"	m	language:C	struct:prefix_list_entry	file:
reg_dummy	regex.c	/^static const char **reg_dummy;$/;"	v	language:C	file:
reg_errcode_t	regex-gnu.h	/^} reg_errcode_t;$/;"	t	language:C++	typeref:enum:__anon36
reg_info	regex.c	/^static register_info_type *reg_info;$/;"	v	language:C	file:
reg_info_dummy	regex.c	/^static register_info_type *reg_info_dummy;$/;"	v	language:C	file:
reg_syntax_t	regex-gnu.h	/^typedef unsigned long int reg_syntax_t;$/;"	t	language:C++
reg_unset_dummy	regex.c	/^static char reg_unset_dummy;$/;"	v	language:C	file:
regcomp	regex.c	/^regcomp (preg, pattern, cflags)$/;"	f	language:C
regcomp	regex.c	67;"	d	language:C	file:
regend	regex.c	/^static const char **     regstart, **     regend;$/;"	v	language:C	file:
regerror	regex.c	68;"	d	language:C	file:
regex_compile	regex.c	/^regex_compile (pattern, size, syntax, bufp)$/;"	f	language:C	file:
regex_grow_registers	regex.c	/^regex_grow_registers (num_regs)$/;"	f	language:C	file:
regex_t	regex-gnu.h	/^typedef struct re_pattern_buffer regex_t;$/;"	t	language:C++	typeref:struct:re_pattern_buffer
regexec	regex.c	66;"	d	language:C	file:
regfree	regex.c	65;"	d	language:C	file:
register_info_type	regex.c	/^} register_info_type;$/;"	t	language:C	typeref:union:__anon25	file:
registered	smux.c	/^  int registered;$/;"	m	language:C	struct:subtree	file:
regmatch_t	regex-gnu.h	/^} regmatch_t;$/;"	t	language:C++	typeref:struct:__anon37
regnum	regex.c	/^  regnum_t regnum;$/;"	m	language:C	struct:__anon27	file:
regnum_t	regex.c	/^typedef unsigned regnum_t;$/;"	t	language:C	file:
regoff_t	regex-gnu.h	/^typedef int regoff_t;$/;"	t	language:C++
regs	regex.c	/^     struct re_registers *regs;$/;"	v	language:C	typeref:struct:re_registers
regs_allocated	regex-gnu.h	/^  unsigned regs_allocated : 2;$/;"	m	language:C++	struct:re_pattern_buffer
regs_allocated_size	regex.c	/^static int regs_allocated_size;$/;"	v	language:C	file:
regstart	regex.c	/^static const char **     regstart, **     regend;$/;"	v	language:C	file:
relative_time	thread.c	/^static struct timeval relative_time;$/;"	v	language:C	typeref:struct:timeval	file:
relative_time_base	thread.c	/^static struct timeval relative_time_base;$/;"	v	language:C	typeref:struct:timeval	file:
remark	filter.h	/^  char *remark;$/;"	m	language:C++	struct:access_list
required_argument	getopt.h	110;"	d	language:C++
restrict	config.h	852;"	d	language:C++
restricted_mode	vty.c	/^static u_char restricted_mode = 0;$/;"	v	language:C	file:
restricted_mode_default	vty.c	/^static const u_char restricted_mode_default = 0;$/;"	v	language:C	file:
restricted_node	command.c	/^static struct cmd_node restricted_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
rm_eo	regex-gnu.h	/^  regoff_t rm_eo;  \/* Byte offset from string's start to substring's end.  *\/$/;"	m	language:C++	struct:__anon37
rm_so	regex-gnu.h	/^  regoff_t rm_so;  \/* Byte offset from string's start to substring's start.  *\/$/;"	m	language:C++	struct:__anon37
rmap_node	routemap.c	/^static struct cmd_node rmap_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
route_common	table.c	/^route_common (struct prefix *n, struct prefix *p, struct prefix *new)$/;"	f	language:C	file:	signature:(struct prefix *n, struct prefix *p, struct prefix *new)
route_get_subtree_next	table.c	/^route_get_subtree_next (struct route_node *node)$/;"	f	language:C	file:	signature:(struct route_node *node)
route_lock_node	table.c	/^route_lock_node (struct route_node *node)$/;"	f	language:C	signature:(struct route_node *node)
route_map	routemap.h	/^struct route_map$/;"	s	language:C++
route_map_add	routemap.c	/^route_map_add (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
route_map_add_hook	routemap.c	/^route_map_add_hook (void (*func) (const char *))$/;"	f	language:C	signature:(void (*func) (const char *))
route_map_add_match	routemap.c	/^route_map_add_match (struct route_map_index *index, const char *match_name,$/;"	f	language:C	signature:(struct route_map_index *index, const char *match_name, const char *match_arg)
route_map_add_set	routemap.c	/^route_map_add_set (struct route_map_index *index, const char *set_name,$/;"	f	language:C	signature:(struct route_map_index *index, const char *set_name, const char *set_arg)
route_map_apply	routemap.c	/^route_map_apply (struct route_map *map, struct prefix *prefix,$/;"	f	language:C	signature:(struct route_map *map, struct prefix *prefix, route_map_object_t type, void *object)
route_map_apply_match	routemap.c	/^route_map_apply_match (struct route_map_rule_list *match_list,$/;"	f	language:C	file:	signature:(struct route_map_rule_list *match_list, struct prefix *prefix, route_map_object_t type, void *object)
route_map_config_write	routemap.c	/^route_map_config_write (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
route_map_delete	routemap.c	/^route_map_delete (struct route_map *map)$/;"	f	language:C	file:	signature:(struct route_map *map)
route_map_delete_hook	routemap.c	/^route_map_delete_hook (void (*func) (const char *))$/;"	f	language:C	signature:(void (*func) (const char *))
route_map_delete_match	routemap.c	/^route_map_delete_match (struct route_map_index *index, const char *match_name,$/;"	f	language:C	signature:(struct route_map_index *index, const char *match_name, const char *match_arg)
route_map_delete_set	routemap.c	/^route_map_delete_set (struct route_map_index *index, const char *set_name,$/;"	f	language:C	signature:(struct route_map_index *index, const char *set_name, const char *set_arg)
route_map_empty	routemap.c	/^route_map_empty (struct route_map *map)$/;"	f	language:C	file:	signature:(struct route_map *map)
route_map_end_t	routemap.h	/^} route_map_end_t;$/;"	t	language:C++	typeref:enum:__anon3
route_map_event_hook	routemap.c	/^route_map_event_hook (void (*func) (route_map_event_t, const char *))$/;"	f	language:C	signature:(void (*func) (route_map_event_t, const char *))
route_map_event_t	routemap.h	/^} route_map_event_t;$/;"	t	language:C++	typeref:enum:__anon4
route_map_finish	routemap.c	/^route_map_finish (void)$/;"	f	language:C	signature:(void)
route_map_get	routemap.c	/^route_map_get (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
route_map_index	routemap.h	/^struct route_map_index$/;"	s	language:C++
route_map_index_add	routemap.c	/^route_map_index_add (struct route_map *map, enum route_map_type type,$/;"	f	language:C	file:	signature:(struct route_map *map, enum route_map_type type, int pref)
route_map_index_delete	routemap.c	/^route_map_index_delete (struct route_map_index *index, int notify)$/;"	f	language:C	file:	signature:(struct route_map_index *index, int notify)
route_map_index_get	routemap.c	/^route_map_index_get (struct route_map *map, enum route_map_type type, $/;"	f	language:C	file:	signature:(struct route_map *map, enum route_map_type type, int pref)
route_map_index_lookup	routemap.c	/^route_map_index_lookup (struct route_map *map, enum route_map_type type,$/;"	f	language:C	file:	signature:(struct route_map *map, enum route_map_type type, int pref)
route_map_index_new	routemap.c	/^route_map_index_new (void)$/;"	f	language:C	file:	signature:(void)
route_map_init	routemap.c	/^route_map_init (void)$/;"	f	language:C	signature:(void)
route_map_init_vty	routemap.c	/^route_map_init_vty (void)$/;"	f	language:C	signature:(void)
route_map_install_match	routemap.c	/^route_map_install_match (struct route_map_rule_cmd *cmd)$/;"	f	language:C	signature:(struct route_map_rule_cmd *cmd)
route_map_install_set	routemap.c	/^route_map_install_set (struct route_map_rule_cmd *cmd)$/;"	f	language:C	signature:(struct route_map_rule_cmd *cmd)
route_map_list	routemap.c	/^struct route_map_list$/;"	s	language:C	file:
route_map_lookup_by_name	routemap.c	/^route_map_lookup_by_name (const char *name)$/;"	f	language:C	signature:(const char *name)
route_map_lookup_match	routemap.c	/^route_map_lookup_match (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
route_map_lookup_set	routemap.c	/^route_map_lookup_set (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
route_map_master	routemap.c	/^static struct route_map_list route_map_master = { NULL, NULL, NULL, NULL };$/;"	v	language:C	typeref:struct:route_map_list	file:
route_map_new	routemap.c	/^route_map_new (const char *name)$/;"	f	language:C	file:	signature:(const char *name)
route_map_object_t	routemap.h	/^} route_map_object_t;$/;"	t	language:C++	typeref:enum:__anon2
route_map_result_t	routemap.h	/^} route_map_result_t;$/;"	t	language:C++	typeref:enum:__anon1
route_map_rule	routemap.c	/^struct route_map_rule$/;"	s	language:C	file:
route_map_rule_add	routemap.c	/^route_map_rule_add (struct route_map_rule_list *list,$/;"	f	language:C	file:	signature:(struct route_map_rule_list *list, struct route_map_rule *rule)
route_map_rule_cmd	routemap.h	/^struct route_map_rule_cmd$/;"	s	language:C++
route_map_rule_delete	routemap.c	/^route_map_rule_delete (struct route_map_rule_list *list,$/;"	f	language:C	file:	signature:(struct route_map_rule_list *list, struct route_map_rule *rule)
route_map_rule_list	routemap.h	/^struct route_map_rule_list$/;"	s	language:C++
route_map_rule_new	routemap.c	/^route_map_rule_new (void)$/;"	f	language:C	file:	signature:(void)
route_map_type	routemap.h	/^enum route_map_type$/;"	g	language:C++
route_map_type_str	routemap.c	/^route_map_type_str (enum route_map_type type)$/;"	f	language:C	file:	signature:(enum route_map_type type)
route_match_vec	routemap.c	/^static vector route_match_vec;$/;"	v	language:C	file:
route_next	table.c	/^route_next (struct route_node *node)$/;"	f	language:C	signature:(struct route_node *node)
route_next_until	table.c	/^route_next_until (struct route_node *node, struct route_node *limit)$/;"	f	language:C	signature:(struct route_node *node, struct route_node *limit)
route_node	table.h	/^struct route_node$/;"	s	language:C++
route_node_create	table.c	/^route_node_create (route_table_delegate_t *delegate,$/;"	f	language:C	file:	signature:(route_table_delegate_t *delegate, struct route_table *table)
route_node_delete	table.c	/^route_node_delete (struct route_node *node)$/;"	f	language:C	file:	signature:(struct route_node *node)
route_node_destroy	table.c	/^route_node_destroy (route_table_delegate_t *delegate,$/;"	f	language:C	file:	signature:(route_table_delegate_t *delegate, struct route_table *table, struct route_node *node)
route_node_free	table.c	/^route_node_free (struct route_table *table, struct route_node *node)$/;"	f	language:C	file:	signature:(struct route_table *table, struct route_node *node)
route_node_get	table.c	/^route_node_get (struct route_table *const table, struct prefix *p)$/;"	f	language:C	signature:(struct route_table *const table, struct prefix *p)
route_node_lookup	table.c	/^route_node_lookup (const struct route_table *table, struct prefix *p)$/;"	f	language:C	signature:(const struct route_table *table, struct prefix *p)
route_node_match	table.c	/^route_node_match (const struct route_table *table, const struct prefix *p)$/;"	f	language:C	signature:(const struct route_table *table, const struct prefix *p)
route_node_match_ipv4	table.c	/^route_node_match_ipv4 (const struct route_table *table,$/;"	f	language:C	signature:(const struct route_table *table, const struct in_addr *addr)
route_node_match_ipv6	table.c	/^route_node_match_ipv6 (const struct route_table *table,$/;"	f	language:C	signature:(const struct route_table *table, const struct in6_addr *addr)
route_node_new	table.c	/^route_node_new (struct route_table *table)$/;"	f	language:C	file:	signature:(struct route_table *table)
route_node_set	table.c	/^route_node_set (struct route_table *table, struct prefix *prefix)$/;"	f	language:C	file:	signature:(struct route_table *table, struct prefix *prefix)
route_set_vec	routemap.c	/^static vector route_set_vec;$/;"	v	language:C	file:
route_table	table.h	/^struct route_table$/;"	s	language:C++
route_table_count	table.c	/^route_table_count (const struct route_table *table)$/;"	f	language:C	signature:(const struct route_table *table)
route_table_create_node_func_t	table.h	/^typedef struct route_node * (*route_table_create_node_func_t) $/;"	t	language:C++	typeref:struct:route_table_create_node_func_t
route_table_delegate_t	table.h	/^typedef struct route_table_delegate_t_ route_table_delegate_t;$/;"	t	language:C++	typeref:struct:route_table_delegate_t_
route_table_delegate_t_	table.h	/^struct route_table_delegate_t_ $/;"	s	language:C++
route_table_destroy_node_func_t	table.h	/^typedef void (*route_table_destroy_node_func_t) $/;"	t	language:C++
route_table_finish	table.c	/^route_table_finish (struct route_table *rt)$/;"	f	language:C	signature:(struct route_table *rt)
route_table_free	table.c	/^route_table_free (struct route_table *rt)$/;"	f	language:C	file:	signature:(struct route_table *rt)
route_table_get_next	table.c	/^route_table_get_next (const struct route_table *table, struct prefix *p)$/;"	f	language:C	signature:(const struct route_table *table, struct prefix *p)
route_table_get_next_internal	table.c	/^route_table_get_next_internal (const struct route_table *table,$/;"	f	language:C	file:	signature:(const struct route_table *table, struct prefix *p)
route_table_init	table.c	/^route_table_init (void)$/;"	f	language:C	signature:(void)
route_table_init_with_delegate	table.c	/^route_table_init_with_delegate (route_table_delegate_t *delegate)$/;"	f	language:C	signature:(route_table_delegate_t *delegate)
route_table_iter_cleanup	table.c	/^route_table_iter_cleanup (route_table_iter_t * iter)$/;"	f	language:C	signature:(route_table_iter_t * iter)
route_table_iter_init	table.c	/^route_table_iter_init (route_table_iter_t * iter, struct route_table *table)$/;"	f	language:C	signature:(route_table_iter_t * iter, struct route_table *table)
route_table_iter_is_done	table.h	/^route_table_iter_is_done (route_table_iter_t *iter)$/;"	f	language:C++	signature:(route_table_iter_t *iter)
route_table_iter_next	table.h	/^route_table_iter_next (route_table_iter_t * iter)$/;"	f	language:C++	signature:(route_table_iter_t * iter)
route_table_iter_pause	table.c	/^route_table_iter_pause (route_table_iter_t * iter)$/;"	f	language:C	signature:(route_table_iter_t * iter)
route_table_iter_started	table.h	/^route_table_iter_started (route_table_iter_t *iter)$/;"	f	language:C++	signature:(route_table_iter_t *iter)
route_table_iter_state_t	table.h	/^} route_table_iter_state_t;$/;"	t	language:C++	typeref:enum:__anon17
route_table_iter_t	table.h	/^typedef struct route_table_iter_t_ route_table_iter_t;$/;"	t	language:C++	typeref:struct:route_table_iter_t_
route_table_iter_t_	table.h	/^struct route_table_iter_t_ $/;"	s	language:C++
route_table_prefix_iter_cmp	table.c	/^route_table_prefix_iter_cmp (struct prefix *p1, struct prefix *p2)$/;"	f	language:C	signature:(struct prefix *p1, struct prefix *p2)
route_top	table.c	/^route_top (struct route_table *table)$/;"	f	language:C	signature:(struct route_table *table)
route_types	route_types.h	/^static const struct zebra_desc_table route_types[] = {$/;"	v	language:C++	typeref:struct:zebra_desc_table
route_unlock_node	table.c	/^route_unlock_node (struct route_node *node)$/;"	f	language:C	signature:(struct route_node *node)
routemap	if_rmap.h	/^  char *routemap[IF_RMAP_MAX];$/;"	m	language:C++	struct:if_rmap
router_id_update	zclient.h	/^  int (*router_id_update) (int, struct zclient *, uint16_t);$/;"	m	language:C++	struct:zclient
rule_str	routemap.c	/^  char *rule_str;$/;"	m	language:C	struct:route_map_rule	file:
rulecmp	routemap.c	/^rulecmp (const char *dst, const char *src)$/;"	f	language:C	file:	signature:(const char *dst, const char *src)
runs	workqueue.h	/^  unsigned long runs;                 \/* runs count *\/$/;"	m	language:C++	struct:work_queue
rusage_t	thread.h	/^struct rusage_t$/;"	s	language:C++
rx_bytes	if.h	/^  unsigned long rx_bytes;     \/* total bytes received         *\/$/;"	m	language:C++	struct:if_stats
rx_compressed	if.h	/^  unsigned long rx_compressed;$/;"	m	language:C++	struct:if_stats
rx_crc_errors	if.h	/^  unsigned long rx_crc_errors;        \/* recved pkt with crc error    *\/$/;"	m	language:C++	struct:if_stats
rx_dropped	if.h	/^  unsigned long rx_dropped;   \/* no space in linux buffers    *\/$/;"	m	language:C++	struct:if_stats
rx_errors	if.h	/^  unsigned long rx_errors;    \/* bad packets received         *\/$/;"	m	language:C++	struct:if_stats
rx_fifo_errors	if.h	/^  unsigned long rx_fifo_errors;       \/* recv'r fifo overrun          *\/$/;"	m	language:C++	struct:if_stats
rx_frame_errors	if.h	/^  unsigned long rx_frame_errors;      \/* recv'd frame alignment error *\/$/;"	m	language:C++	struct:if_stats
rx_length_errors	if.h	/^  unsigned long rx_length_errors;$/;"	m	language:C++	struct:if_stats
rx_missed_errors	if.h	/^  unsigned long rx_missed_errors;     \/* receiver missed packet     *\/$/;"	m	language:C++	struct:if_stats
rx_multicast	if.h	/^  unsigned long rx_multicast; \/* multicast packets received   *\/$/;"	m	language:C++	struct:if_stats
rx_over_errors	if.h	/^  unsigned long rx_over_errors;       \/* receiver ring buff overflow  *\/$/;"	m	language:C++	struct:if_stats
rx_packets	if.h	/^  unsigned long rx_packets;   \/* total packets received       *\/$/;"	m	language:C++	struct:if_stats
s_reg_t	regex-gnu.h	/^typedef long int s_reg_t;$/;"	t	language:C++
sa	sockunion.h	/^  struct sockaddr sa;$/;"	m	language:C++	union:sockunion	typeref:struct:sockunion::sockaddr
safe_strerror	log.c	/^safe_strerror(int errnum)$/;"	f	language:C	signature:(int errnum)
safi	zclient.h	/^  safi_t safi;$/;"	m	language:C++	struct:zapi_ipv4
safi	zclient.h	/^  safi_t safi;$/;"	m	language:C++	struct:zapi_ipv6
safi_t	zebra.h	/^typedef u_int8_t safi_t;$/;"	t	language:C++
sands	thread.h	/^    struct timeval sands;	\/* rest of time sands value. *\/$/;"	m	language:C++	union:thread::__anon10	typeref:struct:thread::__anon10::timeval
sb_buf	vty.h	/^  unsigned char sb_buf[TELNET_NAWS_SB_LEN];$/;"	m	language:C++	struct:vty
sb_len	vty.h	/^  size_t sb_len;$/;"	m	language:C++	struct:vty
schedfrom	thread.h	/^  const char *schedfrom;$/;"	m	language:C++	struct:thread
schedfrom_line	thread.h	/^  int schedfrom_line;$/;"	m	language:C++	struct:thread
sdl	if.h	/^    struct sockaddr_dl sdl;$/;"	m	language:C++	union:interface::__anon19	typeref:struct:interface::__anon19::sockaddr_dl
sdl_storage	if.h	/^    struct sockaddr_storage sdl_storage;$/;"	m	language:C++	union:interface::__anon19	typeref:struct:interface::__anon19::sockaddr_storage
send	keychain.h	/^  struct key_range send;$/;"	m	language:C++	struct:key	typeref:struct:key::key_range
seq	plist.c	/^  int seq;$/;"	m	language:C	struct:prefix_list_entry	file:
seq	plist.h	/^  u_int32_t seq;$/;"	m	language:C++	struct:orf_prefix
seqnum	plist.c	/^  int seqnum;$/;"	m	language:C	struct:prefix_master	file:
sequential_display	plist.c	/^  sequential_display,$/;"	e	language:C	enum:display_type	file:
set_link	table.c	/^set_link (struct route_node *node, struct route_node *new)$/;"	f	language:C	file:	signature:(struct route_node *node, struct route_node *new)
set_list	routemap.h	/^  struct route_map_rule_list set_list;$/;"	m	language:C++	struct:route_map_index	typeref:struct:route_map_index::route_map_rule_list
set_log_file	command.c	/^set_log_file(struct vty *vty, const char *fname, int loglevel)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *fname, int loglevel)
set_nonblocking	network.c	/^set_nonblocking(int fd)$/;"	f	language:C	signature:(int fd)
set_number_at	regex.c	/^  set_number_at,$/;"	e	language:C	enum:__anon22	file:
setsockopt_ifindex	sockopt.c	/^setsockopt_ifindex (int af, int sock, int val)$/;"	f	language:C	signature:(int af, int sock, int val)
setsockopt_ipv4_ifindex	sockopt.c	/^setsockopt_ipv4_ifindex (int sock, int val)$/;"	f	language:C	file:	signature:(int sock, int val)
setsockopt_ipv4_multicast	sockopt.c	/^setsockopt_ipv4_multicast(int sock,$/;"	f	language:C	signature:(int sock, int optname, unsigned int mcast_addr, unsigned int ifindex)
setsockopt_ipv4_multicast_if	sockopt.c	/^setsockopt_ipv4_multicast_if(int sock,$/;"	f	language:C	signature:(int sock, unsigned int ifindex)
setsockopt_ipv4_tos	sockopt.c	/^setsockopt_ipv4_tos(int sock, int tos)$/;"	f	language:C	signature:(int sock, int tos)
setsockopt_ipv6_checksum	sockopt.c	/^setsockopt_ipv6_checksum (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_ipv6_hoplimit	sockopt.c	/^setsockopt_ipv6_hoplimit (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_ipv6_multicast_hops	sockopt.c	/^setsockopt_ipv6_multicast_hops (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_ipv6_multicast_loop	sockopt.c	/^setsockopt_ipv6_multicast_loop (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_ipv6_pktinfo	sockopt.c	/^setsockopt_ipv6_pktinfo (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_ipv6_tclass	sockopt.c	/^setsockopt_ipv6_tclass(int sock, int tclass)$/;"	f	language:C	signature:(int sock, int tclass)
setsockopt_ipv6_unicast_hops	sockopt.c	/^setsockopt_ipv6_unicast_hops (int sock, int val)$/;"	f	language:C	signature:(int sock, int val)
setsockopt_so_recvbuf	sockopt.c	/^setsockopt_so_recvbuf (int sock, int size)$/;"	f	language:C	signature:(int sock, int size)
setsockopt_so_sendbuf	sockopt.c	/^setsockopt_so_sendbuf (const int sock, int size)$/;"	f	language:C	signature:(const int sock, int size)
show_memory_mallinfo	memory.c	/^show_memory_mallinfo (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
show_memory_vty	memory.c	/^show_memory_vty (struct vty *vty, struct memory_list *list)$/;"	f	language:C	file:	signature:(struct vty *vty, struct memory_list *list)
show_separator	memory.c	/^show_separator(struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
sigc	sigevent.c	/^  int sigc;$/;"	m	language:C	struct:quagga_sigevent_master_t	file:
sigmaster	sigevent.c	/^} sigmaster;$/;"	v	language:C	typeref:struct:quagga_sigevent_master_t
signal	sigevent.h	/^  int signal;                     \/* signal number    *\/$/;"	m	language:C++	struct:quagga_signal_t
signal_init	sigevent.c	/^signal_init (struct thread_master *m, int sigc, $/;"	f	language:C	signature:(struct thread_master *m, int sigc, struct quagga_signal_t signals[])
signal_set	sigevent.c	/^signal_set (int signo)$/;"	f	language:C	file:	signature:(int signo)
signals	sigevent.c	/^  struct quagga_signal_t *signals; $/;"	m	language:C	struct:quagga_sigevent_master_t	typeref:struct:quagga_sigevent_master_t::quagga_signal_t	file:
sin	sockunion.h	/^  struct sockaddr_in sin;$/;"	m	language:C++	union:sockunion	typeref:struct:sockunion::sockaddr_in
sin6	sockunion.h	/^  struct sockaddr_in6 sin6;$/;"	m	language:C++	union:sockunion	typeref:struct:sockunion::sockaddr_in6
size	buffer.c	/^  size_t size;$/;"	m	language:C	struct:buffer	file:
size	hash.h	/^  unsigned int size;$/;"	m	language:C++	struct:hash
size	pqueue.h	/^  int size;$/;"	m	language:C++	struct:pqueue
size	regex.c	/^     int size, pos;$/;"	v	language:C
size	regex.c	/^     int size, startpos, range;$/;"	v	language:C
size	regex.c	/^  unsigned long int size;$/;"	m	language:C	struct:__anon23	file:
size	regex.c	/^  unsigned size;$/;"	m	language:C	struct:__anon24	file:
size	regex.c	/^  unsigned size;$/;"	m	language:C	struct:__anon28	file:
size	stream.h	/^  size_t size;		\/* size of data segment *\/$/;"	m	language:C++	struct:stream
size1	regex.c	/^     int size1, size2;$/;"	v	language:C
size2	regex.c	/^     int size1, size2;$/;"	v	language:C
smux_connect	smux.c	/^smux_connect (struct thread *t)$/;"	f	language:C	file:	signature:(struct thread *t)
smux_connect_thread	smux.c	/^struct thread *smux_connect_thread;$/;"	v	language:C	typeref:struct:thread
smux_event	smux.c	/^enum smux_event {SMUX_SCHEDULE, SMUX_CONNECT, SMUX_READ};$/;"	g	language:C	file:
smux_event	smux.c	/^smux_event (enum smux_event event, int sock)$/;"	f	language:C	signature:(enum smux_event event, int sock)
smux_get	smux.c	/^smux_get (oid *reqid, size_t *reqid_len, int exact, $/;"	f	language:C	file:	signature:(oid *reqid, size_t *reqid_len, int exact, u_char *val_type,void **val, size_t *val_len)
smux_getnext	smux.c	/^smux_getnext (oid *reqid, size_t *reqid_len, int exact, $/;"	f	language:C	file:	signature:(oid *reqid, size_t *reqid_len, int exact, u_char *val_type,void **val, size_t *val_len)
smux_getresp_send	smux.c	/^smux_getresp_send (oid objid[], size_t objid_len, long reqid, long errstat,$/;"	f	language:C	file:	signature:(oid objid[], size_t objid_len, long reqid, long errstat, long errindex, u_char val_type, void *arg, size_t arg_len)
smux_header_generic	snmp.c	/^smux_header_generic (struct variable *v, oid *name, size_t *length, int exact,$/;"	f	language:C	signature:(struct variable *v, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
smux_header_table	snmp.c	/^smux_header_table (struct variable *v, oid *name, size_t *length, int exact,$/;"	f	language:C	signature:(struct variable *v, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method)
smux_init	agentx.c	/^smux_init (struct thread_master *tm)$/;"	f	language:C	signature:(struct thread_master *tm)
smux_init	smux.c	/^smux_init (struct thread_master *tm)$/;"	f	language:C	signature:(struct thread_master *tm)
smux_node	smux.c	/^static struct cmd_node smux_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
smux_oid	smux.c	/^oid *smux_oid = NULL;$/;"	v	language:C
smux_oid_dump	smux.c	/^smux_oid_dump (const char *prefix, const oid *oid, size_t oid_len)$/;"	f	language:C	file:	signature:(const char *prefix, const oid *oid, size_t oid_len)
smux_oid_dup	smux.c	/^smux_oid_dup (oid *objid, size_t objid_len)$/;"	f	language:C	file:	signature:(oid *objid, size_t objid_len)
smux_oid_len	smux.c	/^size_t smux_oid_len;$/;"	v	language:C
smux_open	smux.c	/^smux_open (int sock)$/;"	f	language:C	file:	signature:(int sock)
smux_parse	smux.c	/^smux_parse (u_char *ptr, size_t len)$/;"	f	language:C	file:	signature:(u_char *ptr, size_t len)
smux_parse_close	smux.c	/^smux_parse_close (u_char *ptr, int len)$/;"	f	language:C	file:	signature:(u_char *ptr, int len)
smux_parse_get	smux.c	/^smux_parse_get (u_char *ptr, size_t len, int exact)$/;"	f	language:C	file:	signature:(u_char *ptr, size_t len, int exact)
smux_parse_get_header	smux.c	/^smux_parse_get_header (u_char *ptr, size_t *len, long *reqid)$/;"	f	language:C	file:	signature:(u_char *ptr, size_t *len, long *reqid)
smux_parse_rrsp	smux.c	/^smux_parse_rrsp (u_char *ptr, size_t len)$/;"	f	language:C	file:	signature:(u_char *ptr, size_t len)
smux_parse_set	smux.c	/^smux_parse_set (u_char *ptr, size_t len, int action)$/;"	f	language:C	file:	signature:(u_char *ptr, size_t len, int action)
smux_passwd	smux.c	/^char *smux_passwd = NULL;$/;"	v	language:C
smux_peer_default	smux.c	/^smux_peer_default (void)$/;"	f	language:C	file:	signature:(void)
smux_peer_oid	smux.c	/^smux_peer_oid (struct vty *vty, const char *oid_str, const char *passwd_str)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *oid_str, const char *passwd_str)
smux_read	smux.c	/^smux_read (struct thread *t)$/;"	f	language:C	file:	signature:(struct thread *t)
smux_read_thread	smux.c	/^struct thread *smux_read_thread;$/;"	v	language:C	typeref:struct:thread
smux_register	smux.c	/^smux_register (int sock)$/;"	f	language:C	file:	signature:(int sock)
smux_register_mib	agentx.c	/^smux_register_mib (const char *descr, struct variable *var, $/;"	f	language:C	signature:(const char *descr, struct variable *var, size_t width, int num, oid name[], size_t namelen)
smux_register_mib	smux.c	/^smux_register_mib (const char *descr, struct variable *var, $/;"	f	language:C	signature:(const char *descr, struct variable *var, size_t width, int num, oid name[], size_t namelen)
smux_set	smux.c	/^smux_set (oid *reqid, size_t *reqid_len,$/;"	f	language:C	file:	signature:(oid *reqid, size_t *reqid_len, u_char val_type, void *val, size_t val_len, int action)
smux_sock	smux.c	/^int smux_sock = -1;$/;"	v	language:C
smux_socket	smux.c	/^smux_socket (void)$/;"	f	language:C	file:	signature:(void)
smux_start	smux.c	/^smux_start(void)$/;"	f	language:C	signature:(void)
smux_stop	smux.c	/^smux_stop (void)$/;"	f	language:C	file:	signature:(void)
smux_str2oid	smux.c	/^smux_str2oid (const char *str, oid *oid, size_t *oid_len)$/;"	f	language:C	file:	signature:(const char *str, oid *oid, size_t *oid_len)
smux_trap	agentx.c	/^smux_trap (struct variable *vp, size_t vp_len,$/;"	f	language:C	signature:(struct variable *vp, size_t vp_len, const oid *ename, size_t enamelen, const oid *name, size_t namelen, const oid *iname, size_t inamelen, const struct trap_object *trapobj, size_t trapobjlen, u_char sptrap)
smux_trap	smux.c	/^smux_trap (struct variable *vp, size_t vp_len,$/;"	f	language:C	signature:(struct variable *vp, size_t vp_len, const oid *ename, size_t enamelen, const oid *name, size_t namelen, const oid *iname, size_t inamelen, const struct trap_object *trapobj, size_t trapobjlen, u_char sptrap)
smux_tree_cmp	smux.c	/^smux_tree_cmp(struct subtree *tree1, struct subtree *tree2)$/;"	f	language:C	file:	signature:(struct subtree *tree1, struct subtree *tree2)
smux_var	smux.c	/^smux_var (u_char *ptr, size_t len, oid objid[], size_t *objid_len,$/;"	f	language:C	file:	signature:(u_char *ptr, size_t len, oid objid[], size_t *objid_len, size_t *var_val_len, u_char *var_val_type, void **var_value)
snprintf	str.c	/^snprintf(char *str, size_t size, const char *format, ...)$/;"	f	language:C	signature:(char *str, size_t size, const char *format, ...)
sock	zclient.h	/^  int sock;$/;"	m	language:C++	struct:zclient
socklen_t	zebra.h	/^typedef int socklen_t;$/;"	t	language:C++
sockopt_cork	sockunion.c	/^sockopt_cork (int sock, int onoff)$/;"	f	language:C	signature:(int sock, int onoff)
sockopt_iphdrincl_swab_htosys	sockopt.c	/^sockopt_iphdrincl_swab_htosys (struct ip *iph)$/;"	f	language:C	signature:(struct ip *iph)
sockopt_iphdrincl_swab_systoh	sockopt.c	/^sockopt_iphdrincl_swab_systoh (struct ip *iph)$/;"	f	language:C	signature:(struct ip *iph)
sockopt_minttl	sockunion.c	/^sockopt_minttl (int family, int sock, int minttl)$/;"	f	language:C	signature:(int family, int sock, int minttl)
sockopt_reuseaddr	sockunion.c	/^sockopt_reuseaddr (int sock)$/;"	f	language:C	signature:(int sock)
sockopt_reuseport	sockunion.c	/^sockopt_reuseport (int sock)$/;"	f	language:C	signature:(int sock)
sockopt_tcp_signature	sockopt.c	/^sockopt_tcp_signature (int sock, union sockunion *su, const char *password)$/;"	f	language:C	signature:(int sock, union sockunion *su, const char *password)
sockopt_ttl	sockunion.c	/^sockopt_ttl (int family, int sock, int ttl)$/;"	f	language:C	signature:(int family, int sock, int ttl)
sockopt_v6only	sockunion.c	/^sockopt_v6only (int family, int sock)$/;"	f	language:C	signature:(int family, int sock)
sockunion	sockunion.h	/^union sockunion $/;"	u	language:C++
sockunion2hostprefix	prefix.c	/^sockunion2hostprefix (const union sockunion *su)$/;"	f	language:C	signature:(const union sockunion *su)
sockunion2ip	sockunion.h	83;"	d	language:C++
sockunion2prefix	prefix.c	/^sockunion2prefix (const union sockunion *dest,$/;"	f	language:C	signature:(const union sockunion *dest, const union sockunion *mask)
sockunion2str	sockunion.c	/^sockunion2str (union sockunion *su, char *buf, size_t len)$/;"	f	language:C	signature:(union sockunion *su, char *buf, size_t len)
sockunion_accept	sockunion.c	/^sockunion_accept (int sock, union sockunion *su)$/;"	f	language:C	signature:(int sock, union sockunion *su)
sockunion_bind	sockunion.c	/^sockunion_bind (int sock, union sockunion *su, unsigned short port, $/;"	f	language:C	signature:(int sock, union sockunion *su, unsigned short port, union sockunion *su_addr)
sockunion_cmp	sockunion.c	/^sockunion_cmp (union sockunion *su1, union sockunion *su2)$/;"	f	language:C	signature:(union sockunion *su1, union sockunion *su2)
sockunion_connect	sockunion.c	/^sockunion_connect (int fd, union sockunion *peersu, unsigned short port,$/;"	f	language:C	signature:(int fd, union sockunion *peersu, unsigned short port, unsigned int ifindex)
sockunion_dup	sockunion.c	/^sockunion_dup (union sockunion *su)$/;"	f	language:C	signature:(union sockunion *su)
sockunion_family	sockunion.h	81;"	d	language:C++
sockunion_free	sockunion.c	/^sockunion_free (union sockunion *su)$/;"	f	language:C	signature:(union sockunion *su)
sockunion_getpeername	sockunion.c	/^sockunion_getpeername (int fd)$/;"	f	language:C	signature:(int fd)
sockunion_getsockname	sockunion.c	/^sockunion_getsockname (int fd)$/;"	f	language:C	signature:(int fd)
sockunion_log	sockunion.c	/^sockunion_log (union sockunion *su, char *buf, size_t len)$/;"	f	language:C	file:	signature:(union sockunion *su, char *buf, size_t len)
sockunion_normalise_mapped	sockunion.c	/^sockunion_normalise_mapped (union sockunion *su)$/;"	f	language:C	file:	signature:(union sockunion *su)
sockunion_print	sockunion.c	/^sockunion_print (union sockunion *su)$/;"	f	language:C	file:	signature:(union sockunion *su)
sockunion_same	sockunion.c	/^sockunion_same (union sockunion *su1, union sockunion *su2)$/;"	f	language:C	signature:(union sockunion *su1, union sockunion *su2)
sockunion_sizeof	sockunion.c	/^sockunion_sizeof (union sockunion *su)$/;"	f	language:C	file:	signature:(union sockunion *su)
sockunion_socket	sockunion.c	/^sockunion_socket (union sockunion *su)$/;"	f	language:C	signature:(union sockunion *su)
sockunion_str2su	sockunion.c	/^sockunion_str2su (const char *str)$/;"	f	language:C	signature:(const char *str)
sockunion_stream_socket	sockunion.c	/^sockunion_stream_socket (union sockunion *su)$/;"	f	language:C	signature:(union sockunion *su)
sp	buffer.c	/^  size_t sp;$/;"	m	language:C	struct:buffer_data	file:
spec	workqueue.h	/^  } spec;$/;"	m	language:C++	struct:work_queue	typeref:struct:work_queue::__anon31
stack	regex.c	/^  compile_stack_elt_t *stack;$/;"	m	language:C	struct:__anon28	file:
stack	regex.c	/^  fail_stack_elt_t *stack;$/;"	m	language:C	struct:__anon23	file:
stack	regex.c	/^  fail_stack_elt_t *stack;$/;"	m	language:C	struct:__anon24	file:
start	keychain.h	/^  time_t start;$/;"	m	language:C++	struct:key_range
start	regex-gnu.h	/^  regoff_t *start;$/;"	m	language:C++	struct:re_registers
start_memory	regex.c	/^  start_memory,$/;"	e	language:C	enum:__anon22	file:
startpos	regex.c	/^     int size, startpos, range;$/;"	v	language:C
startpos	regex.c	/^     int startpos;$/;"	v	language:C
starts	regex.c	/^    regoff_t *starts, *ends;$/;"	v	language:C
state	table.h	/^  route_table_iter_state_t state;$/;"	m	language:C++	struct:route_table_iter_t_
stats	if.h	/^  struct if_data stats;$/;"	m	language:C++	struct:interface	typeref:struct:interface::if_data
stats	if.h	/^  struct if_stats stats;$/;"	m	language:C++	struct:interface	typeref:struct:interface::if_stats
status	if.h	/^  u_char status;$/;"	m	language:C++	struct:interface
status	vty.h	/^  enum {VTY_NORMAL, VTY_CLOSE, VTY_MORE, VTY_MORELINE} status;$/;"	m	language:C++	struct:vty	typeref:enum:vty::__anon21
stop	regex.c	/^     int stop;$/;"	v	language:C
stop_memory	regex.c	/^  stop_memory,$/;"	e	language:C	enum:__anon22	file:
store_args_and_env	getopt.c	/^store_args_and_env (int argc, char *const *argv)$/;"	f	language:C	file:	signature:(int argc, char *const *argv)
store_op1	regex.c	/^store_op1 (op, loc, arg)$/;"	f	language:C	file:
store_op2	regex.c	/^store_op2 (op, loc, arg1, arg2)$/;"	f	language:C	file:
str	filter.c	/^  struct access_list_list str;$/;"	m	language:C	struct:access_master	typeref:struct:access_master::access_list_list	file:
str	log.h	/^  const char *str;$/;"	m	language:C++	struct:message
str	plist.c	/^  struct prefix_list_list str;$/;"	m	language:C	struct:prefix_master	typeref:struct:prefix_master::prefix_list_list	file:
str	routemap.h	/^  const char *str;$/;"	m	language:C++	struct:route_map_rule_cmd
str2in6_addr	prefix.c	/^str2in6_addr (const char *str, struct in6_addr *addr)$/;"	f	language:C	signature:(const char *str, struct in6_addr *addr)
str2prefix	prefix.c	/^str2prefix (const char *str, struct prefix *p)$/;"	f	language:C	signature:(const char *str, struct prefix *p)
str2prefix_ipv4	prefix.c	/^str2prefix_ipv4 (const char *str, struct prefix_ipv4 *p)$/;"	f	language:C	signature:(const char *str, struct prefix_ipv4 *p)
str2prefix_ipv6	prefix.c	/^str2prefix_ipv6 (const char *str, struct prefix_ipv6 *p)$/;"	f	language:C	signature:(const char *str, struct prefix_ipv6 *p)
str2sockunion	sockunion.c	/^str2sockunion (const char *str, union sockunion *su)$/;"	f	language:C	signature:(const char *str, union sockunion *su)
str_append	log.c	/^str_append(char *dst, int len, const char *src)$/;"	f	language:C	file:	signature:(char *dst, int len, const char *src)
stream	stream.h	/^struct stream$/;"	s	language:C++
stream_copy	stream.c	/^stream_copy (struct stream *new, struct stream *src)$/;"	f	language:C	signature:(struct stream *new, struct stream *src)
stream_dup	stream.c	/^stream_dup (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_dupcat	stream.c	/^stream_dupcat (struct stream *s1, struct stream *s2, size_t offset)$/;"	f	language:C	signature:(struct stream *s1, struct stream *s2, size_t offset)
stream_empty	stream.c	/^stream_empty (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_fifo	stream.h	/^struct stream_fifo$/;"	s	language:C++
stream_fifo_clean	stream.c	/^stream_fifo_clean (struct stream_fifo *fifo)$/;"	f	language:C	signature:(struct stream_fifo *fifo)
stream_fifo_free	stream.c	/^stream_fifo_free (struct stream_fifo *fifo)$/;"	f	language:C	signature:(struct stream_fifo *fifo)
stream_fifo_head	stream.c	/^stream_fifo_head (struct stream_fifo *fifo)$/;"	f	language:C	signature:(struct stream_fifo *fifo)
stream_fifo_new	stream.c	/^stream_fifo_new (void)$/;"	f	language:C	signature:(void)
stream_fifo_pop	stream.c	/^stream_fifo_pop (struct stream_fifo *fifo)$/;"	f	language:C	signature:(struct stream_fifo *fifo)
stream_fifo_push	stream.c	/^stream_fifo_push (struct stream_fifo *fifo, struct stream *s)$/;"	f	language:C	signature:(struct stream_fifo *fifo, struct stream *s)
stream_flush	stream.c	/^stream_flush (struct stream *s, int fd)$/;"	f	language:C	signature:(struct stream *s, int fd)
stream_forward_endp	stream.c	/^stream_forward_endp (struct stream *s, size_t size)$/;"	f	language:C	signature:(struct stream *s, size_t size)
stream_forward_getp	stream.c	/^stream_forward_getp (struct stream *s, size_t size)$/;"	f	language:C	signature:(struct stream *s, size_t size)
stream_free	stream.c	/^stream_free (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_get	stream.c	/^stream_get (void *dst, struct stream *s, size_t size)$/;"	f	language:C	signature:(void *dst, struct stream *s, size_t size)
stream_get_endp	stream.c	/^stream_get_endp (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_get_getp	stream.c	/^stream_get_getp (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_get_ipv4	stream.c	/^stream_get_ipv4 (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_get_size	stream.c	/^stream_get_size (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_getc	stream.c	/^stream_getc (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_getc_from	stream.c	/^stream_getc_from (struct stream *s, size_t from)$/;"	f	language:C	signature:(struct stream *s, size_t from)
stream_getl	stream.c	/^stream_getl (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_getl_from	stream.c	/^stream_getl_from (struct stream *s, size_t from)$/;"	f	language:C	signature:(struct stream *s, size_t from)
stream_getq	stream.c	/^stream_getq (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_getq_from	stream.c	/^stream_getq_from (struct stream *s, size_t from)$/;"	f	language:C	signature:(struct stream *s, size_t from)
stream_getw	stream.c	/^stream_getw (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_getw_from	stream.c	/^stream_getw_from (struct stream *s, size_t from)$/;"	f	language:C	signature:(struct stream *s, size_t from)
stream_new	stream.c	/^stream_new (size_t size)$/;"	f	language:C	signature:(size_t size)
stream_pnt	stream.c	/^stream_pnt (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_put	stream.c	/^stream_put (struct stream *s, const void *src, size_t size)$/;"	f	language:C	signature:(struct stream *s, const void *src, size_t size)
stream_put_in_addr	stream.c	/^stream_put_in_addr (struct stream *s, struct in_addr *addr)$/;"	f	language:C	signature:(struct stream *s, struct in_addr *addr)
stream_put_ipv4	stream.c	/^stream_put_ipv4 (struct stream *s, u_int32_t l)$/;"	f	language:C	signature:(struct stream *s, u_int32_t l)
stream_put_prefix	stream.c	/^stream_put_prefix (struct stream *s, struct prefix *p)$/;"	f	language:C	signature:(struct stream *s, struct prefix *p)
stream_putc	stream.c	/^stream_putc (struct stream *s, u_char c)$/;"	f	language:C	signature:(struct stream *s, u_char c)
stream_putc_at	stream.c	/^stream_putc_at (struct stream *s, size_t putp, u_char c)$/;"	f	language:C	signature:(struct stream *s, size_t putp, u_char c)
stream_putl	stream.c	/^stream_putl (struct stream *s, u_int32_t l)$/;"	f	language:C	signature:(struct stream *s, u_int32_t l)
stream_putl_at	stream.c	/^stream_putl_at (struct stream *s, size_t putp, u_int32_t l)$/;"	f	language:C	signature:(struct stream *s, size_t putp, u_int32_t l)
stream_putq	stream.c	/^stream_putq (struct stream *s, uint64_t q)$/;"	f	language:C	signature:(struct stream *s, uint64_t q)
stream_putq_at	stream.c	/^stream_putq_at (struct stream *s, size_t putp, uint64_t q)$/;"	f	language:C	signature:(struct stream *s, size_t putp, uint64_t q)
stream_putw	stream.c	/^stream_putw (struct stream *s, u_int16_t w)$/;"	f	language:C	signature:(struct stream *s, u_int16_t w)
stream_putw_at	stream.c	/^stream_putw_at (struct stream *s, size_t putp, u_int16_t w)$/;"	f	language:C	signature:(struct stream *s, size_t putp, u_int16_t w)
stream_read	stream.c	/^stream_read (struct stream *s, int fd, size_t size)$/;"	f	language:C	signature:(struct stream *s, int fd, size_t size)
stream_read	stream.h	189;"	d	language:C++
stream_read_try	stream.c	/^stream_read_try(struct stream *s, int fd, size_t size)$/;"	f	language:C	signature:(struct stream *s, int fd, size_t size)
stream_recvfrom	stream.c	/^stream_recvfrom (struct stream *s, int fd, size_t size, int flags,$/;"	f	language:C	signature:(struct stream *s, int fd, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
stream_recvmsg	stream.c	/^stream_recvmsg (struct stream *s, int fd, struct msghdr *msgh, int flags, $/;"	f	language:C	signature:(struct stream *s, int fd, struct msghdr *msgh, int flags, size_t size)
stream_reset	stream.c	/^stream_reset (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
stream_resize	stream.c	/^stream_resize (struct stream *s, size_t newsize)$/;"	f	language:C	signature:(struct stream *s, size_t newsize)
stream_set_endp	stream.c	/^stream_set_endp (struct stream *s, size_t pos)$/;"	f	language:C	signature:(struct stream *s, size_t pos)
stream_set_getp	stream.c	/^stream_set_getp (struct stream *s, size_t pos)$/;"	f	language:C	signature:(struct stream *s, size_t pos)
stream_write	stream.c	/^stream_write (struct stream *s, const void *ptr, size_t size)$/;"	f	language:C	signature:(struct stream *s, const void *ptr, size_t size)
stream_write	stream.h	190;"	d	language:C++
string	command.c	/^  const char *string; \/* pointer to command string, not modified *\/$/;"	m	language:C	struct:format_parser_state	file:
string	command.h	/^  const char *string;			\/* Command specification by string. *\/$/;"	m	language:C++	struct:cmd_element
string	keychain.h	/^  char *string;$/;"	m	language:C++	struct:key
string	route_types.h	/^  const char *string;$/;"	m	language:C++	struct:zebra_desc_table
string_hash_make	hash.c	/^unsigned int string_hash_make (const char *str)$/;"	f	language:C	signature:(const char *str)
strlcat	str.c	/^strlcat(char *d, const char *s, size_t bufsize)$/;"	f	language:C	signature:(char *d, const char *s, size_t bufsize)
strlcpy	str.c	/^strlcpy(char *d, const char *s, size_t bufsize)$/;"	f	language:C	signature:(char *d, const char *s, size_t bufsize)
strndup	str.c	/^strndup (const char *s, size_t maxlen)$/;"	f	language:C	signature:(const char *s, size_t maxlen)
strnlen	str.c	/^strnlen(const char *s, size_t maxlen)$/;"	f	language:C	signature:(const char *s, size_t maxlen)
subtree	smux.c	/^struct subtree$/;"	s	language:C	file:
succeed	regex.c	/^  succeed,$/;"	e	language:C	enum:__anon22	file:
succeed_n	regex.c	/^  succeed_n,$/;"	e	language:C	enum:__anon22	file:
summary_display	plist.c	/^  summary_display,$/;"	e	language:C	enum:display_type	file:
syntax	regex-gnu.h	/^  reg_syntax_t syntax;$/;"	m	language:C++	struct:re_pattern_buffer
syntaxspec	regex.c	/^  syntaxspec,$/;"	e	language:C	enum:__anon22	file:
syscaps_i	privs.c	/^  pset_t *syscaps_i;     	\/* system-type requested inheritable caps  *\/$/;"	m	language:C	struct:_zprivs_t	file:
syscaps_p	privs.c	/^  pset_t *syscaps_p;		\/* system-type requested permitted caps    *\/$/;"	m	language:C	struct:_zprivs_t	file:
syslog_connect	log.c	/^syslog_connect(void)$/;"	f	language:C	file:	signature:(void)
syslog_facilities	command.c	/^} syslog_facilities[] = $/;"	v	language:C	typeref:struct:facility_map	file:
syslog_options	log.h	/^  int syslog_options;	\/* 2nd arg to openlog *\/$/;"	m	language:C++	struct:zlog
syslog_sigsafe	log.c	/^syslog_sigsafe(int priority, const char *msg, size_t msglen)$/;"	f	language:C	file:	signature:(int priority, const char *msg, size_t msglen)
system_caps	privs.c	/^  pvalue_t *system_caps;$/;"	m	language:C	struct:__anon16	file:
t	sigevent.c	/^  struct thread *t;$/;"	m	language:C	struct:quagga_sigevent_master_t	typeref:struct:quagga_sigevent_master_t::thread	file:
t_calloc	memory.c	/^  unsigned long t_calloc;$/;"	m	language:C	struct:__anon11	file:
t_connect	zclient.h	/^  struct thread *t_connect;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::thread
t_free	memory.c	/^  unsigned long t_free;$/;"	m	language:C	struct:__anon11	file:
t_malloc	memory.c	/^  unsigned long t_malloc;$/;"	m	language:C	struct:__anon11	file:
t_read	vty.h	/^  struct thread *t_read;$/;"	m	language:C++	struct:vty	typeref:struct:vty::thread
t_read	zclient.h	/^  struct thread *t_read;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::thread
t_realloc	memory.c	/^  unsigned long t_realloc;$/;"	m	language:C	struct:__anon11	file:
t_timeout	vty.h	/^  struct thread *t_timeout;$/;"	m	language:C++	struct:vty	typeref:struct:vty::thread
t_write	vty.h	/^  struct thread *t_write;$/;"	m	language:C++	struct:vty	typeref:struct:vty::thread
t_write	zclient.h	/^  struct thread *t_write;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::thread
table	table.h	/^  struct route_table *table;$/;"	m	language:C++	struct:route_table_iter_t_	typeref:struct:route_table_iter_t_::route_table
tail	buffer.c	/^  struct buffer_data *tail;$/;"	m	language:C	struct:buffer	typeref:struct:buffer::buffer_data	file:
tail	filter.c	/^  struct access_list *tail;$/;"	m	language:C	struct:access_list_list	typeref:struct:access_list_list::access_list	file:
tail	filter.h	/^  struct filter *tail;$/;"	m	language:C++	struct:access_list	typeref:struct:access_list::filter
tail	linklist.h	/^  struct listnode *tail;$/;"	m	language:C++	struct:list	typeref:struct:list::listnode
tail	plist.c	/^  struct prefix_list *tail;$/;"	m	language:C	struct:prefix_list_list	typeref:struct:prefix_list_list::prefix_list	file:
tail	plist.h	/^  struct prefix_list_entry *tail;$/;"	m	language:C++	struct:prefix_list	typeref:struct:prefix_list::prefix_list_entry
tail	routemap.c	/^  struct route_map *tail;$/;"	m	language:C	struct:route_map_list	typeref:struct:route_map_list::route_map	file:
tail	routemap.h	/^  struct route_map_index *tail;$/;"	m	language:C++	struct:route_map	typeref:struct:route_map::route_map_index
tail	routemap.h	/^  struct route_map_rule *tail;$/;"	m	language:C++	struct:route_map_rule_list	typeref:struct:route_map_rule_list::route_map_rule
tail	stream.h	/^  struct stream *tail;$/;"	m	language:C++	struct:stream_fifo	typeref:struct:stream_fifo::stream
tail	thread.h	/^  struct thread *tail;$/;"	m	language:C++	struct:thread_list	typeref:struct:thread_list::thread
telnet_backward_char	vty.c	/^static const char telnet_backward_char = 0x08;$/;"	v	language:C	file:
telnet_space_char	vty.c	/^static const char telnet_space_char = ' ';$/;"	v	language:C	file:
thread	thread.h	/^struct thread$/;"	s	language:C++
thread	workqueue.h	/^  struct thread *thread;              \/* thread, if one is active *\/$/;"	m	language:C++	struct:work_queue	typeref:struct:work_queue::thread
thread_add_background	thread.h	176;"	d	language:C++
thread_add_event	thread.h	172;"	d	language:C++
thread_add_read	thread.h	168;"	d	language:C++
thread_add_timer	thread.h	170;"	d	language:C++
thread_add_timer_msec	thread.h	171;"	d	language:C++
thread_add_unuse	thread.c	/^thread_add_unuse (struct thread_master *m, struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread_master *m, struct thread *thread)
thread_add_write	thread.h	169;"	d	language:C++
thread_call	thread.c	/^thread_call (struct thread *thread)$/;"	f	language:C	signature:(struct thread *thread)
thread_cancel	thread.c	/^thread_cancel (struct thread *thread)$/;"	f	language:C	signature:(struct thread *thread)
thread_cancel_event	thread.c	/^thread_cancel_event (struct thread_master *m, void *arg)$/;"	f	language:C	signature:(struct thread_master *m, void *arg)
thread_consumed_time	thread.c	/^thread_consumed_time (RUSAGE_T *now, RUSAGE_T *start, unsigned long *cputime)$/;"	f	language:C	signature:(RUSAGE_T *now, RUSAGE_T *start, unsigned long *cputime)
thread_current	thread.c	/^struct thread *thread_current = NULL;$/;"	v	language:C	typeref:struct:thread
thread_empty	thread.c	/^thread_empty (struct thread_list *list)$/;"	f	language:C	file:	signature:(struct thread_list *list)
thread_execute	thread.h	173;"	d	language:C++
thread_fetch	thread.c	/^thread_fetch (struct thread_master *m, struct thread *fetch)$/;"	f	language:C	signature:(struct thread_master *m, struct thread *fetch)
thread_get	thread.c	/^thread_get (struct thread_master *m, u_char type,$/;"	f	language:C	file:	signature:(struct thread_master *m, u_char type, int (*func) (struct thread *), void *arg, debugargdef)
thread_getrusage	thread.c	/^thread_getrusage (RUSAGE_T *r)$/;"	f	language:C	signature:(RUSAGE_T *r)
thread_list	thread.h	/^struct thread_list$/;"	s	language:C++
thread_list_add	thread.c	/^thread_list_add (struct thread_list *list, struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread_list *list, struct thread *thread)
thread_list_delete	thread.c	/^thread_list_delete (struct thread_list *list, struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread_list *list, struct thread *thread)
thread_list_free	thread.c	/^thread_list_free (struct thread_master *m, struct thread_list *list)$/;"	f	language:C	file:	signature:(struct thread_master *m, struct thread_list *list)
thread_master	thread.h	/^struct thread_master$/;"	s	language:C++
thread_master_create	thread.c	/^thread_master_create ()$/;"	f	language:C
thread_master_free	thread.c	/^thread_master_free (struct thread_master *m)$/;"	f	language:C	signature:(struct thread_master *m)
thread_process	thread.c	/^thread_process (struct thread_list *list)$/;"	f	language:C	file:	signature:(struct thread_list *list)
thread_process_fd	thread.c	/^thread_process_fd (struct thread_list *list, fd_set *fdset, fd_set *mfdset)$/;"	f	language:C	file:	signature:(struct thread_list *list, fd_set *fdset, fd_set *mfdset)
thread_queue_free	thread.c	/^thread_queue_free (struct thread_master *m, struct pqueue *queue)$/;"	f	language:C	file:	signature:(struct thread_master *m, struct pqueue *queue)
thread_run	thread.c	/^thread_run (struct thread_master *m, struct thread *thread,$/;"	f	language:C	file:	signature:(struct thread_master *m, struct thread *thread, struct thread *fetch)
thread_should_yield	thread.c	/^thread_should_yield (struct thread *thread)$/;"	f	language:C	signature:(struct thread *thread)
thread_timer_cmp	thread.c	/^thread_timer_cmp(void *a, void *b)$/;"	f	language:C	file:	signature:(void *a, void *b)
thread_timer_process	thread.c	/^thread_timer_process (struct pqueue *queue, struct timeval *timenow)$/;"	f	language:C	file:	signature:(struct pqueue *queue, struct timeval *timenow)
thread_timer_remain_second	thread.c	/^thread_timer_remain_second (struct thread *thread)$/;"	f	language:C	signature:(struct thread *thread)
thread_timer_update	thread.c	/^thread_timer_update(void *node, int actual_position)$/;"	f	language:C	file:	signature:(void *node, int actual_position)
thread_timer_wait	thread.c	/^thread_timer_wait (struct pqueue *queue, struct timeval *timer_val)$/;"	f	language:C	file:	signature:(struct pqueue *queue, struct timeval *timer_val)
thread_trim_head	thread.c	/^thread_trim_head (struct thread_list *list)$/;"	f	language:C	file:	signature:(struct thread_list *list)
thread_type	thread.h	/^typedef unsigned char thread_type;$/;"	t	language:C++
time_print	log.c	/^time_print(FILE *fp, struct timestamp_control *ctl)$/;"	f	language:C	file:	signature:(FILE *fp, struct timestamp_control *ctl)
time_stats	thread.h	/^  struct time_stats$/;"	s	language:C++	struct:cpu_thread_history
timer	thread.h	/^  struct pqueue *timer;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::pqueue
timers_inited	thread.c	/^static unsigned short timers_inited;$/;"	v	language:C	file:
timestamp_control	log.h	/^struct timestamp_control {$/;"	s	language:C++
timestamp_precision	log.h	/^  int timestamp_precision;	\/* # of digits of subsecond precision *\/$/;"	m	language:C++	struct:zlog
timeval_adjust	thread.c	/^timeval_adjust (struct timeval a)$/;"	f	language:C	file:	signature:(struct timeval a)
timeval_cmp	thread.c	/^timeval_cmp (struct timeval a, struct timeval b)$/;"	f	language:C	file:	signature:(struct timeval a, struct timeval b)
timeval_elapsed	thread.c	/^timeval_elapsed (struct timeval a, struct timeval b)$/;"	f	language:C	signature:(struct timeval a, struct timeval b)
timeval_subtract	thread.c	/^timeval_subtract (struct timeval a, struct timeval b)$/;"	f	language:C	file:	signature:(struct timeval a, struct timeval b)
to64	command.c	/^to64(char *s, long v, int n)$/;"	f	language:C	file:	signature:(char *s, long v, int n)
token_cr	command.c	/^struct cmd_token token_cr;$/;"	v	language:C	typeref:struct:cmd_token
tokens	command.h	/^  vector tokens;		\/* Vector of cmd_tokens *\/$/;"	m	language:C++	struct:cmd_element
top	table.h	/^  struct route_node *top;$/;"	m	language:C++	struct:route_table	typeref:struct:route_table::route_node
topvect	command.c	/^  vector topvect; \/* Top level vector *\/$/;"	m	language:C	struct:format_parser_state	file:
total	thread.h	/^    unsigned long total, max;$/;"	m	language:C++	struct:cpu_thread_history::time_stats
total	workqueue.h	/^    unsigned long total;$/;"	m	language:C++	struct:work_queue::__anon32
total_calls	thread.h	/^  unsigned int total_calls;$/;"	m	language:C++	struct:cpu_thread_history
translate	regex-gnu.h	/^  RE_TRANSLATE_TYPE translate;$/;"	m	language:C++	struct:re_pattern_buffer
trap_default_signals	sigevent.c	/^trap_default_signals(void)$/;"	f	language:C	file:	signature:(void)
trap_object	smux.h	/^struct trap_object$/;"	s	language:C++
treelist	smux.c	/^struct list *treelist;$/;"	v	language:C	typeref:struct:list
trickle_down	pqueue.c	/^trickle_down (int index, struct pqueue *queue)$/;"	f	language:C	signature:(int index, struct pqueue *queue)
trickle_up	pqueue.c	/^trickle_up (int index, struct pqueue *queue)$/;"	f	language:C	signature:(int index, struct pqueue *queue)
true	regex.c	383;"	d	language:C	file:
tx_aborted_errors	if.h	/^  unsigned long tx_aborted_errors;$/;"	m	language:C++	struct:if_stats
tx_bytes	if.h	/^  unsigned long tx_bytes;     \/* total bytes transmitted      *\/$/;"	m	language:C++	struct:if_stats
tx_carrier_errors	if.h	/^  unsigned long tx_carrier_errors;$/;"	m	language:C++	struct:if_stats
tx_compressed	if.h	/^  unsigned long tx_compressed;$/;"	m	language:C++	struct:if_stats
tx_dropped	if.h	/^  unsigned long tx_dropped;   \/* no space available in linux  *\/$/;"	m	language:C++	struct:if_stats
tx_errors	if.h	/^  unsigned long tx_errors;    \/* packet transmit problems     *\/$/;"	m	language:C++	struct:if_stats
tx_fifo_errors	if.h	/^  unsigned long tx_fifo_errors;$/;"	m	language:C++	struct:if_stats
tx_heartbeat_errors	if.h	/^  unsigned long tx_heartbeat_errors;$/;"	m	language:C++	struct:if_stats
tx_packets	if.h	/^  unsigned long tx_packets;   \/* total packets transmitted    *\/$/;"	m	language:C++	struct:if_stats
tx_window_errors	if.h	/^  unsigned long tx_window_errors;$/;"	m	language:C++	struct:if_stats
type	command.h	/^  enum cmd_token_type type;$/;"	m	language:C++	struct:cmd_token	typeref:enum:cmd_token::cmd_token_type
type	filter.c	/^  enum filter_type type;$/;"	m	language:C	struct:filter	typeref:enum:filter::filter_type	file:
type	filter.h	/^  enum access_type type;$/;"	m	language:C++	struct:access_list	typeref:enum:access_list::access_type
type	plist.c	/^  enum prefix_list_type type;$/;"	m	language:C	struct:prefix_list_entry	typeref:enum:prefix_list_entry::prefix_list_type	file:
type	plist.h	/^  enum prefix_name_type type;$/;"	m	language:C++	struct:prefix_list	typeref:enum:prefix_list::prefix_name_type
type	route_types.h	/^  unsigned int type;$/;"	m	language:C++	struct:zebra_desc_table
type	routemap.h	/^  enum route_map_type type;			$/;"	m	language:C++	struct:route_map_index	typeref:enum:route_map_index::route_map_type
type	thread.h	/^  thread_type type;		\/* thread type *\/$/;"	m	language:C++	struct:thread
type	vty.h	/^  enum {VTY_TERM, VTY_FILE, VTY_SHELL, VTY_SHELL_SERV} type;$/;"	m	language:C++	struct:vty	typeref:enum:vty::__anon20
type	zclient.h	/^  u_char type;$/;"	m	language:C++	struct:zapi_ipv4
type	zclient.h	/^  u_char type;$/;"	m	language:C++	struct:zapi_ipv6
types	thread.h	/^  thread_type types;$/;"	m	language:C++	struct:cpu_thread_history
u	filter.c	/^    } u;$/;"	m	language:C	struct:filter	typeref:union:filter::__anon18	file:
u	prefix.h	/^  } u __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix	typeref:union:prefix::__anon14
u	thread.h	/^  } u;$/;"	m	language:C++	struct:thread	typeref:union:thread::__anon10
u_int16_t	zebra.h	/^typedef unsigned short  u_int16_t;$/;"	t	language:C++
u_int32_t	zebra.h	/^typedef unsigned int    u_int32_t;$/;"	t	language:C++
u_int8_t	zebra.h	/^typedef unsigned char   u_int8_t;$/;"	t	language:C++
uid_normal	privs.h	/^  uid_t uid_normal;                   \/* normal uid *\/$/;"	m	language:C++	struct:zprivs_ids_t
uid_priv	privs.h	/^  uid_t uid_priv;                     \/* privileged uid *\/$/;"	m	language:C++	struct:zprivs_ids_t
unknown	log.c	/^static const struct zebra_desc_table unknown = { 0, "unknown", '?' };$/;"	v	language:C	typeref:struct:zebra_desc_table	file:
unuse	thread.h	/^  struct thread_list unuse;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::thread_list
update	pqueue.h	/^  void (*update) (void * node, int actual_position);$/;"	m	language:C++	struct:pqueue
used	regex-gnu.h	/^  unsigned long int used;$/;"	m	language:C++	struct:re_pattern_buffer
user	privs.h	/^  const char *user;                   \/* user and group to run as *\/$/;"	m	language:C++	struct:zebra_privs_t
v_timeout	vty.h	/^  unsigned long v_timeout;$/;"	m	language:C++	struct:vty
va_copy	zebra.h	117;"	d	language:C++
va_copy	zebra.h	122;"	d	language:C++
val	getopt.h	/^  int val;$/;"	m	language:C++	struct:option
val	prefix.h	/^    u_char val[8];$/;"	m	language:C++	union:prefix::__anon14
val	prefix.h	/^  u_char val[8] __attribute__ ((aligned (8)));$/;"	m	language:C++	struct:prefix_rd
val	thread.h	/^    int val;			\/* second argument of the event. *\/$/;"	m	language:C++	union:thread::__anon10
value	routemap.c	/^  void *value;$/;"	m	language:C	struct:route_map_rule	file:
vararg_match	command.c	/^  vararg_match,$/;"	e	language:C	enum:match_type	file:
variables	smux.c	/^  struct variable *variables;$/;"	m	language:C	struct:subtree	typeref:struct:subtree::variable	file:
variables_num	smux.c	/^  int variables_num;$/;"	m	language:C	struct:subtree	file:
variables_width	smux.c	/^  int variables_width;$/;"	m	language:C	struct:subtree	file:
vector	vector.h	/^typedef struct _vector *vector;$/;"	t	language:C++	typeref:struct:_vector
vector_active	vector.h	45;"	d	language:C++
vector_copy	vector.c	/^vector_copy (vector v)$/;"	f	language:C	signature:(vector v)
vector_count	vector.c	/^vector_count (vector v)$/;"	f	language:C	signature:(vector v)
vector_empty_slot	vector.c	/^vector_empty_slot (vector v)$/;"	f	language:C	signature:(vector v)
vector_ensure	vector.c	/^vector_ensure (vector v, unsigned int num)$/;"	f	language:C	signature:(vector v, unsigned int num)
vector_free	vector.c	/^vector_free (vector v)$/;"	f	language:C	signature:(vector v)
vector_init	vector.c	/^vector_init (unsigned int size)$/;"	f	language:C	signature:(unsigned int size)
vector_lookup	vector.c	/^vector_lookup (vector v, unsigned int i)$/;"	f	language:C	signature:(vector v, unsigned int i)
vector_lookup_ensure	vector.c	/^vector_lookup_ensure (vector v, unsigned int i)$/;"	f	language:C	signature:(vector v, unsigned int i)
vector_only_index_free	vector.c	/^vector_only_index_free (void *index)$/;"	f	language:C	signature:(void *index)
vector_only_wrapper_free	vector.c	/^vector_only_wrapper_free (vector v)$/;"	f	language:C	signature:(vector v)
vector_set	vector.c	/^vector_set (vector v, void *val)$/;"	f	language:C	signature:(vector v, void *val)
vector_set_index	vector.c	/^vector_set_index (vector v, unsigned int i, void *val)$/;"	f	language:C	signature:(vector v, unsigned int i, void *val)
vector_slot	vector.h	40;"	d	language:C++
vector_unset	vector.c	/^vector_unset (vector v, unsigned int i)$/;"	f	language:C	signature:(vector v, unsigned int i)
version	zclient.h	/^  uint8_t version;$/;"	m	language:C++	struct:zserv_header
view_node	command.c	/^static struct cmd_node view_node =$/;"	v	language:C	typeref:struct:cmd_node	file:
vline	command.c	/^  vector vline; \/* The tokenized commandline which is to be matched *\/$/;"	m	language:C	struct:cmd_matcher	file:
vsnprintf	str.h	13;"	d	language:C++
vty	vty.h	/^struct vty $/;"	s	language:C++
vty_accept	vty.c	/^vty_accept (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vty_access_list_remark_unset	filter.c	/^vty_access_list_remark_unset (struct vty *vty, afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name)
vty_accesslist_name	vty.c	/^static char *vty_accesslist_name = NULL;$/;"	v	language:C	file:
vty_auth	vty.c	/^vty_auth (struct vty *vty, char *buf)$/;"	f	language:C	file:	signature:(struct vty *vty, char *buf)
vty_backward_char	vty.c	/^vty_backward_char (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_backward_kill_word	vty.c	/^vty_backward_kill_word (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_backward_pure_word	vty.c	/^vty_backward_pure_word (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_backward_word	vty.c	/^vty_backward_word (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_beginning_of_line	vty.c	/^vty_beginning_of_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_buffer_reset	vty.c	/^vty_buffer_reset (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_clear_buf	vty.c	/^vty_clear_buf (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_clear_prefix_list	plist.c	/^vty_clear_prefix_list (struct vty *vty, afi_t afi, const char *name, $/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name, const char *prefix)
vty_close	vty.c	/^vty_close (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_command	vty.c	/^vty_command (struct vty *vty, char *buf)$/;"	f	language:C	file:	signature:(struct vty *vty, char *buf)
vty_complete_command	vty.c	/^vty_complete_command (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_config	vty.c	/^static int vty_config;$/;"	v	language:C	file:
vty_config_lock	vty.c	/^vty_config_lock (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_config_unlock	vty.c	/^vty_config_unlock (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_config_write	vty.c	/^vty_config_write (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_create	vty.c	/^vty_create (int vty_sock, union sockunion *su)$/;"	f	language:C	file:	signature:(int vty_sock, union sockunion *su)
vty_cwd	vty.c	/^char *vty_cwd = NULL;$/;"	v	language:C
vty_delete_backward_char	vty.c	/^vty_delete_backward_char (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_delete_char	vty.c	/^vty_delete_char (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_describe_command	vty.c	/^vty_describe_command (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_describe_fold	vty.c	/^vty_describe_fold (struct vty *vty, int cmd_width,$/;"	f	language:C	file:	signature:(struct vty *vty, int cmd_width, unsigned int desc_width, struct cmd_token *token)
vty_do_window_size	vty.c	/^vty_do_window_size (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_dont_linemode	vty.c	/^vty_dont_linemode (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_down_level	vty.c	/^vty_down_level (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_end_config	vty.c	/^vty_end_config (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_end_of_line	vty.c	/^vty_end_of_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_ensure	vty.c	/^vty_ensure (struct vty *vty, int length)$/;"	f	language:C	file:	signature:(struct vty *vty, int length)
vty_escape_map	vty.c	/^vty_escape_map (unsigned char c, struct vty *vty)$/;"	f	language:C	file:	signature:(unsigned char c, struct vty *vty)
vty_event	vty.c	/^vty_event (enum event event, int sock, struct vty *vty)$/;"	f	language:C	file:	signature:(enum event event, int sock, struct vty *vty)
vty_execute	vty.c	/^vty_execute (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_flush	vty.c	/^vty_flush (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vty_forward_char	vty.c	/^vty_forward_char (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_forward_kill_word	vty.c	/^vty_forward_kill_word (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_forward_word	vty.c	/^vty_forward_word (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_get_cwd	vty.c	/^vty_get_cwd ()$/;"	f	language:C
vty_group	privs.h	/^  const char *vty_group;              \/* group to chown vty socket to *\/$/;"	m	language:C++	struct:zebra_privs_t
vty_hello	vty.c	/^vty_hello (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_hist_add	vty.c	/^vty_hist_add (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_history_print	vty.c	/^vty_history_print (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_init	vty.c	/^vty_init (struct thread_master *master_thread)$/;"	f	language:C	signature:(struct thread_master *master_thread)
vty_init_vtysh	vty.c	/^vty_init_vtysh ()$/;"	f	language:C
vty_insert_word_overwrite	vty.c	/^vty_insert_word_overwrite (struct vty *vty, char *str)$/;"	f	language:C	file:	signature:(struct vty *vty, char *str)
vty_invalid_prefix_range	plist.c	/^vty_invalid_prefix_range (struct vty *vty, const char *prefix)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *prefix)
vty_ipv6_accesslist_name	vty.c	/^static char *vty_ipv6_accesslist_name = NULL;$/;"	v	language:C	file:
vty_kill_line	vty.c	/^vty_kill_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_kill_line_from_beginning	vty.c	/^vty_kill_line_from_beginning (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_log	vty.c	/^vty_log (const char *level, const char *proto_str,$/;"	f	language:C	signature:(const char *level, const char *proto_str, const char *format, struct timestamp_control *ctl, va_list va)
vty_log_fixed	vty.c	/^vty_log_fixed (char *buf, size_t len)$/;"	f	language:C	signature:(char *buf, size_t len)
vty_log_out	vty.c	/^vty_log_out (struct vty *vty, const char *level, const char *proto_str,$/;"	f	language:C	file:	signature:(struct vty *vty, const char *level, const char *proto_str, const char *format, struct timestamp_control *ctl, va_list va)
vty_new	vty.c	/^vty_new ()$/;"	f	language:C
vty_next_line	vty.c	/^vty_next_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_node	vty.c	/^struct cmd_node vty_node =$/;"	v	language:C	typeref:struct:cmd_node
vty_out	vty.c	/^vty_out (struct vty *vty, const char *format, ...)$/;"	f	language:C	signature:(struct vty *vty, const char *format, ...)
vty_out_cpu_thread_history	thread.c	/^vty_out_cpu_thread_history(struct vty* vty,$/;"	f	language:C	file:	signature:(struct vty* vty, struct cpu_thread_history *a)
vty_prefix_list_desc_unset	plist.c	/^vty_prefix_list_desc_unset (struct vty *vty, afi_t afi, const char *name)$/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name)
vty_prefix_list_install	plist.c	/^vty_prefix_list_install (struct vty *vty, afi_t afi, const char *name, $/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name, const char *seq, const char *typestr, const char *prefix, const char *ge, const char *le)
vty_prefix_list_uninstall	plist.c	/^vty_prefix_list_uninstall (struct vty *vty, afi_t afi, const char *name, $/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name, const char *seq, const char *typestr, const char *prefix, const char *ge, const char *le)
vty_previous_line	vty.c	/^vty_previous_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_prompt	vty.c	/^vty_prompt (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_read	vty.c	/^vty_read (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vty_read_config	vty.c	/^vty_read_config (char *config_file,$/;"	f	language:C	signature:(char *config_file, char *config_default_dir)
vty_read_file	vty.c	/^vty_read_file (FILE *confp)$/;"	f	language:C	file:	signature:(FILE *confp)
vty_redraw_line	vty.c	/^vty_redraw_line (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_reset	vty.c	/^vty_reset ()$/;"	f	language:C
vty_save_cwd	vty.c	/^vty_save_cwd (void)$/;"	f	language:C	file:	signature:(void)
vty_self_insert	vty.c	/^vty_self_insert (struct vty *vty, char c)$/;"	f	language:C	file:	signature:(struct vty *vty, char c)
vty_self_insert_overwrite	vty.c	/^vty_self_insert_overwrite (struct vty *vty, char c)$/;"	f	language:C	file:	signature:(struct vty *vty, char c)
vty_serv_sock	vty.c	/^vty_serv_sock (const char *addr, unsigned short port, const char *path)$/;"	f	language:C	signature:(const char *addr, unsigned short port, const char *path)
vty_serv_sock_addrinfo	vty.c	/^vty_serv_sock_addrinfo (const char *hostname, unsigned short port)$/;"	f	language:C	file:	signature:(const char *hostname, unsigned short port)
vty_serv_sock_family	vty.c	/^vty_serv_sock_family (const char* addr, unsigned short port, int family)$/;"	f	language:C	file:	signature:(const char* addr, unsigned short port, int family)
vty_serv_un	vty.c	/^vty_serv_un (const char *path)$/;"	f	language:C	file:	signature:(const char *path)
vty_shell	vty.c	/^vty_shell (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_shell_serv	vty.c	/^vty_shell_serv (struct vty *vty)$/;"	f	language:C	signature:(struct vty *vty)
vty_show_prefix_entry	plist.c	/^vty_show_prefix_entry (struct vty *vty, afi_t afi, struct prefix_list *plist,$/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, struct prefix_list *plist, struct prefix_master *master, enum display_type dtype, int seqnum)
vty_show_prefix_list	plist.c	/^vty_show_prefix_list (struct vty *vty, afi_t afi, const char *name,$/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name, const char *seq, enum display_type dtype)
vty_show_prefix_list_prefix	plist.c	/^vty_show_prefix_list_prefix (struct vty *vty, afi_t afi, const char *name, $/;"	f	language:C	file:	signature:(struct vty *vty, afi_t afi, const char *name, const char *prefix, enum display_type type)
vty_show_route_map	routemap.c	/^vty_show_route_map (struct vty *vty, const char *name)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *name)
vty_show_route_map_entry	routemap.c	/^vty_show_route_map_entry (struct vty *vty, struct route_map *map)$/;"	f	language:C	file:	signature:(struct vty *vty, struct route_map *map)
vty_stop_input	vty.c	/^vty_stop_input (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_telnet_option	vty.c	/^vty_telnet_option (struct vty *vty, unsigned char *buf, int nbytes)$/;"	f	language:C	file:	signature:(struct vty *vty, unsigned char *buf, int nbytes)
vty_terminate	vty.c	/^vty_terminate (void)$/;"	f	language:C	signature:(void)
vty_time_print	vty.c	/^vty_time_print (struct vty *vty, int cr)$/;"	f	language:C	signature:(struct vty *vty, int cr)
vty_timeout	vty.c	/^vty_timeout (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vty_timeout_val	vty.c	/^static unsigned long vty_timeout_val = VTY_TIMEOUT_DEFAULT;$/;"	v	language:C	file:
vty_transpose_chars	vty.c	/^vty_transpose_chars (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_use_backup_config	vty.c	/^vty_use_backup_config (char *fullpath)$/;"	f	language:C	file:	signature:(char *fullpath)
vty_will_echo	vty.c	/^vty_will_echo (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_will_suppress_go_ahead	vty.c	/^vty_will_suppress_go_ahead (struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vty_write	vty.c	/^vty_write (struct vty *vty, const char *buf, size_t nbytes)$/;"	f	language:C	file:	signature:(struct vty *vty, const char *buf, size_t nbytes)
vtygrp	privs.c	/^  gid_t vtygrp;               \/* gid for vty sockets      *\/$/;"	m	language:C	struct:_zprivs_t	file:
vtysh	command.h	/^  int vtysh;$/;"	m	language:C++	struct:cmd_node
vtysh_accept	vty.c	/^vtysh_accept (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vtysh_flush	vty.c	/^vtysh_flush(struct vty *vty)$/;"	f	language:C	file:	signature:(struct vty *vty)
vtysh_read	vty.c	/^vtysh_read (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vtysh_write	vty.c	/^vtysh_write (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
vtyvec	vty.c	/^static vector vtyvec;$/;"	v	language:C	file:
vzlog	log.c	/^vzlog (struct zlog *zl, int priority, const char *format, va_list args)$/;"	f	language:C	file:	signature:(struct zlog *zl, int priority, const char *format, va_list args)
wb	zclient.h	/^  struct buffer *wb;$/;"	m	language:C++	struct:zclient	typeref:struct:zclient::buffer
weak_alias	regex.c	/^weak_alias (__regerror, regerror)$/;"	f	language:C
width	vty.h	/^  int width;$/;"	m	language:C++	struct:vty
word	regex.c	/^  fail_stack_elt_t word;$/;"	m	language:C	union:__anon25	file:
word_index	command.c	/^  unsigned int word_index; \/* iterating over vline *\/$/;"	m	language:C	struct:cmd_matcher	file:
wordbeg	regex.c	/^  wordbeg,	\/* Succeeds if at word beginning.  *\/$/;"	e	language:C	enum:__anon22	file:
wordbound	regex.c	/^  wordbound,	\/* Succeeds if at a word boundary.  *\/$/;"	e	language:C	enum:__anon22	file:
wordchar	regex.c	/^  wordchar,	\/* Matches any word-constituent character.  *\/$/;"	e	language:C	enum:__anon22	file:
wordend	regex.c	/^  wordend,	\/* Succeeds if at word end.  *\/$/;"	e	language:C	enum:__anon22	file:
work_queue	workqueue.h	/^struct work_queue$/;"	s	language:C++
work_queue_add	workqueue.c	/^work_queue_add (struct work_queue *wq, void *data)$/;"	f	language:C	signature:(struct work_queue *wq, void *data)
work_queue_free	workqueue.c	/^work_queue_free (struct work_queue *wq)$/;"	f	language:C	signature:(struct work_queue *wq)
work_queue_item	workqueue.h	/^struct work_queue_item$/;"	s	language:C++
work_queue_item_free	workqueue.c	/^work_queue_item_free (struct work_queue_item *item)$/;"	f	language:C	file:	signature:(struct work_queue_item *item)
work_queue_item_new	workqueue.c	/^work_queue_item_new (struct work_queue *wq)$/;"	f	language:C	file:	signature:(struct work_queue *wq)
work_queue_item_remove	workqueue.c	/^work_queue_item_remove (struct work_queue *wq, struct listnode *ln)$/;"	f	language:C	file:	signature:(struct work_queue *wq, struct listnode *ln)
work_queue_item_requeue	workqueue.c	/^work_queue_item_requeue (struct work_queue *wq, struct listnode *ln)$/;"	f	language:C	file:	signature:(struct work_queue *wq, struct listnode *ln)
work_queue_new	workqueue.c	/^work_queue_new (struct thread_master *m, const char *queue_name)$/;"	f	language:C	signature:(struct thread_master *m, const char *queue_name)
work_queue_plug	workqueue.c	/^work_queue_plug (struct work_queue *wq)$/;"	f	language:C	signature:(struct work_queue *wq)
work_queue_run	workqueue.c	/^work_queue_run (struct thread *thread)$/;"	f	language:C	signature:(struct thread *thread)
work_queue_schedule	workqueue.c	/^work_queue_schedule (struct work_queue *wq, unsigned int delay)$/;"	f	language:C	file:	signature:(struct work_queue *wq, unsigned int delay)
work_queue_unplug	workqueue.c	/^work_queue_unplug (struct work_queue *wq)$/;"	f	language:C	signature:(struct work_queue *wq)
work_queues	workqueue.c	/^static struct list *work_queues = &_work_queues;$/;"	v	language:C	typeref:struct:list	file:
workfunc	workqueue.h	/^    wq_item_status (*workfunc) (struct work_queue *, void *);$/;"	m	language:C++	struct:work_queue::__anon31
wq_item_status	workqueue.h	/^} wq_item_status;$/;"	t	language:C++	typeref:enum:__anon30
write	thread.h	/^  struct thread_list write;$/;"	m	language:C++	struct:thread_master	typeref:struct:thread_master::thread_list
writefd	thread.h	/^  fd_set writefd;$/;"	m	language:C++	struct:thread_master
writen	network.c	/^writen(int fd, const u_char *ptr, int nbytes)$/;"	f	language:C	signature:(int fd, const u_char *ptr, int nbytes)
zapi_ipv4	zclient.h	/^struct zapi_ipv4$/;"	s	language:C++
zapi_ipv4_route	zclient.c	/^zapi_ipv4_route (u_char cmd, struct zclient *zclient, struct prefix_ipv4 *p,$/;"	f	language:C	signature:(u_char cmd, struct zclient *zclient, struct prefix_ipv4 *p, struct zapi_ipv4 *api)
zapi_ipv6	zclient.h	/^struct zapi_ipv6$/;"	s	language:C++
zapi_ipv6_route	zclient.c	/^zapi_ipv6_route (u_char cmd, struct zclient *zclient, struct prefix_ipv6 *p,$/;"	f	language:C	signature:(u_char cmd, struct zclient *zclient, struct prefix_ipv6 *p, struct zapi_ipv6 *api)
zassert	zassert.h	37;"	d	language:C++
zcalloc	memory.c	/^zcalloc (int type, size_t size)$/;"	f	language:C	signature:(int type, size_t size)
zcaps2sys	privs.c	/^zcaps2sys (zebra_capabilities_t *zcaps, int num)$/;"	f	language:C	file:	signature:(zebra_capabilities_t *zcaps, int num)
zclient	zclient.h	/^struct zclient$/;"	s	language:C++
zclient_connect	zclient.c	/^zclient_connect (struct thread *t)$/;"	f	language:C	file:	signature:(struct thread *t)
zclient_create_header	zclient.c	/^zclient_create_header (struct stream *s, uint16_t command)$/;"	f	language:C	signature:(struct stream *s, uint16_t command)
zclient_debug	zclient.c	/^int zclient_debug = 0;$/;"	v	language:C
zclient_event	zclient.c	/^zclient_event (enum event event, struct zclient *zclient)$/;"	f	language:C	file:	signature:(enum event event, struct zclient *zclient)
zclient_failed	zclient.c	/^zclient_failed(struct zclient *zclient)$/;"	f	language:C	file:	signature:(struct zclient *zclient)
zclient_flush_data	zclient.c	/^zclient_flush_data(struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
zclient_free	zclient.c	/^zclient_free (struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zclient_init	zclient.c	/^zclient_init (struct zclient *zclient, int redist_default)$/;"	f	language:C	signature:(struct zclient *zclient, int redist_default)
zclient_new	zclient.c	/^zclient_new ()$/;"	f	language:C
zclient_read	zclient.c	/^zclient_read (struct thread *thread)$/;"	f	language:C	file:	signature:(struct thread *thread)
zclient_redistribute	zclient.c	/^zclient_redistribute (int command, struct zclient *zclient, int type)$/;"	f	language:C	signature:(int command, struct zclient *zclient, int type)
zclient_redistribute_default	zclient.c	/^zclient_redistribute_default (int command, struct zclient *zclient)$/;"	f	language:C	signature:(int command, struct zclient *zclient)
zclient_reset	zclient.c	/^zclient_reset (struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zclient_send_message	zclient.c	/^zclient_send_message(struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zclient_serv_path	zclient.c	/^char *zclient_serv_path = NULL;$/;"	v	language:C
zclient_serv_path_get	zclient.c	/^const char *const zclient_serv_path_get()$/;"	f	language:C
zclient_serv_path_set	zclient.c	/^zclient_serv_path_set (char *path)$/;"	f	language:C	signature:(char *path)
zclient_socket	zclient.c	/^zclient_socket(void)$/;"	f	language:C	file:	signature:(void)
zclient_socket_connect	zclient.c	/^zclient_socket_connect (struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zclient_socket_un	zclient.c	/^zclient_socket_un (const char *path)$/;"	f	language:C	file:	signature:(const char *path)
zclient_start	zclient.c	/^zclient_start (struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zclient_stop	zclient.c	/^zclient_stop (struct zclient *zclient)$/;"	f	language:C	signature:(struct zclient *zclient)
zebra_capabilities_t	privs.h	/^} zebra_capabilities_t;$/;"	t	language:C++	typeref:enum:__anon33
zebra_command_t	zebra.h	/^typedef u_int16_t zebra_command_t;$/;"	t	language:C++
zebra_desc_table	route_types.h	/^struct zebra_desc_table$/;"	s	language:C++
zebra_hello_send	zclient.c	/^zebra_hello_send (struct zclient *zclient)$/;"	f	language:C	file:	signature:(struct zclient *zclient)
zebra_interface_add_read	zclient.c	/^zebra_interface_add_read (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
zebra_interface_address_read	zclient.c	/^zebra_interface_address_read (int type, struct stream *s)$/;"	f	language:C	signature:(int type, struct stream *s)
zebra_interface_if_set_value	zclient.c	/^zebra_interface_if_set_value (struct stream *s, struct interface *ifp)$/;"	f	language:C	signature:(struct stream *s, struct interface *ifp)
zebra_interface_state_read	zclient.c	/^zebra_interface_state_read (struct stream *s)$/;"	f	language:C	signature:(struct stream *s)
zebra_message_send	zclient.c	/^zebra_message_send (struct zclient *zclient, int command)$/;"	f	language:C	file:	signature:(struct zclient *zclient, int command)
zebra_privs_current_t	privs.h	/^} zebra_privs_current_t;$/;"	t	language:C++	typeref:enum:__anon34
zebra_privs_ops_t	privs.h	/^} zebra_privs_ops_t;$/;"	t	language:C++	typeref:enum:__anon35
zebra_privs_t	privs.h	/^struct zebra_privs_t$/;"	s	language:C++
zebra_redistribute_send	zclient.c	/^zebra_redistribute_send (int command, struct zclient *zclient, int type)$/;"	f	language:C	signature:(int command, struct zclient *zclient, int type)
zebra_route_char	log.c	/^zebra_route_char(u_int zroute)$/;"	f	language:C	signature:(u_int zroute)
zebra_route_string	log.c	/^zebra_route_string(u_int zroute)$/;"	f	language:C	signature:(u_int zroute)
zebra_router_id_update_read	zclient.c	/^zebra_router_id_update_read (struct stream *s, struct prefix *rid)$/;"	f	language:C	signature:(struct stream *s, struct prefix *rid)
zebra_size_t	zebra.h	/^typedef u_int16_t zebra_size_t;$/;"	t	language:C++
zencrypt	command.c	/^zencrypt (const char *passwd)$/;"	f	language:C	file:	signature:(const char *passwd)
zerror	memory.c	/^zerror (const char *fname, int type, size_t size)$/;"	f	language:C	file:	signature:(const char *fname, int type, size_t size)
zfilter	filter.c	/^      struct filter_zebra zfilter;$/;"	m	language:C	union:filter::__anon18	typeref:struct:filter::__anon18::filter_zebra	file:
zfree	memory.c	/^zfree (int type, void *ptr)$/;"	f	language:C	signature:(int type, void *ptr)
zgid	privs.c	/^  gid_t zgid;                 \/* gid to run as            *\/$/;"	m	language:C	struct:_zprivs_t	file:
zlog	log.c	/^zlog (struct zlog *zl, int priority, const char *format, ...)$/;"	f	language:C	signature:(struct zlog *zl, int priority, const char *format, ...)
zlog	log.h	/^struct zlog $/;"	s	language:C++
zlog_backtrace	log.c	/^zlog_backtrace(int priority)$/;"	f	language:C	signature:(int priority)
zlog_backtrace_sigsafe	log.c	/^zlog_backtrace_sigsafe(int priority, void *program_counter)$/;"	f	language:C	signature:(int priority, void *program_counter)
zlog_default	log.c	/^struct zlog *zlog_default = NULL;$/;"	v	language:C	typeref:struct:zlog
zlog_dest_t	log.h	/^} zlog_dest_t;$/;"	t	language:C++	typeref:enum:__anon39
zlog_priority	log.c	/^const char *zlog_priority[] =$/;"	v	language:C
zlog_proto_names	log.c	/^const char *zlog_proto_names[] = $/;"	v	language:C
zlog_proto_t	log.h	/^} zlog_proto_t;$/;"	t	language:C++	typeref:enum:__anon38
zlog_reset_file	log.c	/^zlog_reset_file (struct zlog *zl)$/;"	f	language:C	signature:(struct zlog *zl)
zlog_rotate	log.c	/^zlog_rotate (struct zlog *zl)$/;"	f	language:C	signature:(struct zlog *zl)
zlog_set_file	log.c	/^zlog_set_file (struct zlog *zl, const char *filename, int log_level)$/;"	f	language:C	signature:(struct zlog *zl, const char *filename, int log_level)
zlog_set_level	log.c	/^zlog_set_level (struct zlog *zl, zlog_dest_t dest, int log_level)$/;"	f	language:C	signature:(struct zlog *zl, zlog_dest_t dest, int log_level)
zlog_signal	log.c	/^zlog_signal(int signo, const char *action$/;"	f	language:C	signature:(int signo, const char *action , siginfo_t *siginfo, void *program_counter )
zmalloc	memory.c	/^zmalloc (int type, size_t size)$/;"	f	language:C	signature:(int type, size_t size)
zprivs_caps_init	privs.c	/^zprivs_caps_init (struct zebra_privs_t *zprivs)$/;"	f	language:C	file:	signature:(struct zebra_privs_t *zprivs)
zprivs_caps_terminate	privs.c	/^zprivs_caps_terminate (void)$/;"	f	language:C	file:	signature:(void)
zprivs_change_caps	privs.c	/^zprivs_change_caps (zebra_privs_ops_t op)$/;"	f	language:C	signature:(zebra_privs_ops_t op)
zprivs_change_null	privs.c	/^zprivs_change_null (zebra_privs_ops_t op)$/;"	f	language:C	signature:(zebra_privs_ops_t op)
zprivs_change_uid	privs.c	/^zprivs_change_uid (zebra_privs_ops_t op)$/;"	f	language:C	signature:(zebra_privs_ops_t op)
zprivs_get_ids	privs.c	/^zprivs_get_ids(struct zprivs_ids_t *ids)$/;"	f	language:C	signature:(struct zprivs_ids_t *ids)
zprivs_ids_t	privs.h	/^struct zprivs_ids_t$/;"	s	language:C++
zprivs_init	privs.c	/^zprivs_init(struct zebra_privs_t *zprivs)$/;"	f	language:C	signature:(struct zebra_privs_t *zprivs)
zprivs_null_state	privs.c	/^static zebra_privs_current_t zprivs_null_state = ZPRIVS_RAISED;$/;"	v	language:C	file:
zprivs_state	privs.c	/^} zprivs_state;$/;"	v	language:C	typeref:struct:_zprivs_t	file:
zprivs_state_caps	privs.c	/^zprivs_state_caps (void)$/;"	f	language:C	signature:(void)
zprivs_state_null	privs.c	/^zprivs_state_null (void)$/;"	f	language:C	signature:(void)
zprivs_state_uid	privs.c	/^zprivs_state_uid (void)$/;"	f	language:C	signature:(void)
zprivs_terminate	privs.c	/^zprivs_terminate (struct zebra_privs_t *zprivs)$/;"	f	language:C	signature:(struct zebra_privs_t *zprivs)
zrealloc	memory.c	/^zrealloc (int type, void *ptr, size_t size)$/;"	f	language:C	signature:(int type, void *ptr, size_t size)
zroute_lookup	log.c	/^zroute_lookup(u_int zroute)$/;"	f	language:C	file:	signature:(u_int zroute)
zserv_command_string	log.c	/^zserv_command_string (unsigned int command)$/;"	f	language:C	signature:(unsigned int command)
zserv_header	zclient.h	/^struct zserv_header$/;"	s	language:C++
zstrdup	memory.c	/^zstrdup (int type, const char *str)$/;"	f	language:C	signature:(int type, const char *str)
zsuid	privs.c	/^        zsuid;                \/* saved uid                *\/$/;"	m	language:C	struct:_zprivs_t	file:
zuid	privs.c	/^  uid_t zuid,                 \/* uid to run as            *\/$/;"	m	language:C	struct:_zprivs_t	file:
